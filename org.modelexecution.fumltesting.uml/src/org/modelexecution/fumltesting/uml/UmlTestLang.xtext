grammar org.modelexecution.fumltesting.uml.UmlTestLang with org.eclipse.xtext.xbase.Xbase

import "http://www.eclipse.org/uml2/4.0.0/UML" as uml
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate umlTestLang "http://www.modelexecution.org/fumltesting/uml/UmlTestLang"

UMLTestSuite:
	(imports+=Import)* (scenarios+=UMLScenario)* (tests+=UMLTestCase)*;

Import:
	'import' importedNamespace=QualifiedNameWithWildcard;

UMLTestCase:
	'test' name=ID 'activity' activityUnderTest=[uml::Activity|QualifiedName] ('(' inputs+=UMLActivityInput (','
	inputs+=UMLActivityInput)* ')')? ('on' contextObject=[UMLObjectSpecification|QualifiedName])? '{' 
	('initialize' (initScenarios+=[UMLScenario]) (',' (initScenarios+=[UMLScenario]))* ';')?
	(assertions+=UMLAssertion)* '}';

UMLActivityInput:
	parameter=[uml::ActivityParameterNode|QualifiedName] '=' value=UMLValue;

UMLValue:
	UMLSimpleValue | UMLObjectValue;

UMLSimpleValue:
	(negative?='-')? value=XLiteral;

UMLObjectValue:
	value=[UMLObjectSpecification|QualifiedName];

UMLScenario:
	'scenario' name=ID '[' (objects+=UMLObjectSpecification)* (links+=UMLLink)* ']';

UMLObjectSpecification:
	'object' name=ID ':' type=[uml::Class|QualifiedName] '{' (attributes+=UMLAttribute)* '}';

UMLAttribute:
	att=[uml::Property|QualifiedName] '=' value=UMLValue ';';

UMLLink:
	'link' assoc=[uml::Association|QualifiedName] '{' 'source' sourceProperty=[uml::Property|QualifiedName] '='
	sourceValue=[UMLObjectSpecification|QualifiedName] ';' 'target' targetProperty=[uml::Property|QualifiedName] '='
	targetValue=[UMLObjectSpecification|QualifiedName] ';' '}';

UMLAssertion:
	UMLOrderAssertion | UMLStateAssertion | UMLFinallyStateAssertion;

UMLStateAssertion:
	'assertState' quantifier=UMLTemporalQuantifier operator=UMLTemporalOperator referencePoint=UMLReferencePoint ('until'
	untilPoint=UMLReferencePoint)? '{' (checks+=UMLCheck)* '}';

UMLReferencePoint:
	UMLActionReferencePoint | UMLConstraintReferencePoint;

UMLActionReferencePoint:
	'action' action=[uml::Action|QualifiedName];

UMLConstraintReferencePoint:
	'constraint' constraintName=XStringLiteral;

UMLFinallyStateAssertion:
	'finally' '{' {FinallyStateAssertion} (checks+=UMLCheck)* '}';

UMLCheck:
	UMLConstraintCheck | UMLStateExpression;

UMLConstraintCheck:
	'check' constraintNames+=XStringLiteral (',' constraintNames+=XStringLiteral)* ('on'
	object=[uml::ObjectNode|QualifiedName])? ';';

UMLStateExpression:
	UMLObjectStateExpression | UMLPropertyStateExpression;

UMLObjectStateExpression:
	pin=[uml::ObjectNode|QualifiedName] operator=UMLArithmeticOperator value=UMLValue ';';

UMLPropertyStateExpression:
	pin=[uml::ObjectNode|QualifiedName] '::' property=[uml::Property|QualifiedName] operator=UMLArithmeticOperator
	value=UMLValue ';';

UMLOrderAssertion:
	'assertOrder' order=UMLNodeOrder ';';

UMLNodeOrder:
	nodes+=UMLNodeSpecification (',' nodes+=UMLNodeSpecification)*;

UMLNodeSpecification:
	node=[uml::ActivityNode|QualifiedName] (':' size=XNumberLiteral)? ('(' subOrder=UMLNodeOrder ')')? | joker='*' |
	joker='_';

enum UMLArithmeticOperator:
	equal='=' | not_equal='!=' | greater='>' | smaller='<' | greater_equal='>=' | smaller_equal='<=' |
	includes='includes' | excludes='excludes';

enum UMLTemporalOperator:
	after | until;

enum UMLTemporalQuantifier:
	always | sometimes | eventually | immediately;