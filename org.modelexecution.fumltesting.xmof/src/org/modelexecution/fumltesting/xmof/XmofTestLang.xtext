grammar org.modelexecution.fumltesting.xmof.XmofTestLang with org.eclipse.xtext.xbase.Xbase

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

import "http://www.modelexecution.org/xmof/syntax/actions/completeactions" as CompleteActions
import "http://www.modelexecution.org/xmof/syntax/activities/intermediateactivities" as IntermediateActivities

import "http://www.modelexecution.org/xmof/syntax/actions/basicactions" as BasicActions
import "http://www.modelexecution.org/xmof/syntax/actions/intermediateactions" as IntermediateActions

import "http://www.modelexecution.org/xmof/syntax/activities/completestructuredactivities" as CompleteStructuredActivities
import "http://www.modelexecution.org/xmof/syntax/activities/extrastructuredactivities" as ExtraStructuredActivities

import "http://www.modelexecution.org/xmof/syntax/classes/mykernel" as Kernel
import "http://www.modelexecution.org/xmof/syntax/commonbehaviors/communications" as Communications
import "http://www.modelexecution.org/xmof/syntax/commonbehaviors/basicbehaviors" as BasicBehaviors

generate xmofTestLang "http://www.modelexecution.org/fumltesting/xmof/XmofTestLang"

XMOFTestSuite:
	(imports+=Import)* (scenarios+=XMOFScenario)* (tests+=XMOFTestCase)*;

Import:
	'import' importedNamespace=QualifiedNameWithWildcard;

XMOFTestCase:
	'test' name=ID 'activity' activityUnderTest=[IntermediateActivities::Activity|QualifiedName] ('(' inputs+=XMOFActivityInput (','
	inputs+=XMOFActivityInput)* ')')? ('on' contextObject=[XMOFObjectSpecification])? '{' ('initialize' '['
	(initScenarios+=[XMOFScenario]) (',' initScenarios+=[XMOFScenario])* ']' ';')?
	(assertions+=XMOFAssertion)* '}';

XMOFActivityInput:
	parameter=[IntermediateActivities::ActivityParameterNode|QualifiedName] '=' value=XMOFValue;

XMOFValue:
	XMOFSimpleValue | XMOFObjectValue;

XMOFSimpleValue:
	value=XLiteral;

XMOFObjectValue:
	value=[XMOFObjectSpecification];

XMOFScenario:
	'scenario' name=ID '[' (objects+=XMOFObjectSpecification)* (links+=XMOFLink)* ']';

XMOFObjectSpecification:
	'object' name=ID ':' type=[ecore::EClass|QualifiedName] '{' (attributes+=XMOFAttribute)* '}';

XMOFAttribute:
	att=[ecore::EAttribute|QualifiedName] '=' value=XMOFValue ';';

XMOFLink:
	'link' assoc=[ecore::EReference|QualifiedName] '{' 'source' sourceProperty=[ecore::EAttribute|QualifiedName] '='
	sourceValue=[XMOFObjectSpecification] ';' 'target' targetProperty=[ecore::EAttribute|QualifiedName] '='
	targetValue=[XMOFObjectSpecification] ';' '}';

XMOFAssertion:
	XMOFOrderAssertion | XMOFStateAssertion | XMOFFinallyStateAssertion;

XMOFStateAssertion:
	'assertState' quantifier=XMOFTemporalQuantifier operator=XMOFTemporalOperator referencePoint=XMOFReferencePoint ('until'
	untilPoint=XMOFReferencePoint)? '{' (checks+=XMOFCheck)* '}';

XMOFReferencePoint:
	XMOFActionReferencePoint | XMOFConstraintReferencePoint;

XMOFActionReferencePoint:
	'action' action=[BasicActions::Action|QualifiedName];

XMOFConstraintReferencePoint:
	'constraint' constraintName=XStringLiteral;

XMOFFinallyStateAssertion:
	'finally' '{' {FinallyStateAssertion} (checks+=XMOFCheck)* '}';

XMOFCheck:
	XMOFConstraintCheck | XMOFStateExpression;

XMOFConstraintCheck:
	'check' constraintNames+=XStringLiteral (',' constraintNames+=XStringLiteral)* ('on'
	object=[IntermediateActivities::ObjectNode|QualifiedName])? ';';

XMOFStateExpression:
	XMOFObjectStateExpression | XMOFPropertyStateExpression;

XMOFObjectStateExpression:
	pin=[IntermediateActivities::ObjectNode|QualifiedName] operator=XMOFArithmeticOperator value=XMOFValue ';';

XMOFPropertyStateExpression:
	pin=[IntermediateActivities::ObjectNode|QualifiedName] '::' property=[ecore::EAttribute|QualifiedName] operator=XMOFArithmeticOperator
	value=XMOFValue ';';

XMOFOrderAssertion:
	'assertOrder' order=XMOFNodeOrder ';';

XMOFNodeOrder:
	nodes+=XMOFNodeSpecification (',' nodes+=XMOFNodeSpecification)*;

XMOFNodeSpecification:
	node=[IntermediateActivities::ActivityNode|QualifiedName] (':' size=XNumberLiteral)? ('(' subOrder=XMOFNodeOrder ')')? | joker='*' |
	joker='_';

enum XMOFArithmeticOperator:
	equal='=' | not_equal='!=' | greater='>' | smaller='<' | greater_equal='>=' | smaller_equal='<=' |
	includes='includes' | excludes='excludes';

enum XMOFTemporalOperator:
	after | until;

enum XMOFTemporalQuantifier:
	always | sometimes | eventually | immediately;