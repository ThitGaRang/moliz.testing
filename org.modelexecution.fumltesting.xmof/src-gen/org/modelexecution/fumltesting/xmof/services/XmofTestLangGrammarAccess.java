/*
* generated by Xtext
*/
package org.modelexecution.fumltesting.xmof.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.xbase.services.XbaseGrammarAccess;
import org.eclipse.xtext.xbase.services.XtypeGrammarAccess;

@Singleton
public class XmofTestLangGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class XMOFTestSuiteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XMOFTestSuite");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cImportsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cImportsImportParserRuleCall_0_0 = (RuleCall)cImportsAssignment_0.eContents().get(0);
		private final Assignment cScenariosAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cScenariosXMOFScenarioParserRuleCall_1_0 = (RuleCall)cScenariosAssignment_1.eContents().get(0);
		private final Assignment cTestsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTestsXMOFTestCaseParserRuleCall_2_0 = (RuleCall)cTestsAssignment_2.eContents().get(0);
		
		//XMOFTestSuite:
		//	imports+=Import* scenarios+=XMOFScenario* tests+=XMOFTestCase*;
		public ParserRule getRule() { return rule; }

		//imports+=Import* scenarios+=XMOFScenario* tests+=XMOFTestCase*
		public Group getGroup() { return cGroup; }

		//imports+=Import*
		public Assignment getImportsAssignment_0() { return cImportsAssignment_0; }

		//Import
		public RuleCall getImportsImportParserRuleCall_0_0() { return cImportsImportParserRuleCall_0_0; }

		//scenarios+=XMOFScenario*
		public Assignment getScenariosAssignment_1() { return cScenariosAssignment_1; }

		//XMOFScenario
		public RuleCall getScenariosXMOFScenarioParserRuleCall_1_0() { return cScenariosXMOFScenarioParserRuleCall_1_0; }

		//tests+=XMOFTestCase*
		public Assignment getTestsAssignment_2() { return cTestsAssignment_2; }

		//XMOFTestCase
		public RuleCall getTestsXMOFTestCaseParserRuleCall_2_0() { return cTestsXMOFTestCaseParserRuleCall_2_0; }
	}

	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0 = (RuleCall)cImportedNamespaceAssignment_1.eContents().get(0);
		
		//Import:
		//	"import" importedNamespace=QualifiedNameWithWildcard;
		public ParserRule getRule() { return rule; }

		//"import" importedNamespace=QualifiedNameWithWildcard
		public Group getGroup() { return cGroup; }

		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//importedNamespace=QualifiedNameWithWildcard
		public Assignment getImportedNamespaceAssignment_1() { return cImportedNamespaceAssignment_1; }

		//QualifiedNameWithWildcard
		public RuleCall getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0() { return cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0; }
	}

	public class XMOFTestCaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XMOFTestCase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTestKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cActivityKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cActivityUnderTestAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cActivityUnderTestActivityCrossReference_3_0 = (CrossReference)cActivityUnderTestAssignment_3.eContents().get(0);
		private final RuleCall cActivityUnderTestActivityQualifiedNameParserRuleCall_3_0_1 = (RuleCall)cActivityUnderTestActivityCrossReference_3_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cInputsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cInputsXMOFActivityInputParserRuleCall_4_1_0 = (RuleCall)cInputsAssignment_4_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cCommaKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cInputsAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cInputsXMOFActivityInputParserRuleCall_4_2_1_0 = (RuleCall)cInputsAssignment_4_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cOnKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cContextObjectAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final CrossReference cContextObjectXMOFObjectSpecificationCrossReference_5_1_0 = (CrossReference)cContextObjectAssignment_5_1.eContents().get(0);
		private final RuleCall cContextObjectXMOFObjectSpecificationIDTerminalRuleCall_5_1_0_1 = (RuleCall)cContextObjectXMOFObjectSpecificationCrossReference_5_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cInitializeKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Assignment cInitScenariosAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final CrossReference cInitScenariosXMOFScenarioCrossReference_7_2_0 = (CrossReference)cInitScenariosAssignment_7_2.eContents().get(0);
		private final RuleCall cInitScenariosXMOFScenarioIDTerminalRuleCall_7_2_0_1 = (RuleCall)cInitScenariosXMOFScenarioCrossReference_7_2_0.eContents().get(1);
		private final Group cGroup_7_3 = (Group)cGroup_7.eContents().get(3);
		private final Keyword cCommaKeyword_7_3_0 = (Keyword)cGroup_7_3.eContents().get(0);
		private final Assignment cInitScenariosAssignment_7_3_1 = (Assignment)cGroup_7_3.eContents().get(1);
		private final CrossReference cInitScenariosXMOFScenarioCrossReference_7_3_1_0 = (CrossReference)cInitScenariosAssignment_7_3_1.eContents().get(0);
		private final RuleCall cInitScenariosXMOFScenarioIDTerminalRuleCall_7_3_1_0_1 = (RuleCall)cInitScenariosXMOFScenarioCrossReference_7_3_1_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_7_4 = (Keyword)cGroup_7.eContents().get(4);
		private final Keyword cSemicolonKeyword_7_5 = (Keyword)cGroup_7.eContents().get(5);
		private final Assignment cAssertionsAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cAssertionsXMOFAssertionParserRuleCall_8_0 = (RuleCall)cAssertionsAssignment_8.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//XMOFTestCase:
		//	"test" name=ID "activity" activityUnderTest=[IntermediateActivities::Activity|QualifiedName] ("("
		//	inputs+=XMOFActivityInput ("," inputs+=XMOFActivityInput)* ")")? ("on" contextObject=[XMOFObjectSpecification])? "{"
		//	("initialize" "[" initScenarios+=[XMOFScenario] ("," initScenarios+=[XMOFScenario])* "]" ";")?
		//	assertions+=XMOFAssertion* "}";
		public ParserRule getRule() { return rule; }

		//"test" name=ID "activity" activityUnderTest=[IntermediateActivities::Activity|QualifiedName] ("("
		//inputs+=XMOFActivityInput ("," inputs+=XMOFActivityInput)* ")")? ("on" contextObject=[XMOFObjectSpecification])? "{"
		//("initialize" "[" initScenarios+=[XMOFScenario] ("," initScenarios+=[XMOFScenario])* "]" ";")?
		//assertions+=XMOFAssertion* "}"
		public Group getGroup() { return cGroup; }

		//"test"
		public Keyword getTestKeyword_0() { return cTestKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"activity"
		public Keyword getActivityKeyword_2() { return cActivityKeyword_2; }

		//activityUnderTest=[IntermediateActivities::Activity|QualifiedName]
		public Assignment getActivityUnderTestAssignment_3() { return cActivityUnderTestAssignment_3; }

		//[IntermediateActivities::Activity|QualifiedName]
		public CrossReference getActivityUnderTestActivityCrossReference_3_0() { return cActivityUnderTestActivityCrossReference_3_0; }

		//QualifiedName
		public RuleCall getActivityUnderTestActivityQualifiedNameParserRuleCall_3_0_1() { return cActivityUnderTestActivityQualifiedNameParserRuleCall_3_0_1; }

		//("(" inputs+=XMOFActivityInput ("," inputs+=XMOFActivityInput)* ")")?
		public Group getGroup_4() { return cGroup_4; }

		//"("
		public Keyword getLeftParenthesisKeyword_4_0() { return cLeftParenthesisKeyword_4_0; }

		//inputs+=XMOFActivityInput
		public Assignment getInputsAssignment_4_1() { return cInputsAssignment_4_1; }

		//XMOFActivityInput
		public RuleCall getInputsXMOFActivityInputParserRuleCall_4_1_0() { return cInputsXMOFActivityInputParserRuleCall_4_1_0; }

		//("," inputs+=XMOFActivityInput)*
		public Group getGroup_4_2() { return cGroup_4_2; }

		//","
		public Keyword getCommaKeyword_4_2_0() { return cCommaKeyword_4_2_0; }

		//inputs+=XMOFActivityInput
		public Assignment getInputsAssignment_4_2_1() { return cInputsAssignment_4_2_1; }

		//XMOFActivityInput
		public RuleCall getInputsXMOFActivityInputParserRuleCall_4_2_1_0() { return cInputsXMOFActivityInputParserRuleCall_4_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4_3() { return cRightParenthesisKeyword_4_3; }

		//("on" contextObject=[XMOFObjectSpecification])?
		public Group getGroup_5() { return cGroup_5; }

		//"on"
		public Keyword getOnKeyword_5_0() { return cOnKeyword_5_0; }

		//contextObject=[XMOFObjectSpecification]
		public Assignment getContextObjectAssignment_5_1() { return cContextObjectAssignment_5_1; }

		//[XMOFObjectSpecification]
		public CrossReference getContextObjectXMOFObjectSpecificationCrossReference_5_1_0() { return cContextObjectXMOFObjectSpecificationCrossReference_5_1_0; }

		//ID
		public RuleCall getContextObjectXMOFObjectSpecificationIDTerminalRuleCall_5_1_0_1() { return cContextObjectXMOFObjectSpecificationIDTerminalRuleCall_5_1_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_6() { return cLeftCurlyBracketKeyword_6; }

		//("initialize" "[" initScenarios+=[XMOFScenario] ("," initScenarios+=[XMOFScenario])* "]" ";")?
		public Group getGroup_7() { return cGroup_7; }

		//"initialize"
		public Keyword getInitializeKeyword_7_0() { return cInitializeKeyword_7_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_7_1() { return cLeftSquareBracketKeyword_7_1; }

		//initScenarios+=[XMOFScenario]
		public Assignment getInitScenariosAssignment_7_2() { return cInitScenariosAssignment_7_2; }

		//[XMOFScenario]
		public CrossReference getInitScenariosXMOFScenarioCrossReference_7_2_0() { return cInitScenariosXMOFScenarioCrossReference_7_2_0; }

		//ID
		public RuleCall getInitScenariosXMOFScenarioIDTerminalRuleCall_7_2_0_1() { return cInitScenariosXMOFScenarioIDTerminalRuleCall_7_2_0_1; }

		//("," initScenarios+=[XMOFScenario])*
		public Group getGroup_7_3() { return cGroup_7_3; }

		//","
		public Keyword getCommaKeyword_7_3_0() { return cCommaKeyword_7_3_0; }

		//initScenarios+=[XMOFScenario]
		public Assignment getInitScenariosAssignment_7_3_1() { return cInitScenariosAssignment_7_3_1; }

		//[XMOFScenario]
		public CrossReference getInitScenariosXMOFScenarioCrossReference_7_3_1_0() { return cInitScenariosXMOFScenarioCrossReference_7_3_1_0; }

		//ID
		public RuleCall getInitScenariosXMOFScenarioIDTerminalRuleCall_7_3_1_0_1() { return cInitScenariosXMOFScenarioIDTerminalRuleCall_7_3_1_0_1; }

		//"]"
		public Keyword getRightSquareBracketKeyword_7_4() { return cRightSquareBracketKeyword_7_4; }

		//";"
		public Keyword getSemicolonKeyword_7_5() { return cSemicolonKeyword_7_5; }

		//assertions+=XMOFAssertion*
		public Assignment getAssertionsAssignment_8() { return cAssertionsAssignment_8; }

		//XMOFAssertion
		public RuleCall getAssertionsXMOFAssertionParserRuleCall_8_0() { return cAssertionsXMOFAssertionParserRuleCall_8_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}

	public class XMOFActivityInputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XMOFActivityInput");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParameterAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cParameterActivityParameterNodeCrossReference_0_0 = (CrossReference)cParameterAssignment_0.eContents().get(0);
		private final RuleCall cParameterActivityParameterNodeQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cParameterActivityParameterNodeCrossReference_0_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueXMOFValueParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//XMOFActivityInput:
		//	parameter=[IntermediateActivities::ActivityParameterNode|QualifiedName] "=" value=XMOFValue;
		public ParserRule getRule() { return rule; }

		//parameter=[IntermediateActivities::ActivityParameterNode|QualifiedName] "=" value=XMOFValue
		public Group getGroup() { return cGroup; }

		//parameter=[IntermediateActivities::ActivityParameterNode|QualifiedName]
		public Assignment getParameterAssignment_0() { return cParameterAssignment_0; }

		//[IntermediateActivities::ActivityParameterNode|QualifiedName]
		public CrossReference getParameterActivityParameterNodeCrossReference_0_0() { return cParameterActivityParameterNodeCrossReference_0_0; }

		//QualifiedName
		public RuleCall getParameterActivityParameterNodeQualifiedNameParserRuleCall_0_0_1() { return cParameterActivityParameterNodeQualifiedNameParserRuleCall_0_0_1; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//value=XMOFValue
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//XMOFValue
		public RuleCall getValueXMOFValueParserRuleCall_2_0() { return cValueXMOFValueParserRuleCall_2_0; }
	}

	public class XMOFValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XMOFValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cXMOFSimpleValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cXMOFObjectValueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//XMOFValue:
		//	XMOFSimpleValue | XMOFObjectValue;
		public ParserRule getRule() { return rule; }

		//XMOFSimpleValue | XMOFObjectValue
		public Alternatives getAlternatives() { return cAlternatives; }

		//XMOFSimpleValue
		public RuleCall getXMOFSimpleValueParserRuleCall_0() { return cXMOFSimpleValueParserRuleCall_0; }

		//XMOFObjectValue
		public RuleCall getXMOFObjectValueParserRuleCall_1() { return cXMOFObjectValueParserRuleCall_1; }
	}

	public class XMOFSimpleValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XMOFSimpleValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueXLiteralParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//XMOFSimpleValue:
		//	value=XLiteral;
		public ParserRule getRule() { return rule; }

		//value=XLiteral
		public Assignment getValueAssignment() { return cValueAssignment; }

		//XLiteral
		public RuleCall getValueXLiteralParserRuleCall_0() { return cValueXLiteralParserRuleCall_0; }
	}

	public class XMOFObjectValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XMOFObjectValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cValueXMOFObjectSpecificationCrossReference_0 = (CrossReference)cValueAssignment.eContents().get(0);
		private final RuleCall cValueXMOFObjectSpecificationIDTerminalRuleCall_0_1 = (RuleCall)cValueXMOFObjectSpecificationCrossReference_0.eContents().get(1);
		
		//XMOFObjectValue:
		//	value=[XMOFObjectSpecification];
		public ParserRule getRule() { return rule; }

		//value=[XMOFObjectSpecification]
		public Assignment getValueAssignment() { return cValueAssignment; }

		//[XMOFObjectSpecification]
		public CrossReference getValueXMOFObjectSpecificationCrossReference_0() { return cValueXMOFObjectSpecificationCrossReference_0; }

		//ID
		public RuleCall getValueXMOFObjectSpecificationIDTerminalRuleCall_0_1() { return cValueXMOFObjectSpecificationIDTerminalRuleCall_0_1; }
	}

	public class XMOFScenarioElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XMOFScenario");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cScenarioKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cObjectsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cObjectsXMOFObjectSpecificationParserRuleCall_3_0 = (RuleCall)cObjectsAssignment_3.eContents().get(0);
		private final Assignment cLinksAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cLinksXMOFLinkParserRuleCall_4_0 = (RuleCall)cLinksAssignment_4.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//XMOFScenario:
		//	"scenario" name=ID "[" objects+=XMOFObjectSpecification* links+=XMOFLink* "]";
		public ParserRule getRule() { return rule; }

		//"scenario" name=ID "[" objects+=XMOFObjectSpecification* links+=XMOFLink* "]"
		public Group getGroup() { return cGroup; }

		//"scenario"
		public Keyword getScenarioKeyword_0() { return cScenarioKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }

		//objects+=XMOFObjectSpecification*
		public Assignment getObjectsAssignment_3() { return cObjectsAssignment_3; }

		//XMOFObjectSpecification
		public RuleCall getObjectsXMOFObjectSpecificationParserRuleCall_3_0() { return cObjectsXMOFObjectSpecificationParserRuleCall_3_0; }

		//links+=XMOFLink*
		public Assignment getLinksAssignment_4() { return cLinksAssignment_4; }

		//XMOFLink
		public RuleCall getLinksXMOFLinkParserRuleCall_4_0() { return cLinksXMOFLinkParserRuleCall_4_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_5() { return cRightSquareBracketKeyword_5; }
	}

	public class XMOFObjectSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XMOFObjectSpecification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cObjectKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cTypeEClassCrossReference_3_0 = (CrossReference)cTypeAssignment_3.eContents().get(0);
		private final RuleCall cTypeEClassQualifiedNameParserRuleCall_3_0_1 = (RuleCall)cTypeEClassCrossReference_3_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cAttributesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cAttributesXMOFAttributeParserRuleCall_5_0 = (RuleCall)cAttributesAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//XMOFObjectSpecification:
		//	"object" name=ID ":" type=[ecore::EClass|QualifiedName] "{" attributes+=XMOFAttribute* "}";
		public ParserRule getRule() { return rule; }

		//"object" name=ID ":" type=[ecore::EClass|QualifiedName] "{" attributes+=XMOFAttribute* "}"
		public Group getGroup() { return cGroup; }

		//"object"
		public Keyword getObjectKeyword_0() { return cObjectKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//type=[ecore::EClass|QualifiedName]
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//[ecore::EClass|QualifiedName]
		public CrossReference getTypeEClassCrossReference_3_0() { return cTypeEClassCrossReference_3_0; }

		//QualifiedName
		public RuleCall getTypeEClassQualifiedNameParserRuleCall_3_0_1() { return cTypeEClassQualifiedNameParserRuleCall_3_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//attributes+=XMOFAttribute*
		public Assignment getAttributesAssignment_5() { return cAttributesAssignment_5; }

		//XMOFAttribute
		public RuleCall getAttributesXMOFAttributeParserRuleCall_5_0() { return cAttributesXMOFAttributeParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class XMOFAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XMOFAttribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAttAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cAttEAttributeCrossReference_0_0 = (CrossReference)cAttAssignment_0.eContents().get(0);
		private final RuleCall cAttEAttributeQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cAttEAttributeCrossReference_0_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueXMOFValueParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//XMOFAttribute:
		//	att=[ecore::EAttribute|QualifiedName] "=" value=XMOFValue ";";
		public ParserRule getRule() { return rule; }

		//att=[ecore::EAttribute|QualifiedName] "=" value=XMOFValue ";"
		public Group getGroup() { return cGroup; }

		//att=[ecore::EAttribute|QualifiedName]
		public Assignment getAttAssignment_0() { return cAttAssignment_0; }

		//[ecore::EAttribute|QualifiedName]
		public CrossReference getAttEAttributeCrossReference_0_0() { return cAttEAttributeCrossReference_0_0; }

		//QualifiedName
		public RuleCall getAttEAttributeQualifiedNameParserRuleCall_0_0_1() { return cAttEAttributeQualifiedNameParserRuleCall_0_0_1; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//value=XMOFValue
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//XMOFValue
		public RuleCall getValueXMOFValueParserRuleCall_2_0() { return cValueXMOFValueParserRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class XMOFLinkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XMOFLink");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLinkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAssocAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cAssocEReferenceCrossReference_1_0 = (CrossReference)cAssocAssignment_1.eContents().get(0);
		private final RuleCall cAssocEReferenceQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cAssocEReferenceCrossReference_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cSourceKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cSourcePropertyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cSourcePropertyEAttributeCrossReference_4_0 = (CrossReference)cSourcePropertyAssignment_4.eContents().get(0);
		private final RuleCall cSourcePropertyEAttributeQualifiedNameParserRuleCall_4_0_1 = (RuleCall)cSourcePropertyEAttributeCrossReference_4_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cSourceValueAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cSourceValueXMOFObjectSpecificationCrossReference_6_0 = (CrossReference)cSourceValueAssignment_6.eContents().get(0);
		private final RuleCall cSourceValueXMOFObjectSpecificationIDTerminalRuleCall_6_0_1 = (RuleCall)cSourceValueXMOFObjectSpecificationCrossReference_6_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cTargetKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cTargetPropertyAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final CrossReference cTargetPropertyEAttributeCrossReference_9_0 = (CrossReference)cTargetPropertyAssignment_9.eContents().get(0);
		private final RuleCall cTargetPropertyEAttributeQualifiedNameParserRuleCall_9_0_1 = (RuleCall)cTargetPropertyEAttributeCrossReference_9_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cTargetValueAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final CrossReference cTargetValueXMOFObjectSpecificationCrossReference_11_0 = (CrossReference)cTargetValueAssignment_11.eContents().get(0);
		private final RuleCall cTargetValueXMOFObjectSpecificationIDTerminalRuleCall_11_0_1 = (RuleCall)cTargetValueXMOFObjectSpecificationCrossReference_11_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_12 = (Keyword)cGroup.eContents().get(12);
		private final Keyword cRightCurlyBracketKeyword_13 = (Keyword)cGroup.eContents().get(13);
		
		//XMOFLink:
		//	"link" assoc=[ecore::EReference|QualifiedName] "{" "source" sourceProperty=[ecore::EAttribute|QualifiedName] "="
		//	sourceValue=[XMOFObjectSpecification] ";" "target" targetProperty=[ecore::EAttribute|QualifiedName] "="
		//	targetValue=[XMOFObjectSpecification] ";" "}";
		public ParserRule getRule() { return rule; }

		//"link" assoc=[ecore::EReference|QualifiedName] "{" "source" sourceProperty=[ecore::EAttribute|QualifiedName] "="
		//sourceValue=[XMOFObjectSpecification] ";" "target" targetProperty=[ecore::EAttribute|QualifiedName] "="
		//targetValue=[XMOFObjectSpecification] ";" "}"
		public Group getGroup() { return cGroup; }

		//"link"
		public Keyword getLinkKeyword_0() { return cLinkKeyword_0; }

		//assoc=[ecore::EReference|QualifiedName]
		public Assignment getAssocAssignment_1() { return cAssocAssignment_1; }

		//[ecore::EReference|QualifiedName]
		public CrossReference getAssocEReferenceCrossReference_1_0() { return cAssocEReferenceCrossReference_1_0; }

		//QualifiedName
		public RuleCall getAssocEReferenceQualifiedNameParserRuleCall_1_0_1() { return cAssocEReferenceQualifiedNameParserRuleCall_1_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"source"
		public Keyword getSourceKeyword_3() { return cSourceKeyword_3; }

		//sourceProperty=[ecore::EAttribute|QualifiedName]
		public Assignment getSourcePropertyAssignment_4() { return cSourcePropertyAssignment_4; }

		//[ecore::EAttribute|QualifiedName]
		public CrossReference getSourcePropertyEAttributeCrossReference_4_0() { return cSourcePropertyEAttributeCrossReference_4_0; }

		//QualifiedName
		public RuleCall getSourcePropertyEAttributeQualifiedNameParserRuleCall_4_0_1() { return cSourcePropertyEAttributeQualifiedNameParserRuleCall_4_0_1; }

		//"="
		public Keyword getEqualsSignKeyword_5() { return cEqualsSignKeyword_5; }

		//sourceValue=[XMOFObjectSpecification]
		public Assignment getSourceValueAssignment_6() { return cSourceValueAssignment_6; }

		//[XMOFObjectSpecification]
		public CrossReference getSourceValueXMOFObjectSpecificationCrossReference_6_0() { return cSourceValueXMOFObjectSpecificationCrossReference_6_0; }

		//ID
		public RuleCall getSourceValueXMOFObjectSpecificationIDTerminalRuleCall_6_0_1() { return cSourceValueXMOFObjectSpecificationIDTerminalRuleCall_6_0_1; }

		//";"
		public Keyword getSemicolonKeyword_7() { return cSemicolonKeyword_7; }

		//"target"
		public Keyword getTargetKeyword_8() { return cTargetKeyword_8; }

		//targetProperty=[ecore::EAttribute|QualifiedName]
		public Assignment getTargetPropertyAssignment_9() { return cTargetPropertyAssignment_9; }

		//[ecore::EAttribute|QualifiedName]
		public CrossReference getTargetPropertyEAttributeCrossReference_9_0() { return cTargetPropertyEAttributeCrossReference_9_0; }

		//QualifiedName
		public RuleCall getTargetPropertyEAttributeQualifiedNameParserRuleCall_9_0_1() { return cTargetPropertyEAttributeQualifiedNameParserRuleCall_9_0_1; }

		//"="
		public Keyword getEqualsSignKeyword_10() { return cEqualsSignKeyword_10; }

		//targetValue=[XMOFObjectSpecification]
		public Assignment getTargetValueAssignment_11() { return cTargetValueAssignment_11; }

		//[XMOFObjectSpecification]
		public CrossReference getTargetValueXMOFObjectSpecificationCrossReference_11_0() { return cTargetValueXMOFObjectSpecificationCrossReference_11_0; }

		//ID
		public RuleCall getTargetValueXMOFObjectSpecificationIDTerminalRuleCall_11_0_1() { return cTargetValueXMOFObjectSpecificationIDTerminalRuleCall_11_0_1; }

		//";"
		public Keyword getSemicolonKeyword_12() { return cSemicolonKeyword_12; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_13() { return cRightCurlyBracketKeyword_13; }
	}

	public class XMOFAssertionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XMOFAssertion");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cXMOFOrderAssertionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cXMOFStateAssertionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cXMOFFinallyStateAssertionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//XMOFAssertion:
		//	XMOFOrderAssertion | XMOFStateAssertion | XMOFFinallyStateAssertion;
		public ParserRule getRule() { return rule; }

		//XMOFOrderAssertion | XMOFStateAssertion | XMOFFinallyStateAssertion
		public Alternatives getAlternatives() { return cAlternatives; }

		//XMOFOrderAssertion
		public RuleCall getXMOFOrderAssertionParserRuleCall_0() { return cXMOFOrderAssertionParserRuleCall_0; }

		//XMOFStateAssertion
		public RuleCall getXMOFStateAssertionParserRuleCall_1() { return cXMOFStateAssertionParserRuleCall_1; }

		//XMOFFinallyStateAssertion
		public RuleCall getXMOFFinallyStateAssertionParserRuleCall_2() { return cXMOFFinallyStateAssertionParserRuleCall_2; }
	}

	public class XMOFStateAssertionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XMOFStateAssertion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAssertStateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cQuantifierAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cQuantifierXMOFTemporalQuantifierEnumRuleCall_1_0 = (RuleCall)cQuantifierAssignment_1.eContents().get(0);
		private final Assignment cOperatorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOperatorXMOFTemporalOperatorEnumRuleCall_2_0 = (RuleCall)cOperatorAssignment_2.eContents().get(0);
		private final Assignment cReferencePointAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cReferencePointXMOFReferencePointParserRuleCall_3_0 = (RuleCall)cReferencePointAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cUntilKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cUntilPointAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cUntilPointXMOFReferencePointParserRuleCall_4_1_0 = (RuleCall)cUntilPointAssignment_4_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cChecksAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cChecksXMOFCheckParserRuleCall_6_0 = (RuleCall)cChecksAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//XMOFStateAssertion:
		//	"assertState" quantifier=XMOFTemporalQuantifier operator=XMOFTemporalOperator referencePoint=XMOFReferencePoint
		//	("until" untilPoint=XMOFReferencePoint)? "{" checks+=XMOFCheck* "}";
		public ParserRule getRule() { return rule; }

		//"assertState" quantifier=XMOFTemporalQuantifier operator=XMOFTemporalOperator referencePoint=XMOFReferencePoint ("until"
		//untilPoint=XMOFReferencePoint)? "{" checks+=XMOFCheck* "}"
		public Group getGroup() { return cGroup; }

		//"assertState"
		public Keyword getAssertStateKeyword_0() { return cAssertStateKeyword_0; }

		//quantifier=XMOFTemporalQuantifier
		public Assignment getQuantifierAssignment_1() { return cQuantifierAssignment_1; }

		//XMOFTemporalQuantifier
		public RuleCall getQuantifierXMOFTemporalQuantifierEnumRuleCall_1_0() { return cQuantifierXMOFTemporalQuantifierEnumRuleCall_1_0; }

		//operator=XMOFTemporalOperator
		public Assignment getOperatorAssignment_2() { return cOperatorAssignment_2; }

		//XMOFTemporalOperator
		public RuleCall getOperatorXMOFTemporalOperatorEnumRuleCall_2_0() { return cOperatorXMOFTemporalOperatorEnumRuleCall_2_0; }

		//referencePoint=XMOFReferencePoint
		public Assignment getReferencePointAssignment_3() { return cReferencePointAssignment_3; }

		//XMOFReferencePoint
		public RuleCall getReferencePointXMOFReferencePointParserRuleCall_3_0() { return cReferencePointXMOFReferencePointParserRuleCall_3_0; }

		//("until" untilPoint=XMOFReferencePoint)?
		public Group getGroup_4() { return cGroup_4; }

		//"until"
		public Keyword getUntilKeyword_4_0() { return cUntilKeyword_4_0; }

		//untilPoint=XMOFReferencePoint
		public Assignment getUntilPointAssignment_4_1() { return cUntilPointAssignment_4_1; }

		//XMOFReferencePoint
		public RuleCall getUntilPointXMOFReferencePointParserRuleCall_4_1_0() { return cUntilPointXMOFReferencePointParserRuleCall_4_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }

		//checks+=XMOFCheck*
		public Assignment getChecksAssignment_6() { return cChecksAssignment_6; }

		//XMOFCheck
		public RuleCall getChecksXMOFCheckParserRuleCall_6_0() { return cChecksXMOFCheckParserRuleCall_6_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class XMOFReferencePointElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XMOFReferencePoint");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cXMOFActionReferencePointParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cXMOFConstraintReferencePointParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//XMOFReferencePoint:
		//	XMOFActionReferencePoint | XMOFConstraintReferencePoint;
		public ParserRule getRule() { return rule; }

		//XMOFActionReferencePoint | XMOFConstraintReferencePoint
		public Alternatives getAlternatives() { return cAlternatives; }

		//XMOFActionReferencePoint
		public RuleCall getXMOFActionReferencePointParserRuleCall_0() { return cXMOFActionReferencePointParserRuleCall_0; }

		//XMOFConstraintReferencePoint
		public RuleCall getXMOFConstraintReferencePointParserRuleCall_1() { return cXMOFConstraintReferencePointParserRuleCall_1; }
	}

	public class XMOFActionReferencePointElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XMOFActionReferencePoint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cActionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cActionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cActionActionCrossReference_1_0 = (CrossReference)cActionAssignment_1.eContents().get(0);
		private final RuleCall cActionActionQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cActionActionCrossReference_1_0.eContents().get(1);
		
		//XMOFActionReferencePoint:
		//	"action" action=[BasicActions::Action|QualifiedName];
		public ParserRule getRule() { return rule; }

		//"action" action=[BasicActions::Action|QualifiedName]
		public Group getGroup() { return cGroup; }

		//"action"
		public Keyword getActionKeyword_0() { return cActionKeyword_0; }

		//action=[BasicActions::Action|QualifiedName]
		public Assignment getActionAssignment_1() { return cActionAssignment_1; }

		//[BasicActions::Action|QualifiedName]
		public CrossReference getActionActionCrossReference_1_0() { return cActionActionCrossReference_1_0; }

		//QualifiedName
		public RuleCall getActionActionQualifiedNameParserRuleCall_1_0_1() { return cActionActionQualifiedNameParserRuleCall_1_0_1; }
	}

	public class XMOFConstraintReferencePointElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XMOFConstraintReferencePoint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConstraintKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConstraintNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConstraintNameXStringLiteralParserRuleCall_1_0 = (RuleCall)cConstraintNameAssignment_1.eContents().get(0);
		
		//XMOFConstraintReferencePoint:
		//	"constraint" constraintName=XStringLiteral;
		public ParserRule getRule() { return rule; }

		//"constraint" constraintName=XStringLiteral
		public Group getGroup() { return cGroup; }

		//"constraint"
		public Keyword getConstraintKeyword_0() { return cConstraintKeyword_0; }

		//constraintName=XStringLiteral
		public Assignment getConstraintNameAssignment_1() { return cConstraintNameAssignment_1; }

		//XStringLiteral
		public RuleCall getConstraintNameXStringLiteralParserRuleCall_1_0() { return cConstraintNameXStringLiteralParserRuleCall_1_0; }
	}

	public class XMOFFinallyStateAssertionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XMOFFinallyStateAssertion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFinallyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Action cFinallyStateAssertionAction_2 = (Action)cGroup.eContents().get(2);
		private final Assignment cChecksAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cChecksXMOFCheckParserRuleCall_3_0 = (RuleCall)cChecksAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//XMOFFinallyStateAssertion:
		//	"finally" "{" {FinallyStateAssertion} checks+=XMOFCheck* "}";
		public ParserRule getRule() { return rule; }

		//"finally" "{" {FinallyStateAssertion} checks+=XMOFCheck* "}"
		public Group getGroup() { return cGroup; }

		//"finally"
		public Keyword getFinallyKeyword_0() { return cFinallyKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//{FinallyStateAssertion}
		public Action getFinallyStateAssertionAction_2() { return cFinallyStateAssertionAction_2; }

		//checks+=XMOFCheck*
		public Assignment getChecksAssignment_3() { return cChecksAssignment_3; }

		//XMOFCheck
		public RuleCall getChecksXMOFCheckParserRuleCall_3_0() { return cChecksXMOFCheckParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class XMOFCheckElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XMOFCheck");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cXMOFConstraintCheckParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cXMOFStateExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//XMOFCheck:
		//	XMOFConstraintCheck | XMOFStateExpression;
		public ParserRule getRule() { return rule; }

		//XMOFConstraintCheck | XMOFStateExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//XMOFConstraintCheck
		public RuleCall getXMOFConstraintCheckParserRuleCall_0() { return cXMOFConstraintCheckParserRuleCall_0; }

		//XMOFStateExpression
		public RuleCall getXMOFStateExpressionParserRuleCall_1() { return cXMOFStateExpressionParserRuleCall_1; }
	}

	public class XMOFConstraintCheckElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XMOFConstraintCheck");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCheckKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConstraintNamesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConstraintNamesXStringLiteralParserRuleCall_1_0 = (RuleCall)cConstraintNamesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cConstraintNamesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cConstraintNamesXStringLiteralParserRuleCall_2_1_0 = (RuleCall)cConstraintNamesAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cOnKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cObjectAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cObjectObjectNodeCrossReference_3_1_0 = (CrossReference)cObjectAssignment_3_1.eContents().get(0);
		private final RuleCall cObjectObjectNodeQualifiedNameParserRuleCall_3_1_0_1 = (RuleCall)cObjectObjectNodeCrossReference_3_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//XMOFConstraintCheck:
		//	"check" constraintNames+=XStringLiteral ("," constraintNames+=XStringLiteral)* ("on"
		//	object=[IntermediateActivities::ObjectNode|QualifiedName])? ";";
		public ParserRule getRule() { return rule; }

		//"check" constraintNames+=XStringLiteral ("," constraintNames+=XStringLiteral)* ("on"
		//object=[IntermediateActivities::ObjectNode|QualifiedName])? ";"
		public Group getGroup() { return cGroup; }

		//"check"
		public Keyword getCheckKeyword_0() { return cCheckKeyword_0; }

		//constraintNames+=XStringLiteral
		public Assignment getConstraintNamesAssignment_1() { return cConstraintNamesAssignment_1; }

		//XStringLiteral
		public RuleCall getConstraintNamesXStringLiteralParserRuleCall_1_0() { return cConstraintNamesXStringLiteralParserRuleCall_1_0; }

		//("," constraintNames+=XStringLiteral)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//constraintNames+=XStringLiteral
		public Assignment getConstraintNamesAssignment_2_1() { return cConstraintNamesAssignment_2_1; }

		//XStringLiteral
		public RuleCall getConstraintNamesXStringLiteralParserRuleCall_2_1_0() { return cConstraintNamesXStringLiteralParserRuleCall_2_1_0; }

		//("on" object=[IntermediateActivities::ObjectNode|QualifiedName])?
		public Group getGroup_3() { return cGroup_3; }

		//"on"
		public Keyword getOnKeyword_3_0() { return cOnKeyword_3_0; }

		//object=[IntermediateActivities::ObjectNode|QualifiedName]
		public Assignment getObjectAssignment_3_1() { return cObjectAssignment_3_1; }

		//[IntermediateActivities::ObjectNode|QualifiedName]
		public CrossReference getObjectObjectNodeCrossReference_3_1_0() { return cObjectObjectNodeCrossReference_3_1_0; }

		//QualifiedName
		public RuleCall getObjectObjectNodeQualifiedNameParserRuleCall_3_1_0_1() { return cObjectObjectNodeQualifiedNameParserRuleCall_3_1_0_1; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class XMOFStateExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XMOFStateExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cXMOFObjectStateExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cXMOFPropertyStateExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//XMOFStateExpression:
		//	XMOFObjectStateExpression | XMOFPropertyStateExpression;
		public ParserRule getRule() { return rule; }

		//XMOFObjectStateExpression | XMOFPropertyStateExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//XMOFObjectStateExpression
		public RuleCall getXMOFObjectStateExpressionParserRuleCall_0() { return cXMOFObjectStateExpressionParserRuleCall_0; }

		//XMOFPropertyStateExpression
		public RuleCall getXMOFPropertyStateExpressionParserRuleCall_1() { return cXMOFPropertyStateExpressionParserRuleCall_1; }
	}

	public class XMOFObjectStateExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XMOFObjectStateExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPinAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cPinObjectNodeCrossReference_0_0 = (CrossReference)cPinAssignment_0.eContents().get(0);
		private final RuleCall cPinObjectNodeQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cPinObjectNodeCrossReference_0_0.eContents().get(1);
		private final Assignment cOperatorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperatorXMOFArithmeticOperatorEnumRuleCall_1_0 = (RuleCall)cOperatorAssignment_1.eContents().get(0);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueXMOFValueParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//XMOFObjectStateExpression:
		//	pin=[IntermediateActivities::ObjectNode|QualifiedName] operator=XMOFArithmeticOperator value=XMOFValue ";";
		public ParserRule getRule() { return rule; }

		//pin=[IntermediateActivities::ObjectNode|QualifiedName] operator=XMOFArithmeticOperator value=XMOFValue ";"
		public Group getGroup() { return cGroup; }

		//pin=[IntermediateActivities::ObjectNode|QualifiedName]
		public Assignment getPinAssignment_0() { return cPinAssignment_0; }

		//[IntermediateActivities::ObjectNode|QualifiedName]
		public CrossReference getPinObjectNodeCrossReference_0_0() { return cPinObjectNodeCrossReference_0_0; }

		//QualifiedName
		public RuleCall getPinObjectNodeQualifiedNameParserRuleCall_0_0_1() { return cPinObjectNodeQualifiedNameParserRuleCall_0_0_1; }

		//operator=XMOFArithmeticOperator
		public Assignment getOperatorAssignment_1() { return cOperatorAssignment_1; }

		//XMOFArithmeticOperator
		public RuleCall getOperatorXMOFArithmeticOperatorEnumRuleCall_1_0() { return cOperatorXMOFArithmeticOperatorEnumRuleCall_1_0; }

		//value=XMOFValue
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//XMOFValue
		public RuleCall getValueXMOFValueParserRuleCall_2_0() { return cValueXMOFValueParserRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class XMOFPropertyStateExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XMOFPropertyStateExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPinAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cPinObjectNodeCrossReference_0_0 = (CrossReference)cPinAssignment_0.eContents().get(0);
		private final RuleCall cPinObjectNodeQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cPinObjectNodeCrossReference_0_0.eContents().get(1);
		private final Keyword cColonColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPropertyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cPropertyEAttributeCrossReference_2_0 = (CrossReference)cPropertyAssignment_2.eContents().get(0);
		private final RuleCall cPropertyEAttributeQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cPropertyEAttributeCrossReference_2_0.eContents().get(1);
		private final Assignment cOperatorAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOperatorXMOFArithmeticOperatorEnumRuleCall_3_0 = (RuleCall)cOperatorAssignment_3.eContents().get(0);
		private final Assignment cValueAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cValueXMOFValueParserRuleCall_4_0 = (RuleCall)cValueAssignment_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//XMOFPropertyStateExpression:
		//	pin=[IntermediateActivities::ObjectNode|QualifiedName] "::" property=[ecore::EAttribute|QualifiedName]
		//	operator=XMOFArithmeticOperator value=XMOFValue ";";
		public ParserRule getRule() { return rule; }

		//pin=[IntermediateActivities::ObjectNode|QualifiedName] "::" property=[ecore::EAttribute|QualifiedName]
		//operator=XMOFArithmeticOperator value=XMOFValue ";"
		public Group getGroup() { return cGroup; }

		//pin=[IntermediateActivities::ObjectNode|QualifiedName]
		public Assignment getPinAssignment_0() { return cPinAssignment_0; }

		//[IntermediateActivities::ObjectNode|QualifiedName]
		public CrossReference getPinObjectNodeCrossReference_0_0() { return cPinObjectNodeCrossReference_0_0; }

		//QualifiedName
		public RuleCall getPinObjectNodeQualifiedNameParserRuleCall_0_0_1() { return cPinObjectNodeQualifiedNameParserRuleCall_0_0_1; }

		//"::"
		public Keyword getColonColonKeyword_1() { return cColonColonKeyword_1; }

		//property=[ecore::EAttribute|QualifiedName]
		public Assignment getPropertyAssignment_2() { return cPropertyAssignment_2; }

		//[ecore::EAttribute|QualifiedName]
		public CrossReference getPropertyEAttributeCrossReference_2_0() { return cPropertyEAttributeCrossReference_2_0; }

		//QualifiedName
		public RuleCall getPropertyEAttributeQualifiedNameParserRuleCall_2_0_1() { return cPropertyEAttributeQualifiedNameParserRuleCall_2_0_1; }

		//operator=XMOFArithmeticOperator
		public Assignment getOperatorAssignment_3() { return cOperatorAssignment_3; }

		//XMOFArithmeticOperator
		public RuleCall getOperatorXMOFArithmeticOperatorEnumRuleCall_3_0() { return cOperatorXMOFArithmeticOperatorEnumRuleCall_3_0; }

		//value=XMOFValue
		public Assignment getValueAssignment_4() { return cValueAssignment_4; }

		//XMOFValue
		public RuleCall getValueXMOFValueParserRuleCall_4_0() { return cValueXMOFValueParserRuleCall_4_0; }

		//";"
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}

	public class XMOFOrderAssertionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XMOFOrderAssertion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAssertOrderKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOrderAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOrderXMOFNodeOrderParserRuleCall_1_0 = (RuleCall)cOrderAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//XMOFOrderAssertion:
		//	"assertOrder" order=XMOFNodeOrder ";";
		public ParserRule getRule() { return rule; }

		//"assertOrder" order=XMOFNodeOrder ";"
		public Group getGroup() { return cGroup; }

		//"assertOrder"
		public Keyword getAssertOrderKeyword_0() { return cAssertOrderKeyword_0; }

		//order=XMOFNodeOrder
		public Assignment getOrderAssignment_1() { return cOrderAssignment_1; }

		//XMOFNodeOrder
		public RuleCall getOrderXMOFNodeOrderParserRuleCall_1_0() { return cOrderXMOFNodeOrderParserRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class XMOFNodeOrderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XMOFNodeOrder");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNodesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNodesXMOFNodeSpecificationParserRuleCall_0_0 = (RuleCall)cNodesAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNodesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNodesXMOFNodeSpecificationParserRuleCall_1_1_0 = (RuleCall)cNodesAssignment_1_1.eContents().get(0);
		
		//XMOFNodeOrder:
		//	nodes+=XMOFNodeSpecification ("," nodes+=XMOFNodeSpecification)*;
		public ParserRule getRule() { return rule; }

		//nodes+=XMOFNodeSpecification ("," nodes+=XMOFNodeSpecification)*
		public Group getGroup() { return cGroup; }

		//nodes+=XMOFNodeSpecification
		public Assignment getNodesAssignment_0() { return cNodesAssignment_0; }

		//XMOFNodeSpecification
		public RuleCall getNodesXMOFNodeSpecificationParserRuleCall_0_0() { return cNodesXMOFNodeSpecificationParserRuleCall_0_0; }

		//("," nodes+=XMOFNodeSpecification)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//nodes+=XMOFNodeSpecification
		public Assignment getNodesAssignment_1_1() { return cNodesAssignment_1_1; }

		//XMOFNodeSpecification
		public RuleCall getNodesXMOFNodeSpecificationParserRuleCall_1_1_0() { return cNodesXMOFNodeSpecificationParserRuleCall_1_1_0; }
	}

	public class XMOFNodeSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XMOFNodeSpecification");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cNodeAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final CrossReference cNodeActivityNodeCrossReference_0_0_0 = (CrossReference)cNodeAssignment_0_0.eContents().get(0);
		private final RuleCall cNodeActivityNodeQualifiedNameParserRuleCall_0_0_0_1 = (RuleCall)cNodeActivityNodeCrossReference_0_0_0.eContents().get(1);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cColonKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cSizeAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cSizeXNumberLiteralParserRuleCall_0_1_1_0 = (RuleCall)cSizeAssignment_0_1_1.eContents().get(0);
		private final Group cGroup_0_2 = (Group)cGroup_0.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_0_2_0 = (Keyword)cGroup_0_2.eContents().get(0);
		private final Assignment cSubOrderAssignment_0_2_1 = (Assignment)cGroup_0_2.eContents().get(1);
		private final RuleCall cSubOrderXMOFNodeOrderParserRuleCall_0_2_1_0 = (RuleCall)cSubOrderAssignment_0_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_2_2 = (Keyword)cGroup_0_2.eContents().get(2);
		private final Assignment cJokerAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cJokerAsteriskKeyword_1_0 = (Keyword)cJokerAssignment_1.eContents().get(0);
		private final Assignment cJokerAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Keyword cJoker_Keyword_2_0 = (Keyword)cJokerAssignment_2.eContents().get(0);
		
		//XMOFNodeSpecification:
		//	node=[IntermediateActivities::ActivityNode|QualifiedName] (":" size=XNumberLiteral)? ("(" subOrder=XMOFNodeOrder
		//	")")? | joker="*" | joker="_";
		public ParserRule getRule() { return rule; }

		//node=[IntermediateActivities::ActivityNode|QualifiedName] (":" size=XNumberLiteral)? ("(" subOrder=XMOFNodeOrder ")")? |
		//joker="*" | joker="_"
		public Alternatives getAlternatives() { return cAlternatives; }

		//node=[IntermediateActivities::ActivityNode|QualifiedName] (":" size=XNumberLiteral)? ("(" subOrder=XMOFNodeOrder ")")?
		public Group getGroup_0() { return cGroup_0; }

		//node=[IntermediateActivities::ActivityNode|QualifiedName]
		public Assignment getNodeAssignment_0_0() { return cNodeAssignment_0_0; }

		//[IntermediateActivities::ActivityNode|QualifiedName]
		public CrossReference getNodeActivityNodeCrossReference_0_0_0() { return cNodeActivityNodeCrossReference_0_0_0; }

		//QualifiedName
		public RuleCall getNodeActivityNodeQualifiedNameParserRuleCall_0_0_0_1() { return cNodeActivityNodeQualifiedNameParserRuleCall_0_0_0_1; }

		//(":" size=XNumberLiteral)?
		public Group getGroup_0_1() { return cGroup_0_1; }

		//":"
		public Keyword getColonKeyword_0_1_0() { return cColonKeyword_0_1_0; }

		//size=XNumberLiteral
		public Assignment getSizeAssignment_0_1_1() { return cSizeAssignment_0_1_1; }

		//XNumberLiteral
		public RuleCall getSizeXNumberLiteralParserRuleCall_0_1_1_0() { return cSizeXNumberLiteralParserRuleCall_0_1_1_0; }

		//("(" subOrder=XMOFNodeOrder ")")?
		public Group getGroup_0_2() { return cGroup_0_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_2_0() { return cLeftParenthesisKeyword_0_2_0; }

		//subOrder=XMOFNodeOrder
		public Assignment getSubOrderAssignment_0_2_1() { return cSubOrderAssignment_0_2_1; }

		//XMOFNodeOrder
		public RuleCall getSubOrderXMOFNodeOrderParserRuleCall_0_2_1_0() { return cSubOrderXMOFNodeOrderParserRuleCall_0_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_0_2_2() { return cRightParenthesisKeyword_0_2_2; }

		//joker="*"
		public Assignment getJokerAssignment_1() { return cJokerAssignment_1; }

		//"*"
		public Keyword getJokerAsteriskKeyword_1_0() { return cJokerAsteriskKeyword_1_0; }

		//joker="_"
		public Assignment getJokerAssignment_2() { return cJokerAssignment_2; }

		//"_"
		public Keyword getJoker_Keyword_2_0() { return cJoker_Keyword_2_0; }
	}
	
	
	public class XMOFArithmeticOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "XMOFArithmeticOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cEqualEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cEqualEqualsSignKeyword_0_0 = (Keyword)cEqualEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cNot_equalEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cNot_equalExclamationMarkEqualsSignKeyword_1_0 = (Keyword)cNot_equalEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cGreaterEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cGreaterGreaterThanSignKeyword_2_0 = (Keyword)cGreaterEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cSmallerEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cSmallerLessThanSignKeyword_3_0 = (Keyword)cSmallerEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cGreater_equalEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cGreater_equalGreaterThanSignEqualsSignKeyword_4_0 = (Keyword)cGreater_equalEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cSmaller_equalEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cSmaller_equalLessThanSignEqualsSignKeyword_5_0 = (Keyword)cSmaller_equalEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cIncludesEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cIncludesIncludesKeyword_6_0 = (Keyword)cIncludesEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cExcludesEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cExcludesExcludesKeyword_7_0 = (Keyword)cExcludesEnumLiteralDeclaration_7.eContents().get(0);
		
		//enum XMOFArithmeticOperator:
		//	equal="=" | not_equal="!=" | greater=">" | smaller="<" | greater_equal=">=" | smaller_equal="<=" | includes |
		//	excludes;
		public EnumRule getRule() { return rule; }

		//equal="=" | not_equal="!=" | greater=">" | smaller="<" | greater_equal=">=" | smaller_equal="<=" | includes | excludes
		public Alternatives getAlternatives() { return cAlternatives; }

		//equal="="
		public EnumLiteralDeclaration getEqualEnumLiteralDeclaration_0() { return cEqualEnumLiteralDeclaration_0; }

		//"="
		public Keyword getEqualEqualsSignKeyword_0_0() { return cEqualEqualsSignKeyword_0_0; }

		//not_equal="!="
		public EnumLiteralDeclaration getNot_equalEnumLiteralDeclaration_1() { return cNot_equalEnumLiteralDeclaration_1; }

		//"!="
		public Keyword getNot_equalExclamationMarkEqualsSignKeyword_1_0() { return cNot_equalExclamationMarkEqualsSignKeyword_1_0; }

		//greater=">"
		public EnumLiteralDeclaration getGreaterEnumLiteralDeclaration_2() { return cGreaterEnumLiteralDeclaration_2; }

		//">"
		public Keyword getGreaterGreaterThanSignKeyword_2_0() { return cGreaterGreaterThanSignKeyword_2_0; }

		//smaller="<"
		public EnumLiteralDeclaration getSmallerEnumLiteralDeclaration_3() { return cSmallerEnumLiteralDeclaration_3; }

		//"<"
		public Keyword getSmallerLessThanSignKeyword_3_0() { return cSmallerLessThanSignKeyword_3_0; }

		//greater_equal=">="
		public EnumLiteralDeclaration getGreater_equalEnumLiteralDeclaration_4() { return cGreater_equalEnumLiteralDeclaration_4; }

		//">="
		public Keyword getGreater_equalGreaterThanSignEqualsSignKeyword_4_0() { return cGreater_equalGreaterThanSignEqualsSignKeyword_4_0; }

		//smaller_equal="<="
		public EnumLiteralDeclaration getSmaller_equalEnumLiteralDeclaration_5() { return cSmaller_equalEnumLiteralDeclaration_5; }

		//"<="
		public Keyword getSmaller_equalLessThanSignEqualsSignKeyword_5_0() { return cSmaller_equalLessThanSignEqualsSignKeyword_5_0; }

		//includes
		public EnumLiteralDeclaration getIncludesEnumLiteralDeclaration_6() { return cIncludesEnumLiteralDeclaration_6; }

		//"includes"
		public Keyword getIncludesIncludesKeyword_6_0() { return cIncludesIncludesKeyword_6_0; }

		//excludes
		public EnumLiteralDeclaration getExcludesEnumLiteralDeclaration_7() { return cExcludesEnumLiteralDeclaration_7; }

		//"excludes"
		public Keyword getExcludesExcludesKeyword_7_0() { return cExcludesExcludesKeyword_7_0; }
	}

	public class XMOFTemporalOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "XMOFTemporalOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cAfterEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cAfterAfterKeyword_0_0 = (Keyword)cAfterEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cUntilEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cUntilUntilKeyword_1_0 = (Keyword)cUntilEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum XMOFTemporalOperator:
		//	after | until;
		public EnumRule getRule() { return rule; }

		//after | until
		public Alternatives getAlternatives() { return cAlternatives; }

		//after
		public EnumLiteralDeclaration getAfterEnumLiteralDeclaration_0() { return cAfterEnumLiteralDeclaration_0; }

		//"after"
		public Keyword getAfterAfterKeyword_0_0() { return cAfterAfterKeyword_0_0; }

		//until
		public EnumLiteralDeclaration getUntilEnumLiteralDeclaration_1() { return cUntilEnumLiteralDeclaration_1; }

		//"until"
		public Keyword getUntilUntilKeyword_1_0() { return cUntilUntilKeyword_1_0; }
	}

	public class XMOFTemporalQuantifierElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "XMOFTemporalQuantifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cAlwaysEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cAlwaysAlwaysKeyword_0_0 = (Keyword)cAlwaysEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSometimesEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSometimesSometimesKeyword_1_0 = (Keyword)cSometimesEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cEventuallyEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cEventuallyEventuallyKeyword_2_0 = (Keyword)cEventuallyEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cImmediatelyEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cImmediatelyImmediatelyKeyword_3_0 = (Keyword)cImmediatelyEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum XMOFTemporalQuantifier:
		//	always | sometimes | eventually | immediately;
		public EnumRule getRule() { return rule; }

		//always | sometimes | eventually | immediately
		public Alternatives getAlternatives() { return cAlternatives; }

		//always
		public EnumLiteralDeclaration getAlwaysEnumLiteralDeclaration_0() { return cAlwaysEnumLiteralDeclaration_0; }

		//"always"
		public Keyword getAlwaysAlwaysKeyword_0_0() { return cAlwaysAlwaysKeyword_0_0; }

		//sometimes
		public EnumLiteralDeclaration getSometimesEnumLiteralDeclaration_1() { return cSometimesEnumLiteralDeclaration_1; }

		//"sometimes"
		public Keyword getSometimesSometimesKeyword_1_0() { return cSometimesSometimesKeyword_1_0; }

		//eventually
		public EnumLiteralDeclaration getEventuallyEnumLiteralDeclaration_2() { return cEventuallyEnumLiteralDeclaration_2; }

		//"eventually"
		public Keyword getEventuallyEventuallyKeyword_2_0() { return cEventuallyEventuallyKeyword_2_0; }

		//immediately
		public EnumLiteralDeclaration getImmediatelyEnumLiteralDeclaration_3() { return cImmediatelyEnumLiteralDeclaration_3; }

		//"immediately"
		public Keyword getImmediatelyImmediatelyKeyword_3_0() { return cImmediatelyImmediatelyKeyword_3_0; }
	}
	
	private XMOFTestSuiteElements pXMOFTestSuite;
	private ImportElements pImport;
	private XMOFTestCaseElements pXMOFTestCase;
	private XMOFActivityInputElements pXMOFActivityInput;
	private XMOFValueElements pXMOFValue;
	private XMOFSimpleValueElements pXMOFSimpleValue;
	private XMOFObjectValueElements pXMOFObjectValue;
	private XMOFScenarioElements pXMOFScenario;
	private XMOFObjectSpecificationElements pXMOFObjectSpecification;
	private XMOFAttributeElements pXMOFAttribute;
	private XMOFLinkElements pXMOFLink;
	private XMOFAssertionElements pXMOFAssertion;
	private XMOFStateAssertionElements pXMOFStateAssertion;
	private XMOFReferencePointElements pXMOFReferencePoint;
	private XMOFActionReferencePointElements pXMOFActionReferencePoint;
	private XMOFConstraintReferencePointElements pXMOFConstraintReferencePoint;
	private XMOFFinallyStateAssertionElements pXMOFFinallyStateAssertion;
	private XMOFCheckElements pXMOFCheck;
	private XMOFConstraintCheckElements pXMOFConstraintCheck;
	private XMOFStateExpressionElements pXMOFStateExpression;
	private XMOFObjectStateExpressionElements pXMOFObjectStateExpression;
	private XMOFPropertyStateExpressionElements pXMOFPropertyStateExpression;
	private XMOFOrderAssertionElements pXMOFOrderAssertion;
	private XMOFNodeOrderElements pXMOFNodeOrder;
	private XMOFNodeSpecificationElements pXMOFNodeSpecification;
	private XMOFArithmeticOperatorElements unknownRuleXMOFArithmeticOperator;
	private XMOFTemporalOperatorElements unknownRuleXMOFTemporalOperator;
	private XMOFTemporalQuantifierElements unknownRuleXMOFTemporalQuantifier;
	
	private final Grammar grammar;

	private XbaseGrammarAccess gaXbase;

	@Inject
	public XmofTestLangGrammarAccess(GrammarProvider grammarProvider,
		XbaseGrammarAccess gaXbase) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaXbase = gaXbase;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.modelexecution.fumltesting.xmof.XmofTestLang".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public XbaseGrammarAccess getXbaseGrammarAccess() {
		return gaXbase;
	}

	
	//XMOFTestSuite:
	//	imports+=Import* scenarios+=XMOFScenario* tests+=XMOFTestCase*;
	public XMOFTestSuiteElements getXMOFTestSuiteAccess() {
		return (pXMOFTestSuite != null) ? pXMOFTestSuite : (pXMOFTestSuite = new XMOFTestSuiteElements());
	}
	
	public ParserRule getXMOFTestSuiteRule() {
		return getXMOFTestSuiteAccess().getRule();
	}

	//Import:
	//	"import" importedNamespace=QualifiedNameWithWildcard;
	public ImportElements getImportAccess() {
		return (pImport != null) ? pImport : (pImport = new ImportElements());
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}

	//XMOFTestCase:
	//	"test" name=ID "activity" activityUnderTest=[IntermediateActivities::Activity|QualifiedName] ("("
	//	inputs+=XMOFActivityInput ("," inputs+=XMOFActivityInput)* ")")? ("on" contextObject=[XMOFObjectSpecification])? "{"
	//	("initialize" "[" initScenarios+=[XMOFScenario] ("," initScenarios+=[XMOFScenario])* "]" ";")?
	//	assertions+=XMOFAssertion* "}";
	public XMOFTestCaseElements getXMOFTestCaseAccess() {
		return (pXMOFTestCase != null) ? pXMOFTestCase : (pXMOFTestCase = new XMOFTestCaseElements());
	}
	
	public ParserRule getXMOFTestCaseRule() {
		return getXMOFTestCaseAccess().getRule();
	}

	//XMOFActivityInput:
	//	parameter=[IntermediateActivities::ActivityParameterNode|QualifiedName] "=" value=XMOFValue;
	public XMOFActivityInputElements getXMOFActivityInputAccess() {
		return (pXMOFActivityInput != null) ? pXMOFActivityInput : (pXMOFActivityInput = new XMOFActivityInputElements());
	}
	
	public ParserRule getXMOFActivityInputRule() {
		return getXMOFActivityInputAccess().getRule();
	}

	//XMOFValue:
	//	XMOFSimpleValue | XMOFObjectValue;
	public XMOFValueElements getXMOFValueAccess() {
		return (pXMOFValue != null) ? pXMOFValue : (pXMOFValue = new XMOFValueElements());
	}
	
	public ParserRule getXMOFValueRule() {
		return getXMOFValueAccess().getRule();
	}

	//XMOFSimpleValue:
	//	value=XLiteral;
	public XMOFSimpleValueElements getXMOFSimpleValueAccess() {
		return (pXMOFSimpleValue != null) ? pXMOFSimpleValue : (pXMOFSimpleValue = new XMOFSimpleValueElements());
	}
	
	public ParserRule getXMOFSimpleValueRule() {
		return getXMOFSimpleValueAccess().getRule();
	}

	//XMOFObjectValue:
	//	value=[XMOFObjectSpecification];
	public XMOFObjectValueElements getXMOFObjectValueAccess() {
		return (pXMOFObjectValue != null) ? pXMOFObjectValue : (pXMOFObjectValue = new XMOFObjectValueElements());
	}
	
	public ParserRule getXMOFObjectValueRule() {
		return getXMOFObjectValueAccess().getRule();
	}

	//XMOFScenario:
	//	"scenario" name=ID "[" objects+=XMOFObjectSpecification* links+=XMOFLink* "]";
	public XMOFScenarioElements getXMOFScenarioAccess() {
		return (pXMOFScenario != null) ? pXMOFScenario : (pXMOFScenario = new XMOFScenarioElements());
	}
	
	public ParserRule getXMOFScenarioRule() {
		return getXMOFScenarioAccess().getRule();
	}

	//XMOFObjectSpecification:
	//	"object" name=ID ":" type=[ecore::EClass|QualifiedName] "{" attributes+=XMOFAttribute* "}";
	public XMOFObjectSpecificationElements getXMOFObjectSpecificationAccess() {
		return (pXMOFObjectSpecification != null) ? pXMOFObjectSpecification : (pXMOFObjectSpecification = new XMOFObjectSpecificationElements());
	}
	
	public ParserRule getXMOFObjectSpecificationRule() {
		return getXMOFObjectSpecificationAccess().getRule();
	}

	//XMOFAttribute:
	//	att=[ecore::EAttribute|QualifiedName] "=" value=XMOFValue ";";
	public XMOFAttributeElements getXMOFAttributeAccess() {
		return (pXMOFAttribute != null) ? pXMOFAttribute : (pXMOFAttribute = new XMOFAttributeElements());
	}
	
	public ParserRule getXMOFAttributeRule() {
		return getXMOFAttributeAccess().getRule();
	}

	//XMOFLink:
	//	"link" assoc=[ecore::EReference|QualifiedName] "{" "source" sourceProperty=[ecore::EAttribute|QualifiedName] "="
	//	sourceValue=[XMOFObjectSpecification] ";" "target" targetProperty=[ecore::EAttribute|QualifiedName] "="
	//	targetValue=[XMOFObjectSpecification] ";" "}";
	public XMOFLinkElements getXMOFLinkAccess() {
		return (pXMOFLink != null) ? pXMOFLink : (pXMOFLink = new XMOFLinkElements());
	}
	
	public ParserRule getXMOFLinkRule() {
		return getXMOFLinkAccess().getRule();
	}

	//XMOFAssertion:
	//	XMOFOrderAssertion | XMOFStateAssertion | XMOFFinallyStateAssertion;
	public XMOFAssertionElements getXMOFAssertionAccess() {
		return (pXMOFAssertion != null) ? pXMOFAssertion : (pXMOFAssertion = new XMOFAssertionElements());
	}
	
	public ParserRule getXMOFAssertionRule() {
		return getXMOFAssertionAccess().getRule();
	}

	//XMOFStateAssertion:
	//	"assertState" quantifier=XMOFTemporalQuantifier operator=XMOFTemporalOperator referencePoint=XMOFReferencePoint
	//	("until" untilPoint=XMOFReferencePoint)? "{" checks+=XMOFCheck* "}";
	public XMOFStateAssertionElements getXMOFStateAssertionAccess() {
		return (pXMOFStateAssertion != null) ? pXMOFStateAssertion : (pXMOFStateAssertion = new XMOFStateAssertionElements());
	}
	
	public ParserRule getXMOFStateAssertionRule() {
		return getXMOFStateAssertionAccess().getRule();
	}

	//XMOFReferencePoint:
	//	XMOFActionReferencePoint | XMOFConstraintReferencePoint;
	public XMOFReferencePointElements getXMOFReferencePointAccess() {
		return (pXMOFReferencePoint != null) ? pXMOFReferencePoint : (pXMOFReferencePoint = new XMOFReferencePointElements());
	}
	
	public ParserRule getXMOFReferencePointRule() {
		return getXMOFReferencePointAccess().getRule();
	}

	//XMOFActionReferencePoint:
	//	"action" action=[BasicActions::Action|QualifiedName];
	public XMOFActionReferencePointElements getXMOFActionReferencePointAccess() {
		return (pXMOFActionReferencePoint != null) ? pXMOFActionReferencePoint : (pXMOFActionReferencePoint = new XMOFActionReferencePointElements());
	}
	
	public ParserRule getXMOFActionReferencePointRule() {
		return getXMOFActionReferencePointAccess().getRule();
	}

	//XMOFConstraintReferencePoint:
	//	"constraint" constraintName=XStringLiteral;
	public XMOFConstraintReferencePointElements getXMOFConstraintReferencePointAccess() {
		return (pXMOFConstraintReferencePoint != null) ? pXMOFConstraintReferencePoint : (pXMOFConstraintReferencePoint = new XMOFConstraintReferencePointElements());
	}
	
	public ParserRule getXMOFConstraintReferencePointRule() {
		return getXMOFConstraintReferencePointAccess().getRule();
	}

	//XMOFFinallyStateAssertion:
	//	"finally" "{" {FinallyStateAssertion} checks+=XMOFCheck* "}";
	public XMOFFinallyStateAssertionElements getXMOFFinallyStateAssertionAccess() {
		return (pXMOFFinallyStateAssertion != null) ? pXMOFFinallyStateAssertion : (pXMOFFinallyStateAssertion = new XMOFFinallyStateAssertionElements());
	}
	
	public ParserRule getXMOFFinallyStateAssertionRule() {
		return getXMOFFinallyStateAssertionAccess().getRule();
	}

	//XMOFCheck:
	//	XMOFConstraintCheck | XMOFStateExpression;
	public XMOFCheckElements getXMOFCheckAccess() {
		return (pXMOFCheck != null) ? pXMOFCheck : (pXMOFCheck = new XMOFCheckElements());
	}
	
	public ParserRule getXMOFCheckRule() {
		return getXMOFCheckAccess().getRule();
	}

	//XMOFConstraintCheck:
	//	"check" constraintNames+=XStringLiteral ("," constraintNames+=XStringLiteral)* ("on"
	//	object=[IntermediateActivities::ObjectNode|QualifiedName])? ";";
	public XMOFConstraintCheckElements getXMOFConstraintCheckAccess() {
		return (pXMOFConstraintCheck != null) ? pXMOFConstraintCheck : (pXMOFConstraintCheck = new XMOFConstraintCheckElements());
	}
	
	public ParserRule getXMOFConstraintCheckRule() {
		return getXMOFConstraintCheckAccess().getRule();
	}

	//XMOFStateExpression:
	//	XMOFObjectStateExpression | XMOFPropertyStateExpression;
	public XMOFStateExpressionElements getXMOFStateExpressionAccess() {
		return (pXMOFStateExpression != null) ? pXMOFStateExpression : (pXMOFStateExpression = new XMOFStateExpressionElements());
	}
	
	public ParserRule getXMOFStateExpressionRule() {
		return getXMOFStateExpressionAccess().getRule();
	}

	//XMOFObjectStateExpression:
	//	pin=[IntermediateActivities::ObjectNode|QualifiedName] operator=XMOFArithmeticOperator value=XMOFValue ";";
	public XMOFObjectStateExpressionElements getXMOFObjectStateExpressionAccess() {
		return (pXMOFObjectStateExpression != null) ? pXMOFObjectStateExpression : (pXMOFObjectStateExpression = new XMOFObjectStateExpressionElements());
	}
	
	public ParserRule getXMOFObjectStateExpressionRule() {
		return getXMOFObjectStateExpressionAccess().getRule();
	}

	//XMOFPropertyStateExpression:
	//	pin=[IntermediateActivities::ObjectNode|QualifiedName] "::" property=[ecore::EAttribute|QualifiedName]
	//	operator=XMOFArithmeticOperator value=XMOFValue ";";
	public XMOFPropertyStateExpressionElements getXMOFPropertyStateExpressionAccess() {
		return (pXMOFPropertyStateExpression != null) ? pXMOFPropertyStateExpression : (pXMOFPropertyStateExpression = new XMOFPropertyStateExpressionElements());
	}
	
	public ParserRule getXMOFPropertyStateExpressionRule() {
		return getXMOFPropertyStateExpressionAccess().getRule();
	}

	//XMOFOrderAssertion:
	//	"assertOrder" order=XMOFNodeOrder ";";
	public XMOFOrderAssertionElements getXMOFOrderAssertionAccess() {
		return (pXMOFOrderAssertion != null) ? pXMOFOrderAssertion : (pXMOFOrderAssertion = new XMOFOrderAssertionElements());
	}
	
	public ParserRule getXMOFOrderAssertionRule() {
		return getXMOFOrderAssertionAccess().getRule();
	}

	//XMOFNodeOrder:
	//	nodes+=XMOFNodeSpecification ("," nodes+=XMOFNodeSpecification)*;
	public XMOFNodeOrderElements getXMOFNodeOrderAccess() {
		return (pXMOFNodeOrder != null) ? pXMOFNodeOrder : (pXMOFNodeOrder = new XMOFNodeOrderElements());
	}
	
	public ParserRule getXMOFNodeOrderRule() {
		return getXMOFNodeOrderAccess().getRule();
	}

	//XMOFNodeSpecification:
	//	node=[IntermediateActivities::ActivityNode|QualifiedName] (":" size=XNumberLiteral)? ("(" subOrder=XMOFNodeOrder
	//	")")? | joker="*" | joker="_";
	public XMOFNodeSpecificationElements getXMOFNodeSpecificationAccess() {
		return (pXMOFNodeSpecification != null) ? pXMOFNodeSpecification : (pXMOFNodeSpecification = new XMOFNodeSpecificationElements());
	}
	
	public ParserRule getXMOFNodeSpecificationRule() {
		return getXMOFNodeSpecificationAccess().getRule();
	}

	//enum XMOFArithmeticOperator:
	//	equal="=" | not_equal="!=" | greater=">" | smaller="<" | greater_equal=">=" | smaller_equal="<=" | includes |
	//	excludes;
	public XMOFArithmeticOperatorElements getXMOFArithmeticOperatorAccess() {
		return (unknownRuleXMOFArithmeticOperator != null) ? unknownRuleXMOFArithmeticOperator : (unknownRuleXMOFArithmeticOperator = new XMOFArithmeticOperatorElements());
	}
	
	public EnumRule getXMOFArithmeticOperatorRule() {
		return getXMOFArithmeticOperatorAccess().getRule();
	}

	//enum XMOFTemporalOperator:
	//	after | until;
	public XMOFTemporalOperatorElements getXMOFTemporalOperatorAccess() {
		return (unknownRuleXMOFTemporalOperator != null) ? unknownRuleXMOFTemporalOperator : (unknownRuleXMOFTemporalOperator = new XMOFTemporalOperatorElements());
	}
	
	public EnumRule getXMOFTemporalOperatorRule() {
		return getXMOFTemporalOperatorAccess().getRule();
	}

	//enum XMOFTemporalQuantifier:
	//	always | sometimes | eventually | immediately;
	public XMOFTemporalQuantifierElements getXMOFTemporalQuantifierAccess() {
		return (unknownRuleXMOFTemporalQuantifier != null) ? unknownRuleXMOFTemporalQuantifier : (unknownRuleXMOFTemporalQuantifier = new XMOFTemporalQuantifierElements());
	}
	
	public EnumRule getXMOFTemporalQuantifierRule() {
		return getXMOFTemporalQuantifierAccess().getRule();
	}

	//XExpression:
	//	XAssignment;
	public XbaseGrammarAccess.XExpressionElements getXExpressionAccess() {
		return gaXbase.getXExpressionAccess();
	}
	
	public ParserRule getXExpressionRule() {
		return getXExpressionAccess().getRule();
	}

	//XAssignment returns XExpression:
	//	{XAssignment} feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign value=XAssignment | XOrExpression
	//	(=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMultiAssign])
	//	rightOperand=XAssignment)?;
	public XbaseGrammarAccess.XAssignmentElements getXAssignmentAccess() {
		return gaXbase.getXAssignmentAccess();
	}
	
	public ParserRule getXAssignmentRule() {
		return getXAssignmentAccess().getRule();
	}

	//OpSingleAssign:
	//	"=";
	public XbaseGrammarAccess.OpSingleAssignElements getOpSingleAssignAccess() {
		return gaXbase.getOpSingleAssignAccess();
	}
	
	public ParserRule getOpSingleAssignRule() {
		return getOpSingleAssignAccess().getRule();
	}

	//OpMultiAssign:
	//	"+=" | "-=";
	public XbaseGrammarAccess.OpMultiAssignElements getOpMultiAssignAccess() {
		return gaXbase.getOpMultiAssignAccess();
	}
	
	public ParserRule getOpMultiAssignRule() {
		return getOpMultiAssignAccess().getRule();
	}

	//XOrExpression returns XExpression:
	//	XAndExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr])
	//	rightOperand=XAndExpression)*;
	public XbaseGrammarAccess.XOrExpressionElements getXOrExpressionAccess() {
		return gaXbase.getXOrExpressionAccess();
	}
	
	public ParserRule getXOrExpressionRule() {
		return getXOrExpressionAccess().getRule();
	}

	//OpOr:
	//	"||";
	public XbaseGrammarAccess.OpOrElements getOpOrAccess() {
		return gaXbase.getOpOrAccess();
	}
	
	public ParserRule getOpOrRule() {
		return getOpOrAccess().getRule();
	}

	//XAndExpression returns XExpression:
	//	XEqualityExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd])
	//	rightOperand=XEqualityExpression)*;
	public XbaseGrammarAccess.XAndExpressionElements getXAndExpressionAccess() {
		return gaXbase.getXAndExpressionAccess();
	}
	
	public ParserRule getXAndExpressionRule() {
		return getXAndExpressionAccess().getRule();
	}

	//OpAnd:
	//	"&&";
	public XbaseGrammarAccess.OpAndElements getOpAndAccess() {
		return gaXbase.getOpAndAccess();
	}
	
	public ParserRule getOpAndRule() {
		return getOpAndAccess().getRule();
	}

	//XEqualityExpression returns XExpression:
	//	XRelationalExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpEquality])
	//	rightOperand=XRelationalExpression)*;
	public XbaseGrammarAccess.XEqualityExpressionElements getXEqualityExpressionAccess() {
		return gaXbase.getXEqualityExpressionAccess();
	}
	
	public ParserRule getXEqualityExpressionRule() {
		return getXEqualityExpressionAccess().getRule();
	}

	//OpEquality:
	//	"==" | "!=" | "===" | "!==";
	public XbaseGrammarAccess.OpEqualityElements getOpEqualityAccess() {
		return gaXbase.getOpEqualityAccess();
	}
	
	public ParserRule getOpEqualityRule() {
		return getOpEqualityAccess().getRule();
	}

	//XRelationalExpression returns XExpression:
	//	XOtherOperatorExpression (=> ({XInstanceOfExpression.expression=current} "instanceof") type=JvmTypeReference | =>
	//	({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare])
	//	rightOperand=XOtherOperatorExpression)*;
	public XbaseGrammarAccess.XRelationalExpressionElements getXRelationalExpressionAccess() {
		return gaXbase.getXRelationalExpressionAccess();
	}
	
	public ParserRule getXRelationalExpressionRule() {
		return getXRelationalExpressionAccess().getRule();
	}

	//OpCompare:
	//	">=" | "<=" | ">" | "<";
	public XbaseGrammarAccess.OpCompareElements getOpCompareAccess() {
		return gaXbase.getOpCompareAccess();
	}
	
	public ParserRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}

	//XOtherOperatorExpression returns XExpression:
	//	XAdditiveExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOther])
	//	rightOperand=XAdditiveExpression)*;
	public XbaseGrammarAccess.XOtherOperatorExpressionElements getXOtherOperatorExpressionAccess() {
		return gaXbase.getXOtherOperatorExpressionAccess();
	}
	
	public ParserRule getXOtherOperatorExpressionRule() {
		return getXOtherOperatorExpressionAccess().getRule();
	}

	//OpOther:
	//	"->" | "..<" | ">" ".." | ".." | "=>" | ">" (=> (">" ">") | ">") | "<" (=> ("<" "<") | "<") | "<>" | "?:" | "<=>";
	public XbaseGrammarAccess.OpOtherElements getOpOtherAccess() {
		return gaXbase.getOpOtherAccess();
	}
	
	public ParserRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}

	//XAdditiveExpression returns XExpression:
	//	XMultiplicativeExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAdd])
	//	rightOperand=XMultiplicativeExpression)*;
	public XbaseGrammarAccess.XAdditiveExpressionElements getXAdditiveExpressionAccess() {
		return gaXbase.getXAdditiveExpressionAccess();
	}
	
	public ParserRule getXAdditiveExpressionRule() {
		return getXAdditiveExpressionAccess().getRule();
	}

	//OpAdd:
	//	"+" | "-";
	public XbaseGrammarAccess.OpAddElements getOpAddAccess() {
		return gaXbase.getOpAddAccess();
	}
	
	public ParserRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}

	//XMultiplicativeExpression returns XExpression:
	//	XUnaryOperation (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMulti])
	//	rightOperand=XUnaryOperation)*;
	public XbaseGrammarAccess.XMultiplicativeExpressionElements getXMultiplicativeExpressionAccess() {
		return gaXbase.getXMultiplicativeExpressionAccess();
	}
	
	public ParserRule getXMultiplicativeExpressionRule() {
		return getXMultiplicativeExpressionAccess().getRule();
	}

	//OpMulti:
	//	"*" | "**" | "/" | "%";
	public XbaseGrammarAccess.OpMultiElements getOpMultiAccess() {
		return gaXbase.getOpMultiAccess();
	}
	
	public ParserRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}

	//XUnaryOperation returns XExpression:
	//	{XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XUnaryOperation | XCastedExpression;
	public XbaseGrammarAccess.XUnaryOperationElements getXUnaryOperationAccess() {
		return gaXbase.getXUnaryOperationAccess();
	}
	
	public ParserRule getXUnaryOperationRule() {
		return getXUnaryOperationAccess().getRule();
	}

	//OpUnary:
	//	"!" | "-" | "+";
	public XbaseGrammarAccess.OpUnaryElements getOpUnaryAccess() {
		return gaXbase.getOpUnaryAccess();
	}
	
	public ParserRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}

	//XCastedExpression returns XExpression:
	//	XMemberFeatureCall (=> ({XCastedExpression.target=current} "as") type=JvmTypeReference)*;
	public XbaseGrammarAccess.XCastedExpressionElements getXCastedExpressionAccess() {
		return gaXbase.getXCastedExpressionAccess();
	}
	
	public ParserRule getXCastedExpressionRule() {
		return getXCastedExpressionAccess().getRule();
	}

	//XMemberFeatureCall returns XExpression:
	//	XPrimaryExpression (=> ({XAssignment.assignable=current} ("." | explicitStatic?="::")
	//	feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign) value=XAssignment | =>
	//	({XMemberFeatureCall.memberCallTarget=current} ("." | nullSafe?="?." | explicitStatic?="::")) ("<"
	//	typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
	//	feature=[types::JvmIdentifiableElement|FeatureCallID] (=> explicitOperationCall?="("
	//	(memberCallArguments+=XShortClosure | memberCallArguments+=XExpression ("," memberCallArguments+=XExpression)*)?
	//	")")? memberCallArguments+=XClosure?)*;
	public XbaseGrammarAccess.XMemberFeatureCallElements getXMemberFeatureCallAccess() {
		return gaXbase.getXMemberFeatureCallAccess();
	}
	
	public ParserRule getXMemberFeatureCallRule() {
		return getXMemberFeatureCallAccess().getRule();
	}

	//XPrimaryExpression returns XExpression:
	//	XConstructorCall | XBlockExpression | XSwitchExpression | XFeatureCall | XLiteral | XIfExpression |
	//	XForLoopExpression | XWhileExpression | XDoWhileExpression | XThrowExpression | XReturnExpression |
	//	XTryCatchFinallyExpression | XParenthesizedExpression;
	public XbaseGrammarAccess.XPrimaryExpressionElements getXPrimaryExpressionAccess() {
		return gaXbase.getXPrimaryExpressionAccess();
	}
	
	public ParserRule getXPrimaryExpressionRule() {
		return getXPrimaryExpressionAccess().getRule();
	}

	//XLiteral returns XExpression:
	//	XCollectionLiteral | XClosure | XBooleanLiteral | XNumberLiteral | XNullLiteral | XStringLiteral | XTypeLiteral;
	public XbaseGrammarAccess.XLiteralElements getXLiteralAccess() {
		return gaXbase.getXLiteralAccess();
	}
	
	public ParserRule getXLiteralRule() {
		return getXLiteralAccess().getRule();
	}

	//XCollectionLiteral:
	//	XSetLiteral | XListLiteral;
	public XbaseGrammarAccess.XCollectionLiteralElements getXCollectionLiteralAccess() {
		return gaXbase.getXCollectionLiteralAccess();
	}
	
	public ParserRule getXCollectionLiteralRule() {
		return getXCollectionLiteralAccess().getRule();
	}

	//XSetLiteral:
	//	{XSetLiteral} "#" "{" (elements+=XExpression ("," elements+=XExpression)*)? "}";
	public XbaseGrammarAccess.XSetLiteralElements getXSetLiteralAccess() {
		return gaXbase.getXSetLiteralAccess();
	}
	
	public ParserRule getXSetLiteralRule() {
		return getXSetLiteralAccess().getRule();
	}

	//XListLiteral:
	//	{XListLiteral} "#" "[" (elements+=XExpression ("," elements+=XExpression)*)? "]";
	public XbaseGrammarAccess.XListLiteralElements getXListLiteralAccess() {
		return gaXbase.getXListLiteralAccess();
	}
	
	public ParserRule getXListLiteralRule() {
		return getXListLiteralAccess().getRule();
	}

	//XClosure returns XExpression:
	//	=> ({XClosure} "[") => ((declaredFormalParameters+=JvmFormalParameter (","
	//	declaredFormalParameters+=JvmFormalParameter)*)? explicitSyntax?="|")? expression=XExpressionInClosure "]";
	public XbaseGrammarAccess.XClosureElements getXClosureAccess() {
		return gaXbase.getXClosureAccess();
	}
	
	public ParserRule getXClosureRule() {
		return getXClosureAccess().getRule();
	}

	//XExpressionInClosure returns XExpression:
	//	{XBlockExpression} (expressions+=XExpressionInsideBlock ";"?)*;
	public XbaseGrammarAccess.XExpressionInClosureElements getXExpressionInClosureAccess() {
		return gaXbase.getXExpressionInClosureAccess();
	}
	
	public ParserRule getXExpressionInClosureRule() {
		return getXExpressionInClosureAccess().getRule();
	}

	//XShortClosure returns XExpression:
	//	=> ({XClosure} (declaredFormalParameters+=JvmFormalParameter ("," declaredFormalParameters+=JvmFormalParameter)*)?
	//	explicitSyntax?="|") expression=XExpression;
	public XbaseGrammarAccess.XShortClosureElements getXShortClosureAccess() {
		return gaXbase.getXShortClosureAccess();
	}
	
	public ParserRule getXShortClosureRule() {
		return getXShortClosureAccess().getRule();
	}

	//XParenthesizedExpression returns XExpression:
	//	"(" XExpression ")";
	public XbaseGrammarAccess.XParenthesizedExpressionElements getXParenthesizedExpressionAccess() {
		return gaXbase.getXParenthesizedExpressionAccess();
	}
	
	public ParserRule getXParenthesizedExpressionRule() {
		return getXParenthesizedExpressionAccess().getRule();
	}

	//XIfExpression returns XExpression:
	//	{XIfExpression} "if" "(" if=XExpression ")" then=XExpression ("else" else=XExpression)?;
	public XbaseGrammarAccess.XIfExpressionElements getXIfExpressionAccess() {
		return gaXbase.getXIfExpressionAccess();
	}
	
	public ParserRule getXIfExpressionRule() {
		return getXIfExpressionAccess().getRule();
	}

	//XSwitchExpression returns XExpression:
	//	{XSwitchExpression} "switch" (=> (localVarName=ValidID ":")? switch=XExpression | => ("(" localVarName=ValidID ":")
	//	switch=XExpression ")") "{" cases+=XCasePart+ ("default" ":" default=XExpression)? "}";
	public XbaseGrammarAccess.XSwitchExpressionElements getXSwitchExpressionAccess() {
		return gaXbase.getXSwitchExpressionAccess();
	}
	
	public ParserRule getXSwitchExpressionRule() {
		return getXSwitchExpressionAccess().getRule();
	}

	//XCasePart:
	//	typeGuard=JvmTypeReference? ("case" case=XExpression)? ":" then=XExpression;
	public XbaseGrammarAccess.XCasePartElements getXCasePartAccess() {
		return gaXbase.getXCasePartAccess();
	}
	
	public ParserRule getXCasePartRule() {
		return getXCasePartAccess().getRule();
	}

	//XForLoopExpression returns XExpression:
	//	{XForLoopExpression} "for" "(" declaredParam=JvmFormalParameter ":" forExpression=XExpression ")"
	//	eachExpression=XExpression;
	public XbaseGrammarAccess.XForLoopExpressionElements getXForLoopExpressionAccess() {
		return gaXbase.getXForLoopExpressionAccess();
	}
	
	public ParserRule getXForLoopExpressionRule() {
		return getXForLoopExpressionAccess().getRule();
	}

	//XWhileExpression returns XExpression:
	//	{XWhileExpression} "while" "(" predicate=XExpression ")" body=XExpression;
	public XbaseGrammarAccess.XWhileExpressionElements getXWhileExpressionAccess() {
		return gaXbase.getXWhileExpressionAccess();
	}
	
	public ParserRule getXWhileExpressionRule() {
		return getXWhileExpressionAccess().getRule();
	}

	//XDoWhileExpression returns XExpression:
	//	{XDoWhileExpression} "do" body=XExpression "while" "(" predicate=XExpression ")";
	public XbaseGrammarAccess.XDoWhileExpressionElements getXDoWhileExpressionAccess() {
		return gaXbase.getXDoWhileExpressionAccess();
	}
	
	public ParserRule getXDoWhileExpressionRule() {
		return getXDoWhileExpressionAccess().getRule();
	}

	//XBlockExpression returns XExpression:
	//	{XBlockExpression} "{" (expressions+=XExpressionInsideBlock ";"?)* "}";
	public XbaseGrammarAccess.XBlockExpressionElements getXBlockExpressionAccess() {
		return gaXbase.getXBlockExpressionAccess();
	}
	
	public ParserRule getXBlockExpressionRule() {
		return getXBlockExpressionAccess().getRule();
	}

	//XExpressionInsideBlock returns XExpression:
	//	XVariableDeclaration | XExpression;
	public XbaseGrammarAccess.XExpressionInsideBlockElements getXExpressionInsideBlockAccess() {
		return gaXbase.getXExpressionInsideBlockAccess();
	}
	
	public ParserRule getXExpressionInsideBlockRule() {
		return getXExpressionInsideBlockAccess().getRule();
	}

	//XVariableDeclaration returns XExpression:
	//	{XVariableDeclaration} (writeable?="var" | "val") (=> (type=JvmTypeReference name=ValidID) | name=ValidID) ("="
	//	right=XExpression)?;
	public XbaseGrammarAccess.XVariableDeclarationElements getXVariableDeclarationAccess() {
		return gaXbase.getXVariableDeclarationAccess();
	}
	
	public ParserRule getXVariableDeclarationRule() {
		return getXVariableDeclarationAccess().getRule();
	}

	//JvmFormalParameter returns types::JvmFormalParameter:
	//	parameterType=JvmTypeReference? name=ValidID;
	public XbaseGrammarAccess.JvmFormalParameterElements getJvmFormalParameterAccess() {
		return gaXbase.getJvmFormalParameterAccess();
	}
	
	public ParserRule getJvmFormalParameterRule() {
		return getJvmFormalParameterAccess().getRule();
	}

	//FullJvmFormalParameter returns types::JvmFormalParameter:
	//	parameterType=JvmTypeReference name=ValidID;
	public XbaseGrammarAccess.FullJvmFormalParameterElements getFullJvmFormalParameterAccess() {
		return gaXbase.getFullJvmFormalParameterAccess();
	}
	
	public ParserRule getFullJvmFormalParameterRule() {
		return getFullJvmFormalParameterAccess().getRule();
	}

	//XFeatureCall returns XExpression:
	//	{XFeatureCall} ("<" typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?="(" (featureCallArguments+=XShortClosure
	//	| featureCallArguments+=XExpression ("," featureCallArguments+=XExpression)*)? ")")? featureCallArguments+=XClosure?;
	public XbaseGrammarAccess.XFeatureCallElements getXFeatureCallAccess() {
		return gaXbase.getXFeatureCallAccess();
	}
	
	public ParserRule getXFeatureCallRule() {
		return getXFeatureCallAccess().getRule();
	}

	//FeatureCallID:
	//	ValidID | "extends" | "static" | "import" | "extension";
	public XbaseGrammarAccess.FeatureCallIDElements getFeatureCallIDAccess() {
		return gaXbase.getFeatureCallIDAccess();
	}
	
	public ParserRule getFeatureCallIDRule() {
		return getFeatureCallIDAccess().getRule();
	}

	//IdOrSuper:
	//	FeatureCallID | "super";
	public XbaseGrammarAccess.IdOrSuperElements getIdOrSuperAccess() {
		return gaXbase.getIdOrSuperAccess();
	}
	
	public ParserRule getIdOrSuperRule() {
		return getIdOrSuperAccess().getRule();
	}

	//XConstructorCall returns XExpression:
	//	{XConstructorCall} "new" constructor=[types::JvmConstructor|QualifiedName] ("<"
	//	typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")? ("("
	//	(arguments+=XShortClosure | arguments+=XExpression ("," arguments+=XExpression)*)? ")")? arguments+=XClosure?;
	public XbaseGrammarAccess.XConstructorCallElements getXConstructorCallAccess() {
		return gaXbase.getXConstructorCallAccess();
	}
	
	public ParserRule getXConstructorCallRule() {
		return getXConstructorCallAccess().getRule();
	}

	//XBooleanLiteral returns XExpression:
	//	{XBooleanLiteral} ("false" | isTrue?="true");
	public XbaseGrammarAccess.XBooleanLiteralElements getXBooleanLiteralAccess() {
		return gaXbase.getXBooleanLiteralAccess();
	}
	
	public ParserRule getXBooleanLiteralRule() {
		return getXBooleanLiteralAccess().getRule();
	}

	//XNullLiteral returns XExpression:
	//	{XNullLiteral} "null";
	public XbaseGrammarAccess.XNullLiteralElements getXNullLiteralAccess() {
		return gaXbase.getXNullLiteralAccess();
	}
	
	public ParserRule getXNullLiteralRule() {
		return getXNullLiteralAccess().getRule();
	}

	//XNumberLiteral returns XExpression:
	//	{XNumberLiteral} value=Number;
	public XbaseGrammarAccess.XNumberLiteralElements getXNumberLiteralAccess() {
		return gaXbase.getXNumberLiteralAccess();
	}
	
	public ParserRule getXNumberLiteralRule() {
		return getXNumberLiteralAccess().getRule();
	}

	//XStringLiteral returns XExpression:
	//	{XStringLiteral} value=STRING;
	public XbaseGrammarAccess.XStringLiteralElements getXStringLiteralAccess() {
		return gaXbase.getXStringLiteralAccess();
	}
	
	public ParserRule getXStringLiteralRule() {
		return getXStringLiteralAccess().getRule();
	}

	//XTypeLiteral returns XExpression:
	//	{XTypeLiteral} "typeof" "(" type=[types::JvmType|QualifiedName] arrayDimensions+=ArrayBrackets* ")";
	public XbaseGrammarAccess.XTypeLiteralElements getXTypeLiteralAccess() {
		return gaXbase.getXTypeLiteralAccess();
	}
	
	public ParserRule getXTypeLiteralRule() {
		return getXTypeLiteralAccess().getRule();
	}

	//XThrowExpression returns XExpression:
	//	{XThrowExpression} "throw" expression=XExpression;
	public XbaseGrammarAccess.XThrowExpressionElements getXThrowExpressionAccess() {
		return gaXbase.getXThrowExpressionAccess();
	}
	
	public ParserRule getXThrowExpressionRule() {
		return getXThrowExpressionAccess().getRule();
	}

	//XReturnExpression returns XExpression:
	//	{XReturnExpression} "return" => expression=XExpression?;
	public XbaseGrammarAccess.XReturnExpressionElements getXReturnExpressionAccess() {
		return gaXbase.getXReturnExpressionAccess();
	}
	
	public ParserRule getXReturnExpressionRule() {
		return getXReturnExpressionAccess().getRule();
	}

	//XTryCatchFinallyExpression returns XExpression:
	//	{XTryCatchFinallyExpression} "try" expression=XExpression (catchClauses+=XCatchClause+ ("finally"
	//	finallyExpression=XExpression)? | "finally" finallyExpression=XExpression);
	public XbaseGrammarAccess.XTryCatchFinallyExpressionElements getXTryCatchFinallyExpressionAccess() {
		return gaXbase.getXTryCatchFinallyExpressionAccess();
	}
	
	public ParserRule getXTryCatchFinallyExpressionRule() {
		return getXTryCatchFinallyExpressionAccess().getRule();
	}

	//XCatchClause:
	//	"catch" "(" declaredParam=FullJvmFormalParameter ")" expression=XExpression;
	public XbaseGrammarAccess.XCatchClauseElements getXCatchClauseAccess() {
		return gaXbase.getXCatchClauseAccess();
	}
	
	public ParserRule getXCatchClauseRule() {
		return getXCatchClauseAccess().getRule();
	}

	//QualifiedName:
	//	ValidID ("." ValidID)*;
	public XbaseGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaXbase.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//Number hidden():
	//	HEX | (INT | DECIMAL) ("." (INT | DECIMAL))?;
	public XbaseGrammarAccess.NumberElements getNumberAccess() {
		return gaXbase.getNumberAccess();
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}

	/// **
	// * Dummy rule, for "better" downwards compatibility, since GrammarAccess generates non-static inner classes, 
	// * which makes downstream grammars break on classloading, when a rule is removed.
	// * /
	//StaticQualifier:
	//	(ValidID "::")+;
	public XbaseGrammarAccess.StaticQualifierElements getStaticQualifierAccess() {
		return gaXbase.getStaticQualifierAccess();
	}
	
	public ParserRule getStaticQualifierRule() {
		return getStaticQualifierAccess().getRule();
	}

	//terminal HEX:
	//	("0x" | "0X") ("0".."9" | "a".."f" | "A".."F" | "_")+ ("#" (("b" | "B") ("i" | "I") | ("l" | "L")))?;
	public TerminalRule getHEXRule() {
		return gaXbase.getHEXRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9" ("0".."9" | "_")*;
	public TerminalRule getINTRule() {
		return gaXbase.getINTRule();
	} 

	//terminal DECIMAL:
	//	INT (("e" | "E") ("+" | "-")? INT)? (("b" | "B") ("i" | "I" | "d" | "D") | ("l" | "L" | "d" | "D" | "f" | "F"))?;
	public TerminalRule getDECIMALRule() {
		return gaXbase.getDECIMALRule();
	} 

	//JvmTypeReference:
	//	JvmParameterizedTypeReference => ({JvmGenericArrayTypeReference.componentType=current} ArrayBrackets)* |
	//	XFunctionTypeRef;
	public XtypeGrammarAccess.JvmTypeReferenceElements getJvmTypeReferenceAccess() {
		return gaXbase.getJvmTypeReferenceAccess();
	}
	
	public ParserRule getJvmTypeReferenceRule() {
		return getJvmTypeReferenceAccess().getRule();
	}

	//ArrayBrackets:
	//	"[" "]";
	public XtypeGrammarAccess.ArrayBracketsElements getArrayBracketsAccess() {
		return gaXbase.getArrayBracketsAccess();
	}
	
	public ParserRule getArrayBracketsRule() {
		return getArrayBracketsAccess().getRule();
	}

	//XFunctionTypeRef:
	//	("(" (paramTypes+=JvmTypeReference ("," paramTypes+=JvmTypeReference)*)? ")")? "=>" returnType=JvmTypeReference;
	public XtypeGrammarAccess.XFunctionTypeRefElements getXFunctionTypeRefAccess() {
		return gaXbase.getXFunctionTypeRefAccess();
	}
	
	public ParserRule getXFunctionTypeRefRule() {
		return getXFunctionTypeRefAccess().getRule();
	}

	//JvmParameterizedTypeReference:
	//	type=[JvmType|QualifiedName] ("<" arguments+=JvmArgumentTypeReference ("," arguments+=JvmArgumentTypeReference)*
	//	">")?;
	public XtypeGrammarAccess.JvmParameterizedTypeReferenceElements getJvmParameterizedTypeReferenceAccess() {
		return gaXbase.getJvmParameterizedTypeReferenceAccess();
	}
	
	public ParserRule getJvmParameterizedTypeReferenceRule() {
		return getJvmParameterizedTypeReferenceAccess().getRule();
	}

	//JvmArgumentTypeReference returns JvmTypeReference:
	//	JvmTypeReference | JvmWildcardTypeReference;
	public XtypeGrammarAccess.JvmArgumentTypeReferenceElements getJvmArgumentTypeReferenceAccess() {
		return gaXbase.getJvmArgumentTypeReferenceAccess();
	}
	
	public ParserRule getJvmArgumentTypeReferenceRule() {
		return getJvmArgumentTypeReferenceAccess().getRule();
	}

	//JvmWildcardTypeReference:
	//	{JvmWildcardTypeReference} "?" (constraints+=JvmUpperBound | constraints+=JvmLowerBound)?;
	public XtypeGrammarAccess.JvmWildcardTypeReferenceElements getJvmWildcardTypeReferenceAccess() {
		return gaXbase.getJvmWildcardTypeReferenceAccess();
	}
	
	public ParserRule getJvmWildcardTypeReferenceRule() {
		return getJvmWildcardTypeReferenceAccess().getRule();
	}

	//JvmUpperBound:
	//	"extends" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundElements getJvmUpperBoundAccess() {
		return gaXbase.getJvmUpperBoundAccess();
	}
	
	public ParserRule getJvmUpperBoundRule() {
		return getJvmUpperBoundAccess().getRule();
	}

	//JvmUpperBoundAnded returns JvmUpperBound:
	//	"&" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundAndedElements getJvmUpperBoundAndedAccess() {
		return gaXbase.getJvmUpperBoundAndedAccess();
	}
	
	public ParserRule getJvmUpperBoundAndedRule() {
		return getJvmUpperBoundAndedAccess().getRule();
	}

	//JvmLowerBound:
	//	"super" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundElements getJvmLowerBoundAccess() {
		return gaXbase.getJvmLowerBoundAccess();
	}
	
	public ParserRule getJvmLowerBoundRule() {
		return getJvmLowerBoundAccess().getRule();
	}

	//JvmTypeParameter:
	//	name=ValidID (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded* | constraints+=JvmLowerBound)?;
	public XtypeGrammarAccess.JvmTypeParameterElements getJvmTypeParameterAccess() {
		return gaXbase.getJvmTypeParameterAccess();
	}
	
	public ParserRule getJvmTypeParameterRule() {
		return getJvmTypeParameterAccess().getRule();
	}

	//QualifiedNameWithWildcard:
	//	QualifiedName "." "*";
	public XtypeGrammarAccess.QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return gaXbase.getQualifiedNameWithWildcardAccess();
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}

	//ValidID:
	//	ID;
	public XtypeGrammarAccess.ValidIDElements getValidIDAccess() {
		return gaXbase.getValidIDAccess();
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}

	//XImportSection:
	//	importDeclarations+=XImportDeclaration+;
	public XtypeGrammarAccess.XImportSectionElements getXImportSectionAccess() {
		return gaXbase.getXImportSectionAccess();
	}
	
	public ParserRule getXImportSectionRule() {
		return getXImportSectionAccess().getRule();
	}

	//XImportDeclaration:
	//	"import" (static?="static" extension?="extension"? importedType=[JvmDeclaredType|QualifiedName] "." "*" |
	//	importedType=[JvmDeclaredType|QualifiedName] | importedNamespace=QualifiedNameWithWildcard) ";"?;
	public XtypeGrammarAccess.XImportDeclarationElements getXImportDeclarationAccess() {
		return gaXbase.getXImportDeclarationAccess();
	}
	
	public ParserRule getXImportDeclarationRule() {
		return getXImportDeclarationAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "$" | "_") ("a".."z" | "A".."Z" | "$" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaXbase.getIDRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaXbase.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaXbase.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaXbase.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaXbase.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaXbase.getANY_OTHERRule();
	} 
}
