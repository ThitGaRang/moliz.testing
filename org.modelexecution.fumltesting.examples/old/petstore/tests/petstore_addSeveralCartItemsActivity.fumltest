import petstore.structure.*
import petstore.scenarios.*

scenario TestData[
	object cart : Cart{}
	object product : Product{}
	object item : Item{unitCost = 5;}
	object cartItem : CartItem{quantity=5;}
	link cartItem_item{source cartItem=cartItem; target item=item;}
]

test addSeveralCartItemsTest activity AddSeveralCartItemsActivity on TestData.cart{
	var cart = selfA.result;
	var item = createItemA.result;
	assertOrder AddSeveralCartItemsActivity.init, AddSeveralCartItemsActivity.selfA, AddSeveralCartItemsActivity.createItemA, AddSeveralCartItemsActivity.quantityA,
		  AddSeveralCartItemsActivity.addItemA, AddSeveralCartItemsActivity.createItemB, AddSeveralCartItemsActivity.selfB, 
		  AddSeveralCartItemsActivity.quantityB, AddSeveralCartItemsActivity.addItemB;
		  
	assertState always after action AddSeveralCartItemsActivity.createItemB{
		item != TestData.item;
		cart::items includes TestData.cartItem;
	}
}