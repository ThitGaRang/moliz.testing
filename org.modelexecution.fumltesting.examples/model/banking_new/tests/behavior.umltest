import banking.structure.*

scenario BankingTestData[
	object atmTD: ATM{}
	object accountTD: Account{Account.balance = 100;}	
	object cardTD: Card{Card.pin = 1985;}
	object depositTD: Deposit{Record.amount = 100;}
	
	link card_account {source card_account.card = cardTD; target card_account.account = accountTD;}
	link account_record {source account_record.account=accountTD; target account_record.records = depositTD;}
]

test atmTransactionTest activity ATM.Withdraw(Withdraw.card=BankingTestData.cardTD, 
		Withdraw.pin=1985, Withdraw.amount = 100) on BankingTestData.atmTD{
	assertOrder *, Withdraw.call_validatePin, *, Withdraw.call_makeWithdrawal, *;
	assertState eventually after constraint 'TransactionCreated' {
		check 'TransactionEnded', 'TransactionAdded';
	}
	finally {
		Withdraw.readAccount.result::Account.balance = 0;
		check 'NumOfDeposits', 'NumOfWithdrawsSuccess', 'BalanceRecords' on Withdraw.readAccount.result;
		Withdraw.success = true;
	}
}

test atmTransactionFail activity ATM.Withdraw(Withdraw.card = BankingTestData.cardTD, 
	Withdraw.pin = 1985, Withdraw.amount = 200) on BankingTestData.atmTD{
	assertOrder *, Withdraw.call_validatePin, *, Withdraw.call_makeWithdrawal, *;
	assertState eventually after constraint 'TransactionCreated' {
		check 'TransactionEnded', 'TransactionAdded';
	}
	finally {
		Withdraw.readAccount.result::Account.balance = 100;
		check 'NumOfDeposits', 'NumOfWithdrawsFail', 'BalanceRecords' on Withdraw.readAccount.result;
		Withdraw.success = false;
	}
}