import banking.structure.*

scenario BankingTDWithAtm[
	object atmTD: ATM{}
	object cardTD: Card{Card.pin = 1985;}
	object accountTD: Account{Account.balance = 100;}
	object depositTD: Deposit{Record.amount = 100;}
	link account_record {source account_record.account=accountTD; target account_record.records = depositTD;}
	link card_account {source card_account.card = cardTD; target card_account.account = accountTD;}
]

test atmWithdrawSuccess activity ATM.Withdraw(ATM.Withdraw.card = BankingTDWithAtm.cardTD, 
	ATM.Withdraw.pin = 1985, ATM.Withdraw.amount = 100) on BankingTDWithAtm.atmTD{
	initialize BankingTDWithAtm;
	
	assertOrder *, ATM.Withdraw.validatePin, *, ATM.Withdraw.makeWithdrawal, *;
	
	assertState eventually after constraint 'TransactionCreated'{
		check 'TransactionEnded', 'TransactionAdded';
	}
	
	finally{
		ATM.Withdraw.readAccount.result::Account.balance = 0;
		check 'NumOfWithdrawalsSuccess', 'BalanceRecords' on ATM.Withdraw.readAccount.result;
		ATM.Withdraw.success = true;
	}
}