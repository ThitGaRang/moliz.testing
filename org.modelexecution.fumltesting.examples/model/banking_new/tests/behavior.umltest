import banking.structure.*

scenario BankingTestData[
	object accountTD: Account{
		Account.balance = 0;
	}	
	object cardTD: Card{
		Card.pin = 1985;
	}
	object atmTD: ATM{}
	
	link card_account {source card_account.card = cardTD; target card_account.account = accountTD;}
]

test validatePinTrueTest activity Card.ValidatePin(ValidatePin.pin = 1985) on BankingTestData.cardTD{
	assertOrder ValidatePin.init, ValidatePin.context, ValidatePin.readPin, ValidatePin.equals;
	assertState always after action ValidatePin.equals {
		ValidatePin.success = true;
	}
}

test validatePinFalseTest activity Card.ValidatePin(ValidatePin.pin = 1980) on BankingTestData.cardTD{
	assertOrder ValidatePin.init, ValidatePin.context, ValidatePin.readPin, ValidatePin.equals;
	assertState always after action ValidatePin.equals {
		ValidatePin.success = false;
	}
}

test makeDepositAccountTest activity Account.MakeDeposit(MakeDeposit.amount = 200) on BankingTestData.accountTD{
	assertOrder *, MakeDeposit.setNewBalance;
	assertState always after action MakeDeposit.setNewBalance{
		MakeDeposit.context.result::Account.balance = 200;
	}	
}

test makeWithdrawalAccountTest activity Account.MakeWithdrawal(MakeWithdrawal.amount = 0) on BankingTestData.accountTD{
	assertOrder *, MakeWithdrawal.successTrue;
	finally {
		MakeWithdrawal.context.result::Account.balance = 0;
	}
}

test makeWithdrawalAccountFailTest activity Account.MakeWithdrawal(MakeWithdrawal.amount = 100) on BankingTestData.accountTD{
	assertOrder *, MakeWithdrawal.successFalse;
	finally {
		MakeWithdrawal.context.result::Account.balance = 0;
	}
}

test startTransactionTest activity ATM.StartTransaction on BankingTestData.atmTD{
	assertOrder StartTransaction.init, StartTransaction.context, 
		StartTransaction.createTransaction, StartTransaction.setCurrentTransaction;
	finally {
		StartTransaction.setCurrentTransaction.result != null;
	}
}

test endTransactionTest activity ATM.EndTransaction on BankingTestData.atmTD{
	assertOrder EndTransaction.init, EndTransaction.context, EndTransaction.readCurrentTransaction;
	finally {
		EndTransaction.context.result::atmCurrentTransaction.currentTransaction = null;
	}
}

test makeDepositATMTest activity ATM.Deposit(Deposit.pin = 1985, Deposit.card = BankingTestData.cardTD, Deposit.amount = 100) on BankingTestData.atmTD{
	assertOrder *, Deposit.call_endTransactionTrue;
	finally {
		Deposit.readAccount.result::Account.balance = 100;
		Deposit.success = true;
	}
}

test makeWithdrawalATMTest activity ATM.Withdraw(Withdraw.pin = 1985, Withdraw.card = BankingTestData.cardTD, Withdraw.amount = 100) on BankingTestData.atmTD{
	assertOrder *, Withdraw.call_endTransaction;
	finally {
		Withdraw.readAccount.result::Account.balance = 0;
		Withdraw.success = false;
	}
}