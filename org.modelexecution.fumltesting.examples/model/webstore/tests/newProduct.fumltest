import webstore.structure.*
import webstore.behavior.*

test newProductTest activity NewProductActivity(name="testProduct"){
	var productResult = product;	
	
	assertOrder *, NewProductActivity.createProduct, *, NewProductActivity.setAvailable, *, 
		NewProductActivity.setName, * , NewProductActivity.setCode, NewProductActivity.final;
	
	//action: createProduct operator: after
	assertState always after action NewProductActivity.createProduct{ 
		productResult != null;
		check 'ProductCreated', 'NumberOfProducts';
	}
	assertState always after constraint 'ProductCreated'{
		productResult != null;
		check 'NumberOfProducts';
	}
	assertState eventually after action NewProductActivity.createProduct{
		productResult != null;
		productResult::available = true;
		productResult::name = "testProduct";
		productResult::code = 12345;
		
		check 'ProductCreated', 'NumberOfProducts', 'ProductAvailable', 'ProductName', 'ProductCode';
	}
	assertState eventually after constraint 'ProductCreated'{
		productResult != null;
		productResult::available = true;
		productResult::name = "testProduct";
		productResult::code = 12345;
		
		check 'ProductCreated', 'NumberOfProducts', 'ProductAvailable', 'ProductName', 'ProductCode';
	}
	assertState immediately after action NewProductActivity.createProduct{
		productResult != null;
		productResult::available = null;
		productResult::name=null;
		productResult::code=null;
		
		check 'NumberOfProducts', 'ProductAvailableNotSet', 'ProductNameNotSet', 'ProductCodeNotSet';
	}
	assertState immediately after constraint 'ProductCreated'{
		productResult != null;
		productResult::available = null;
		productResult::name=null;
		productResult::code=null;
		
		check 'NumberOfProducts', 'ProductAvailableNotSet', 'ProductNameNotSet', 'ProductCodeNotSet';
	}
	assertState sometimes after action NewProductActivity.createProduct{
		productResult != null;
		
		productResult::available = null;
		productResult::name=null;
		productResult::code=null;
		
		productResult::available = true;
		productResult::name = "testProduct";
		productResult::code = 12345;
		
		check 'ProductCreated', 'NumberOfProducts';
		check 'ProductAvailableNotSet', 'ProductNameNotSet', 'ProductCodeNotSet';
		check 'ProductAvailable', 'ProductName', 'ProductCode';
	}
	assertState sometimes after constraint 'ProductCreated'{
		productResult != null;
		
		productResult::available = null;
		productResult::name=null;
		productResult::code=null;
		
		productResult::available = true;
		productResult::name = "testProduct";
		productResult::code = 12345;
		
		check 'ProductCreated', 'NumberOfProducts';
		check 'ProductAvailableNotSet', 'ProductNameNotSet', 'ProductCodeNotSet';
		check 'ProductAvailable', 'ProductName', 'ProductCode';
	}
	
	//action: createProduct operator: until
	assertState always until action NewProductActivity.createProduct{ 
		productResult = null;
	}
	assertState always until constraint 'ProductCreated'{ 
		productResult = null;
	}
	assertState eventually until action NewProductActivity.createProduct{ 
		productResult = null;
	}
	assertState eventually until constraint 'ProductCreated'{ 
		productResult = null;
	}
	assertState immediately until action NewProductActivity.createProduct{ 
		productResult = null;
	}
	assertState immediately until constraint 'ProductCreated'{ 
		productResult = null;
	}
	assertState sometimes until action NewProductActivity.createProduct{ 
		productResult = null;
	}
	assertState sometimes until constraint 'ProductCreated'{ 
		productResult = null;
	}
	
	//action: setAvailable operator: after
	assertState always after action NewProductActivity.setAvailable{
		productResult != null;
		productResult::available = true;
		
		check 'ProductCreated', 'NumberOfProducts', 'ProductAvailable';
	}
	assertState always after constraint 'ProductAvailable'{
		productResult != null;
		productResult::available = true;
		
		check 'ProductCreated', 'NumberOfProducts', 'ProductAvailable';
	}
	assertState eventually after action NewProductActivity.setAvailable{
		productResult != null;
		productResult::available = true;
		productResult::name = "testProduct";
		productResult::code = 12345;
		
		check 'ProductCreated', 'NumberOfProducts', 'ProductAvailable', 'ProductName', 'ProductCode';
	}
	assertState eventually after constraint 'ProductAvailable'{
		productResult != null;
		productResult::available = true;
		productResult::name = "testProduct";
		productResult::code = 12345;
		
		check 'ProductCreated', 'NumberOfProducts', 'ProductAvailable', 'ProductName', 'ProductCode';
	}
	assertState immediately after action NewProductActivity.setAvailable{
		productResult != null;
		productResult::available = true;
		productResult::name = null;
		productResult::code = null;
		
		check 'ProductCreated', 'NumberOfProducts', 'ProductAvailable', 'ProductNameNotSet', 'ProductCodeNotSet';
	}
	assertState immediately after constraint 'ProductAvailable'{
		productResult != null;
		productResult::available = true;
		productResult::name = null;
		productResult::code = null;
		
		check 'ProductCreated', 'NumberOfProducts', 'ProductAvailable', 'ProductNameNotSet', 'ProductCodeNotSet';
	}
	assertState sometimes after action NewProductActivity.setAvailable{
		productResult != null;
		productResult::available = true;
		productResult::name = null;
		productResult::code = null;
		
		productResult::name = "testProduct";
		productResult::code = 12345;
		
		check 'ProductCreated', 'NumberOfProducts';
		check 'ProductNameNotSet', 'ProductCodeNotSet';		
		check 'ProductAvailable', 'ProductName', 'ProductCode';		
	}
	assertState sometimes after constraint 'ProductAvailable'{
		productResult != null;
		productResult::available = true;
		productResult::name = null;
		productResult::code = null;
		
		productResult::name = "testProduct";
		productResult::code = 12345;
		
		check 'ProductCreated', 'NumberOfProducts';
		check 'ProductNameNotSet', 'ProductCodeNotSet';		
		check 'ProductAvailable', 'ProductName', 'ProductCode';		
	}
	
	//action: setAvailable operator: until
	assertState always until action NewProductActivity.setAvailable{
		productResult::available = null;
		productResult::name = null;
		productResult::code = null;
		
		check 'ProductAvailableNotSet', 'ProductNameNotSet', 'ProductCodeNotSet';
	}
	assertState always until constraint 'ProductAvailable'{
		productResult::available = null;
		productResult::name = null;
		productResult::code = null;
		
		check 'ProductAvailableNotSet', 'ProductNameNotSet', 'ProductCodeNotSet';
	}
	assertState always after action NewProductActivity.createProduct until action NewProductActivity.setAvailable{
		productResult::available = null;
		productResult::name = null;
		productResult::code = null;
		
		check 'ProductAvailableNotSet', 'ProductNameNotSet', 'ProductCodeNotSet';
	}
	assertState always after action NewProductActivity.createProduct until constraint 'ProductAvailable'{
		productResult::available = null;
		productResult::name = null;
		productResult::code = null;
		
		check 'ProductAvailableNotSet', 'ProductNameNotSet', 'ProductCodeNotSet';
	}
	assertState always after constraint 'ProductCreated' until action NewProductActivity.setAvailable{
		productResult::available = null;
		productResult::name = null;
		productResult::code = null;
		
		check 'ProductAvailableNotSet', 'ProductNameNotSet', 'ProductCodeNotSet';
	}
	assertState always after constraint 'ProductCreated' until constraint 'ProductAvailable'{
		productResult::available = null;
		productResult::name = null;
		productResult::code = null;
		
		check 'ProductAvailableNotSet', 'ProductNameNotSet', 'ProductCodeNotSet';
	}
	assertState eventually until action NewProductActivity.setAvailable{
		productResult != null;
		productResult::available = null;
		productResult::name = null;
		productResult::code = null;
		
		check 'ProductCreated', 'NumberOfProducts', 'ProductAvailableNotSet', 'ProductNameNotSet', 'ProductCodeNotSet';
	}
	assertState eventually until constraint 'ProductAvailable'{
		productResult != null;
		productResult::available = null;
		productResult::name = null;
		productResult::code = null;
		
		check 'ProductCreated', 'NumberOfProducts', 'ProductAvailableNotSet', 'ProductNameNotSet', 'ProductCodeNotSet';
	}
	assertState immediately until action NewProductActivity.setAvailable{
		productResult != null;
		productResult::available = null;
		productResult::name = null;
		productResult::code = null;
		
		check 'ProductCreated', 'NumberOfProducts', 'ProductAvailableNotSet', 'ProductNameNotSet', 'ProductCodeNotSet';
	}
	assertState immediately until constraint 'ProductAvailable'{
		productResult != null;
		productResult::available = null;
		productResult::name = null;
		productResult::code = null;
		
		check 'ProductCreated', 'NumberOfProducts', 'ProductAvailableNotSet', 'ProductNameNotSet', 'ProductCodeNotSet';
	}
	assertState sometimes until action NewProductActivity.setAvailable{
		productResult != null;
		productResult::available = null;
		productResult::name = null;
		productResult::code = null;
		
		productResult = null;
		
		check 'ProductCreated', 'NumberOfProducts', 'ProductAvailableNotSet', 'ProductNameNotSet', 'ProductCodeNotSet';		
	}
	assertState sometimes until constraint 'ProductAvailable'{
		productResult != null;
		productResult::available = null;
		productResult::name = null;
		productResult::code = null;
		
		productResult = null;
		
		check 'ProductCreated', 'NumberOfProducts', 'ProductAvailableNotSet', 'ProductNameNotSet', 'ProductCodeNotSet';		
	}
	
	//action: setName operator: after
	assertState always after action NewProductActivity.setName{
		productResult != null;
		productResult::available = true;
		productResult::name = "testProduct";
		
		check 'ProductCreated', 'NumberOfProducts', 'ProductAvailable', 'ProductName';
	}
	assertState always after constraint 'ProductName'{
		productResult != null;
		productResult::available = true;
		productResult::name = "testProduct";
		
		check 'ProductCreated', 'NumberOfProducts', 'ProductAvailable', 'ProductName';
	}
	assertState eventually after action NewProductActivity.setName{
		productResult != null;
		productResult::available = true;
		productResult::name = "testProduct";
		productResult::code = 12345;
		
		check 'ProductCreated', 'NumberOfProducts', 'ProductAvailable', 'ProductName', 'ProductCode';
	}
	assertState eventually after constraint 'ProductName'{
		productResult != null;
		productResult::available = true;
		productResult::name = "testProduct";
		productResult::code = 12345;
		
		check 'ProductCreated', 'NumberOfProducts', 'ProductAvailable', 'ProductName', 'ProductCode';
	}
	assertState immediately after action NewProductActivity.setName{
		productResult != null;
		productResult::available = true;
		productResult::name = "testProduct";
		productResult::code = null;
		
		check 'ProductCreated', 'NumberOfProducts', 'ProductAvailable', 'ProductName', 'ProductCodeNotSet';
	}
	assertState immediately after constraint 'ProductName'{
		productResult != null;
		productResult::available = true;
		productResult::name = "testProduct";
		productResult::code = null;
		
		check 'ProductCreated', 'NumberOfProducts', 'ProductAvailable', 'ProductName', 'ProductCodeNotSet';
	}
	assertState sometimes after action NewProductActivity.setName{
		productResult != null;
		productResult::available = true;
		productResult::name = "testProduct";
		productResult::code = 12345;
		
		productResult::code = null;
		
		check 'ProductCreated', 'NumberOfProducts', 'ProductAvailable', 'ProductName', 'ProductCodeNotSet';
		check 'ProductCode';
	}
	assertState sometimes after constraint 'ProductName'{
		productResult != null;
		productResult::available = true;
		productResult::name = "testProduct";
		productResult::code = 12345;
		
		productResult::code = null;
		
		check 'ProductCreated', 'NumberOfProducts', 'ProductAvailable', 'ProductName', 'ProductCodeNotSet';
		check 'ProductCode';
	}
	
	//action: setName operator: until
	assertState always until action NewProductActivity.setName{
		productResult::name = null;
		productResult::code = null;
		
		check 'ProductNameNotSet', 'ProductCodeNotSet';
	}
	assertState always until constraint 'ProductName'{
		productResult::name = null;
		productResult::code = null;
		
		check 'ProductNameNotSet', 'ProductCodeNotSet';
	}
	assertState always after action NewProductActivity.createProduct until action NewProductActivity.setName{
		productResult::name = null;
		productResult::code = null;
		
		check 'ProductNameNotSet', 'ProductCodeNotSet';
	}
	assertState always after constraint 'ProductCreated' until action NewProductActivity.setName{
		productResult::name = null;
		productResult::code = null;
		
		check 'ProductNameNotSet', 'ProductCodeNotSet';
	}
	assertState always after action NewProductActivity.createProduct until constraint 'ProductName'{
		productResult::name = null;
		productResult::code = null;
		
		check 'ProductNameNotSet', 'ProductCodeNotSet';
	}
	assertState always after constraint 'ProductCreated' until constraint 'ProductName'{
		productResult::name = null;
		productResult::code = null;
		
		check 'ProductNameNotSet', 'ProductCodeNotSet';
	}
	assertState eventually until action NewProductActivity.setName{
		productResult != null;
		productResult::available = true;
		productResult::name = null;
		productResult::code = null;
		
		check 'ProductCreated', 'NumberOfProducts', 'ProductAvailable', 'ProductNameNotSet', 'ProductCodeNotSet';
	}
	assertState eventually until constraint 'ProductName'{
		productResult != null;
		productResult::available = true;
		productResult::name = null;
		productResult::code = null;
		
		check 'ProductCreated', 'NumberOfProducts', 'ProductAvailable', 'ProductNameNotSet', 'ProductCodeNotSet';
	}
	assertState immediately until action NewProductActivity.setName{
		productResult != null;
		productResult::available = true;
		productResult::name = null;
		productResult::code = null;
		
		check 'ProductCreated', 'NumberOfProducts', 'ProductAvailable', 'ProductNameNotSet', 'ProductCodeNotSet';
	}
	assertState immediately until constraint 'ProductName'{
		productResult != null;
		productResult::available = true;
		productResult::name = null;
		productResult::code = null;
		
		check 'ProductCreated', 'NumberOfProducts', 'ProductAvailable', 'ProductNameNotSet', 'ProductCodeNotSet';
	}
	assertState sometimes until action NewProductActivity.setName{
		productResult != null;
		productResult::available = true;
		productResult::name = null;
		productResult::code = null;
		
		productResult = null;
		productResult::available = null;
		
		check 'ProductCreated', 'NumberOfProducts', 'ProductAvailable', 'ProductNameNotSet', 'ProductCodeNotSet';
		check 'ProductAvailableNotSet';
	}
	assertState sometimes until constraint 'ProductName'{
		productResult != null;
		productResult::available = true;
		productResult::name = null;
		productResult::code = null;
		
		productResult = null;
		productResult::available = null;
		
		check 'ProductCreated', 'NumberOfProducts', 'ProductAvailable', 'ProductNameNotSet', 'ProductCodeNotSet';
		check 'ProductAvailableNotSet';
	}
	
	//action: setCode operator: after
	assertState always after action NewProductActivity.setCode{
		productResult != null;
		productResult::available = true;
		productResult::name = "testProduct";
		productResult::code = 12345;
		
		check 'ProductCreated', 'NumberOfProducts', 'ProductAvailable', 'ProductName', 'ProductCode';
	}
	assertState always after constraint 'ProductCode'{
		productResult != null;
		productResult::available = true;
		productResult::name = "testProduct";
		productResult::code = 12345;
		
		check 'ProductCreated', 'NumberOfProducts', 'ProductAvailable', 'ProductName', 'ProductCode';
	}
	assertState eventually after action NewProductActivity.setCode{
		productResult != null;
		productResult::available = true;
		productResult::name = "testProduct";
		productResult::code = 12345;
		
		check 'ProductCreated', 'NumberOfProducts', 'ProductAvailable', 'ProductName', 'ProductCode';
	}
	assertState eventually after constraint 'ProductCode'{
		productResult != null;
		productResult::available = true;
		productResult::name = "testProduct";
		productResult::code = 12345;
		
		check 'ProductCreated', 'NumberOfProducts', 'ProductAvailable', 'ProductName', 'ProductCode';
	}
	assertState immediately after action NewProductActivity.setCode{
		productResult != null;
		productResult::available = true;
		productResult::name = "testProduct";
		productResult::code = 12345;
		
		check 'ProductCreated', 'NumberOfProducts', 'ProductAvailable', 'ProductName', 'ProductCode';
	}
	assertState immediately after constraint 'ProductCode'{
		productResult != null;
		productResult::available = true;
		productResult::name = "testProduct";
		productResult::code = 12345;
		
		check 'ProductCreated', 'NumberOfProducts', 'ProductAvailable', 'ProductName', 'ProductCode';
	}
	assertState sometimes after action NewProductActivity.setCode{
		productResult != null;
		productResult::available = true;
		productResult::name = "testProduct";
		productResult::code = 12345;
		
		check 'ProductCreated', 'NumberOfProducts', 'ProductAvailable', 'ProductName', 'ProductCode';
	}
	assertState sometimes after constraint 'ProductCode'{
		productResult != null;
		productResult::available = true;
		productResult::name = "testProduct";
		productResult::code = 12345;
		
		check 'ProductCreated', 'NumberOfProducts', 'ProductAvailable', 'ProductName', 'ProductCode';
	}
	
	//action: setCode operator: until
	assertState always until action NewProductActivity.setCode{
		productResult::code = null;
		check 'ProductCodeNotSet';
	}
	assertState always until constraint 'ProductCode'{
		productResult::code = null;
		check 'ProductCodeNotSet';
	}
	assertState always after action NewProductActivity.createProduct until action NewProductActivity.setCode{
		productResult::code = null;
		check 'ProductCodeNotSet';
	}
	assertState always after constraint 'ProductCreated' until action NewProductActivity.setCode{
		productResult::code = null;
		check 'ProductCodeNotSet';
	}
	assertState always after action NewProductActivity.createProduct until constraint 'ProductCode'{
		productResult::code = null;
		check 'ProductCodeNotSet';
	}
	assertState always after constraint 'ProductCreated' until constraint 'ProductCode'{
		productResult::code = null;
		check 'ProductCodeNotSet';
	}
	assertState eventually until action NewProductActivity.setCode{
		productResult != null;
		productResult::available = true;
		productResult::name = "testProduct";
		productResult::code = null;
		
		check 'ProductCreated', 'NumberOfProducts', 'ProductAvailable', 'ProductName', 'ProductCodeNotSet';
	}
	assertState eventually until constraint 'ProductCode'{
		productResult != null;
		productResult::available = true;
		productResult::name = "testProduct";
		productResult::code = null;
		
		check 'ProductCreated', 'NumberOfProducts', 'ProductAvailable', 'ProductName', 'ProductCodeNotSet';
	}
	assertState immediately until action NewProductActivity.setCode{
		productResult != null;
		productResult::available = true;
		productResult::name = "testProduct";
		productResult::code = null;
		
		check 'ProductCreated', 'NumberOfProducts', 'ProductAvailable', 'ProductName', 'ProductCodeNotSet';
	}
	assertState immediately until constraint 'ProductCode'{
		productResult != null;
		productResult::available = true;
		productResult::name = "testProduct";
		productResult::code = null;
		
		check 'ProductCreated', 'NumberOfProducts', 'ProductAvailable', 'ProductName', 'ProductCodeNotSet';
	}
	assertState sometimes until action NewProductActivity.setCode{
		productResult != null;
		productResult::available = true;
		productResult::name = "testProduct";
		productResult::code = null;
		
		productResult = null;
		productResult::available = null;
		productResult::name = null;
		
		check 'ProductCreated', 'NumberOfProducts', 'ProductAvailable', 'ProductName', 'ProductCodeNotSet';
		check 'ProductAvailableNotSet', 'ProductNameNotSet';
	}
	assertState sometimes until constraint 'ProductCode'{
		productResult != null;
		productResult::available = true;
		productResult::name = "testProduct";
		productResult::code = null;
		
		productResult = null;
		productResult::available = null;
		productResult::name = null;
		
		check 'ProductCreated', 'NumberOfProducts', 'ProductAvailable', 'ProductName', 'ProductCodeNotSet';
		check 'ProductAvailableNotSet', 'ProductNameNotSet';
	}
	
	finally{
		productResult != null;
		productResult::available = true;
		productResult::name = "testProduct";
		productResult::code = 12345;		
		
		check 'ProductCreated', 'NumberOfProducts', 'ProductAvailable', 'ProductName', 'ProductCode';
	}
}