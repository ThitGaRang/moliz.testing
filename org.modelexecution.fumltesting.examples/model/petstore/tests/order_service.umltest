import petstore.data.*
import petstore.logic.*

scenario TestData[
	object orderServiceTD: OrderService{}
	
	object customerTD: Customer{
		Customer.firstname='user'; 
		Customer.lastname='userLastName';
		Customer.email='user@test.com';
		Customer.login='user';
		Customer.password='password';
	}
	
	object cartTD: Cart{}
	
	object productTD: Product{
		Product.name = 'product';
		Product.description = 'description';
	}
	
	object itemTD: Item{
		Item.name='item';
		Item.description='description';
		Item.unitCost=10;
	}
	
	object anotherItemTD: Item{
		Item.name='anotherItem';
		Item.description='description';
		Item.unitCost=5;
	}
	
	object cartItemTD: CartItem{
		CartItem.quantity = 2;
	}
	
	link cart_customer { source cart_customer.cart=TestData.cartTD; target cart_customer.customer=TestData.customerTD; }
	link product_item { source product_item.item = TestData.itemTD; target product_item.product = TestData.productTD; }
	link cartItem_item { source cartItem_item.cartItem = TestData.cartItemTD; target cartItem_item.item = TestData.itemTD; }
	link cart_cartItem { source cart_cartItem.cart = TestData.cartTD; target cart_cartItem.cartItems = TestData.cartItemTD; }
]

test getCartTest activity OrderService.GetCart(OrderService.GetCart.customer=TestData.customerTD){
	finally{
		OrderService.GetCart.cart = TestData.cartTD;
	}
}

test setFoundItemTest activity OrderService.SetFoundCartItem(OrderService.SetFoundCartItem.cartItem=TestData.cartItemTD) 
	on TestData.orderServiceTD{
	finally{
		OrderService.SetFoundCartItem.cartItem::cartItem_item.item = TestData.itemTD;
	}
}

test createOrderLineTest activity OrderService.CreateOrderLine(OrderService.CreateOrderLine.item=TestData.itemTD, OrderService.CreateOrderLine.quantity=1){
	finally{
		OrderService.CreateOrderLine.orderLine::orderLine_item.item = TestData.itemTD;
	}
}

test createOrderLineFromCartItemTest activity OrderService.CreateOrderLineFromCartItem(OrderService.CreateOrderLineFromCartItem.cartItem=TestData.cartItemTD) on TestData.orderServiceTD{
	finally{
		OrderService.CreateOrderLineFromCartItem.orderLine::orderLine_item.item = TestData.itemTD;
	}
}

test confirmOrderTest activity OrderService.ConfirmOrder(OrderService.ConfirmOrder.customer=TestData.customerTD) on TestData.orderServiceTD{
	finally{
		OrderService.ConfirmOrder.order::order_customer.customer = TestData.customerTD;
	}
}

test getCartItemTest activity OrderService.GetCartItem(OrderService.GetCartItem.cart=TestData.cartTD, OrderService.GetCartItem.item=TestData.itemTD) on TestData.orderServiceTD{
	finally{
		OrderService.GetCartItem.cartItem = TestData.cartItemTD;
	}
}

test addItemToCartTest activity OrderService.AddItemToCart(OrderService.AddItemToCart.customer=TestData.customerTD, OrderService.AddItemToCart.item=TestData.anotherItemTD) on TestData.orderServiceTD{
	
}