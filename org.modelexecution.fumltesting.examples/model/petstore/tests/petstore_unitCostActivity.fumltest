import petstore.structure.*
import petstore.behavior.*

scenario TestData[
	object cart : Cart{}
	object product : Product{}
	object item : Item{unitCost = 100;}
	object cartItem : CartItem{quantity=5;}
	link cartItem_item{source cartItem=cartItem; target item=item;}
]

test unitCostTest activity UnitCostActivity on TestData.cartItem{
	var cartItem = getItem.^object;
	var item = getItem.result;
	var cost = getCost.result;
	
	assertOrder UnitCostActivity.init, UnitCostActivity.unitCostSelf, UnitCostActivity.getItem, 
		UnitCostActivity.getCost;
	
	assertState always before UnitCostActivity.unitCostSelf{cartItem = null;}
	assertState exactly before UnitCostActivity.unitCostSelf{cartItem = null;}
	assertState always after UnitCostActivity.unitCostSelf{cartItem != null;}
	assertState exactly after UnitCostActivity.unitCostSelf{cartItem != null;}
	
	assertState always before UnitCostActivity.getItem{item = null;}
	assertState exactly before UnitCostActivity.getItem{item = null;}
	assertState always after UnitCostActivity.getItem{item::unitCost = 100;}
	assertState exactly after UnitCostActivity.getItem{item::unitCost = 100;}
	
	assertState always before UnitCostActivity.getCost{cost = null;}
	assertState exactly before UnitCostActivity.getCost{cost = null;}
	assertState always after UnitCostActivity.getCost{cost = 100;}
	assertState exactly after UnitCostActivity.getCost{cost = 100;}
}