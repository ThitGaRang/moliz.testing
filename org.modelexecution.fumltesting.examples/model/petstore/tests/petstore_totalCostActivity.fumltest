import petstore.structure.*
import petstore.behavior.*

scenario TestData[
	object cart : Cart{}
	object product : Product{}
	object item : Item{unitCost = 100;}
	object cartItem : CartItem{quantity=5;}
	link cartItem_item{source cartItem=cartItem; target item=item;}
]

test totalCostTest activity TotalCostActivity on TestData.cartItem{
	var cost = totalCost;
	var cartItem = totalCostSelf.result;
	var unitCost = getUnitCost.unitCost;
	var quantity = getQuantity.result;
	
	assertOrder TotalCostActivity.initial, TotalCostActivity.totalCostSelf, *, TotalCostActivity.calculateTotalCost;
	
	assertState always before action TotalCostActivity.totalCostSelf{cartItem = null;}
	assertState next before action TotalCostActivity.totalCostSelf{cartItem = null;}
	assertState always after action TotalCostActivity.totalCostSelf{cartItem != null;}
	assertState next after action TotalCostActivity.totalCostSelf{cartItem != null;}
	
	assertState always before action TotalCostActivity.getUnitCost{cartItem != null; unitCost = 100;}
	assertState next before action TotalCostActivity.getUnitCost{cartItem != null; unitCost = 100;}
	assertState always after action TotalCostActivity.getUnitCost{cartItem != null; unitCost = 100;}
	assertState next after action TotalCostActivity.getUnitCost{cartItem != null; unitCost = 100;}
	
	assertState always before action TotalCostActivity.getQuantity{cartItem != null; quantity = null;}
	assertState next before action TotalCostActivity.getQuantity{cartItem != null; quantity = null;}
	assertState always after action TotalCostActivity.getQuantity{cartItem != null; quantity = 5;}
	assertState next after action TotalCostActivity.getQuantity{cartItem != null; quantity = 5;}
	
	assertState always after action TotalCostActivity.calculateTotalCost{unitCost = 100; quantity = 5; cost = 500;}
	assertState next after action TotalCostActivity.calculateTotalCost{unitCost = 100; quantity = 5; cost = 500;}
}