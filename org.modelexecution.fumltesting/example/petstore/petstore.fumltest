import Model.structure.*
import Model.behavior.*
import Model.scenarios.*

scenario TestData[
	object cart : Cart{}
	object product : Product{}
	object item : Item{unitCost = 100;}
	object item2 : Item{unitCost = 5;}
	object cartItem : CartItem{quantity=5;}
	link cartItem_item{source cartItem=cartItem; target item=item;}
]

test addCartItemTest activity AddCartItemActivity(item=TestData.item, quantity=100) on TestData.cart{
	var cartItem = initCartItem.result;
	
	assertOrder AddCartItemActivity.init, AddCartItemActivity.self, AddCartItemActivity.createCartItem, 
		AddCartItemActivity.initCartItem, AddCartItemActivity.addCartItem, AddCartItemActivity.final;
		
	assertState always after AddCartItemActivity.addCartItem{
		cartItem::item = TestData.item;
	}
}

test addSeveralCartItemsTest activity AddSeveralCartItemsActivity on TestData.cart{
	var cart = selfA.result;
	var item = createItemA.result;
	assertOrder AddSeveralCartItemsActivity.init, AddSeveralCartItemsActivity.selfA, AddSeveralCartItemsActivity.createItemA, AddSeveralCartItemsActivity.quantityA,
		  AddSeveralCartItemsActivity.addItemA, AddSeveralCartItemsActivity.createItemB, AddSeveralCartItemsActivity.selfB, 
		  AddSeveralCartItemsActivity.quantityB, AddSeveralCartItemsActivity.addItemB, AddSeveralCartItemsActivity.final;
		  
	assertState always after AddSeveralCartItemsActivity.createItemB{
		item != TestData.item2;
		cart::items includes TestData.cartItem;
	}
}

test catalogItemTest activity CatalogItemActivity on TestData.cartItem{
	var cartItem = self.result;
	var item = catalogItem;
	
	assertOrder CatalogItemActivity.init, CatalogItemActivity.self, CatalogItemActivity.geItem, CatalogItemActivity.final;
	
	assertState always before CatalogItemActivity.self{
		cartItem = null;
	}
	assertState exactly before CatalogItemActivity.self{
		cartItem = null;
	}
	assertState always after CatalogItemActivity.self{
		cartItem != null;
	}
	assertState exactly after CatalogItemActivity.self{
		cartItem != null;
	}
	
	assertState always before CatalogItemActivity.geItem{
		cartItem != null;
		item = null;
	}
	assertState exactly before CatalogItemActivity.geItem{
		cartItem != null;
		item = null;
	}
	assertState always after CatalogItemActivity.geItem{
		cartItem != null;		
		item != null;
	}
	assertState exactly after CatalogItemActivity.geItem{
		cartItem != null;
		item != null;
	}
}

test newCartItemTest activity NewCartItemActivity(catalogItem=TestData.item, quantity=10){
	var cartItem = cartItem;
	
	assertOrder NewCartItemActivity.init, NewCartItemActivity.createCartItem, 
		NewCartItemActivity.setItem, NewCartItemActivity.setQuantity, NewCartItemActivity.final;
	
	assertState always before NewCartItemActivity.createCartItem{
		cartItem = null;
	}
	assertState exactly before NewCartItemActivity.createCartItem{
		cartItem = null;
	}
	assertState always after NewCartItemActivity.createCartItem{
		cartItem != null;
	}
	assertState exactly after NewCartItemActivity.createCartItem{
		cartItem != null;
	}
	
	assertState always before NewCartItemActivity.setItem{
		cartItem::item = null;
	}
	assertState exactly before NewCartItemActivity.setItem{
		cartItem::item = null;
	}
	assertState always after NewCartItemActivity.setItem{
		cartItem::item != null;
	}
	assertState exactly after NewCartItemActivity.setItem{
		cartItem::item != null;
	}
}

test newItemTest activity NewItemActivity(product=TestData.product){
	var item = item;
	
	assertOrder NewItemActivity.init, NewItemActivity.createItem, NewItemActivity.setProduct, NewItemActivity.final;
	
	assertState always before NewItemActivity.createItem{
		item = null;
	}
	assertState exactly before NewItemActivity.createItem{
		item = null;
	}	
	assertState always after NewItemActivity.createItem{
		item != null;
	}
	assertState exactly after NewItemActivity.createItem{
		item != null;
	}
	
	assertState always before NewItemActivity.setProduct{
		item::product = null;
	}
	assertState exactly before NewItemActivity.setProduct{
		item::product = null;
	}
	assertState always after NewItemActivity.setProduct{
		item::product = TestData.product;
	}
	assertState exactly after NewItemActivity.setProduct{
		item::product = TestData.product;
	}
}

test newProductTest activity NewProductActivity(mnemonic="x220", name="Lenovo Notebook x220")	on TestData.product{	
	var product = product;	
	
	assertOrder NewProductActivity.init, NewProductActivity.createProduct, 
		NewProductActivity.setMnemonic, NewProductActivity.setName, NewProductActivity.final;
	
	assertState always before NewProductActivity.createProduct{product = null;}
	assertState exactly before NewProductActivity.createProduct{product = null;}
	assertState always after NewProductActivity.createProduct{product != null;}
	assertState exactly after NewProductActivity.createProduct{product != null;}
		
	assertState always after NewProductActivity.setMnemonic{product::mnemonic = "x220";}	
	assertState exactly after NewProductActivity.setMnemonic{product::mnemonic = "x220";}
	assertState always before NewProductActivity.setMnemonic{product::mnemonic = null;}
	assertState exactly before NewProductActivity.setMnemonic{product::mnemonic = null;}	
	
	assertState always after NewProductActivity.setName{product::name = "Lenovo Notebook x220";}
	assertState exactly after NewProductActivity.setName{product::name = "Lenovo Notebook x220";}		
	assertState always before NewProductActivity.setName{product::name = null;}	
	assertState exactly before NewProductActivity.setName{product::name = null;}
}

test totalCostTest activity TotalCostActivity on TestData.cartItem{
	var cost = totalCost;
	var cartItem = self.result;
	var unitCost = getUnitCost.unitCost;
	var quantity = getQuantity.result;
	
	assertOrder TotalCostActivity.initial, TotalCostActivity.self, TotalCostActivity.getUnitCost, 
		TotalCostActivity.getQuantity, TotalCostActivity.calculateTotalCost, TotalCostActivity.final;
	
	assertState always before TotalCostActivity.self{
		cartItem = null;
	}
	assertState exactly before TotalCostActivity.self{
		cartItem = null;
	}
	assertState always after TotalCostActivity.self{
		cartItem != null;
	}
	assertState exactly after TotalCostActivity.self{
		cartItem != null;
	}
	
	assertState always before TotalCostActivity.getUnitCost{
		cartItem != null;
		unitCost = 100;
	}
	assertState exactly before TotalCostActivity.getUnitCost{
		cartItem != null;
		unitCost = 100;
	}
	assertState always after TotalCostActivity.getUnitCost{
		cartItem != null;
		unitCost != null;
		unitCost = 100;
	}
	assertState exactly after TotalCostActivity.getUnitCost{
		cartItem != null;
		unitCost != null;
		unitCost = 100;
	}
	
	assertState always before TotalCostActivity.getQuantity{
		cartItem != null;
		quantity = null;
	}
	assertState exactly before TotalCostActivity.getQuantity{
		cartItem != null;
		quantity = null;
	}
	assertState always after TotalCostActivity.getQuantity{
		cartItem != null;
		quantity != null;
		quantity = 5;
	}
	assertState exactly after TotalCostActivity.getQuantity{
		cartItem != null;
		quantity != null;
		quantity = 5;
	}
	
	assertState always before TotalCostActivity.calculateTotalCost{
		cartItem != null;
		unitCost != null;
		unitCost = 100;
		quantity = 5;
		cost = null;
	}
	assertState exactly before TotalCostActivity.calculateTotalCost{
		cartItem != null;
		unitCost != null;
		unitCost = 100;
		quantity = 5;
		cost = null;
	}
	assertState always after TotalCostActivity.calculateTotalCost{
		cartItem != null;
		unitCost != null;
		unitCost = 100;
		quantity = 5;
		cost != null;
		cost = 500;
	}
	assertState exactly after TotalCostActivity.calculateTotalCost{
		cartItem != null;
		unitCost != null;
		unitCost = 100;
		quantity = 5;
		cost != null;
		cost = 500;
	}
}

test unitCostTest activity UnitCostActivity on TestData.cartItem{
	var cartItem = getItem.^object;
	var item = getItem.result;
	var cost = getCost.result;
	
	assertOrder UnitCostActivity.init, UnitCostActivity.self, UnitCostActivity.getItem, 
		UnitCostActivity.getCost, UnitCostActivity.final;
	
	assertState always before UnitCostActivity.self{
		cartItem = null;
	}
	assertState exactly before UnitCostActivity.self{
		cartItem = null;
	}
	assertState always after UnitCostActivity.self{
		cartItem != null; 
	}
	assertState exactly after UnitCostActivity.self{
		cartItem != null;
	}
	
	assertState always before UnitCostActivity.getItem{
		item = null;
	}
	assertState exactly before UnitCostActivity.getItem{
		item = null;
	}
	assertState always after UnitCostActivity.getItem{
		item != null;
		item::unitCost = 100;
	}
	assertState exactly after UnitCostActivity.getItem{
		item != null;
		item::unitCost = 100;
	}
	
	assertState always before UnitCostActivity.getCost{
		cost = null;
	}
	assertState exactly before UnitCostActivity.getCost{
		cost = null;
	}
	assertState always after UnitCostActivity.getCost{
		cost != null;
		cost = 100;
	}
	assertState exactly after UnitCostActivity.getCost{
		cost != null;
		cost = 100;
	}
}