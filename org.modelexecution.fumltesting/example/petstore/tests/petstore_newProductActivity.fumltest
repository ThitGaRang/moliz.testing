import petstore.structure.*
import petstore.behavior.*

scenario TestData[
	object cart : Cart{}
	object product : Product{}
	object item : Item{unitCost = 100;}
	object cartItem : CartItem{quantity=5;}
	link cartItem_item{source cartItem=cartItem; target item=item;}
]

test newProductTest activity NewProductActivity(mnemonic="x220", name="Lenovo Notebook x220")	on TestData.product{	
	checkInvariants[noProducts];
	var product = product;
	
	assertOrder NewProductActivity.init, NewProductActivity.createProduct, 
		NewProductActivity.setMnemonic, NewProductActivity.setName, NewProductActivity.final;
	
	assertState always before NewProductActivity.createProduct{product = null;}
	assertState exactly before NewProductActivity.createProduct{
		checkInvariants[noProduct];
		product = null;
	}
	assertState always after NewProductActivity.createProduct{
		checkInvariants[singleProduct];
		product != null;
	}
	assertState exactly after NewProductActivity.createProduct{product != null;}
		
	assertState always after NewProductActivity.setMnemonic{
		checkInvariants[singleProduct, productMnemonic];
		product::mnemonic = "x220";
	}	
	assertState exactly after NewProductActivity.setMnemonic{
		checkInvariants[singleProduct, productMnemonic];
		product::mnemonic = "x220";
	}
	assertState always before NewProductActivity.setMnemonic{product::mnemonic = null;}
	assertState exactly before NewProductActivity.setMnemonic{product::mnemonic = null;}	
	
	assertState always after NewProductActivity.setName{product::name = "Lenovo Notebook x220";}
	assertState exactly after NewProductActivity.setName{product::name = "Lenovo Notebook x220";
	}		
	assertState always before NewProductActivity.setName{product::name = null;}	
	assertState exactly before NewProductActivity.setName{product::name = null;}
	
	finally {product::name = "Lenovo Notebook x220";}
}