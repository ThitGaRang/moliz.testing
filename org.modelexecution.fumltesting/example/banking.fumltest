import model.*

scenario TestData[	
	object accountTO : Account{
		attribute Account.number = 320;
		attribute Account.balance = 800;
	}
	object accountTOUpdated : Account{
		attribute Account.number = 320;
		attribute Account.balance = 500;
	}
	object cardTO : Card{
		attribute Card.number = 123456;
		attribute Card.pin = 1234;
		link Card.account = accountTO;		
	}
	object atmTO : ATM{}
]

test AccountWithdrawActivityTest activity AccountWithdrawActivity(AccountWithdrawActivity.amount=300) on TestData.accountTO{
	var account = AccountWithdrawActivity.self.result;
	var successful = AccountWithdrawActivity.successful;
	
	assertOrder AccountWithdrawActivity.self, AccountWithdrawActivity.readBalance, AccountWithdrawActivity.subtract, 
		AccountWithdrawActivity.setBalance, AccountWithdrawActivity.successTrue;
	
	assertState always before AccountWithdrawActivity.subtract{
		account -> Account.number = 320;
		account -> Account.balance = 800;
	}
	
	assertState always after AccountWithdrawActivity.successTrue{
		account -> Account.number = 320;
		account -> Account.balance = 500;
		successful = true;
	}
}
test ATMwithdrawActivityTest activity ATMwithdrawActivity(ATMwithdrawActivity.card=TestData.cardTO, ATMwithdrawActivity.pin=1234, ATMwithdrawActivity.amount=300) on TestData.atmTO{
	var card = ATMwithdrawActivity.card;
	var successul = ATMwithdrawActivity.successful;
	
	assertOrder ATMwithdrawActivity.self, ATMwithdrawActivity.call_validatePin, 
		ATMwithdrawActivity.readAccount, ATMwithdrawActivity.call_withdraw, ATMwithdrawActivity.successTrue;
		
	assertState always after ATMwithdrawActivity.call_withdraw{
		card -> Card.account = TestData.accountTOUpdated;
		successul = true;
	}
}