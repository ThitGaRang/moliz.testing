grammar org.modelexecution.fumltesting.TestLang with org.eclipse.xtext.xbase.Xbase
import "http://www.eclipse.org/uml2/4.0.0/UML" as uml
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
generate testLang "http://www.modelexecution.org/fumltesting/TestLang"

TestSuite:
	(imports+=Import)*
	(scenarios+=Scenario)*
	(tests+=TestCase)*
;

Import:	'import' importedNamespace=QualifiedNameWithWildCard;
QualifiedNameWithWildCard: QualifiedName '.*'?;

VarDeclaration:
	'var' name=ID '=' ref=[uml::ObjectNode|QualifiedName] ';'
;

TestCase:
	'test' name=ID 'activity' activityUnderTest=[uml::Activity|QualifiedName] ('(' inputs+=ActivityInput (',' inputs+=ActivityInput)* ')')? ('on' contextObject=[ObjectSpecification|QualifiedName])? '{'
		(variables+=VarDeclaration)*
		(assertions+=Assertion)*
	'}'
;

ActivityInput:
	parameter=[uml::ActivityParameterNode|QualifiedName] '=' value=Value
;

Value:
	SimpleValue | ObjectValue
;

SimpleValue:
	value=XLiteral
;
ObjectValue:
	value=[ObjectSpecification|QualifiedName]
;

Scenario:
	'scenario' name=ID '['
		(objects+=ObjectSpecification)*
	']'
;

ObjectSpecification:
	'object' name=ID ':' type=[uml::Class|QualifiedName] '{'
		(features+=Feature)*
	'}'
;

Feature:
	Attribute | Link
;

Attribute:
	'attribute' att=[uml::Property|QualifiedName] '=' value=Value ';'
;

Link:
	SingleValueLink | MultiValueLink
;

SingleValueLink:
	'link' link=[uml::Property|QualifiedName] '=' value=[ObjectSpecification|QualifiedName] ';' 
;

MultiValueLink:
	'link' link=[uml::Property] 'add' values+=[ObjectSpecification|QualifiedName] (',' values+=[ObjectSpecification])* ';'
;

Assertion:
	OrderExecutionAssertion | StateAssertion
;

StateAssertion:
	('assertState' temporalQuantifier=TemporalQuantifier temporalOperator=TemporalOperator) 
		referenceAction=[uml::Action|QualifiedName] ('until' untilAction=[uml::Action|QualifiedName])? '{' expressions+=StateExpression+ '}'
;

StateExpression:
	ObjectStateExpression | PropertyStateExpression
;

ObjectStateExpression:
	pin=[VarDeclaration] operator=ArithmeticOperator value=Value ';'
;

PropertyStateExpression:
	pin=[VarDeclaration] '->' property=[uml::Property|QualifiedName] operator=ArithmeticOperator value=Value ';'
;

OrderExecutionAssertion:
	'assertOrder' order=NodeOrder ';' 
;

NodeOrder:
	nodes+=NodeSpecification (',' nodes+=NodeSpecification)*
;

NodeSpecification:
	node=[uml::ActivityNode|QualifiedName](':'size=XNumberLiteral)?('('subOrder=NodeOrder')')? | joker='*' | joker='_'
;

enum ArithmeticOperator:
	equal='='|not_equal='!='|greater='>'|smaller='<'|greater_equal='>='|smaller_equal='<='
;

enum TemporalOperator:
	after|before
;

enum TemporalQuantifier:
	exactly|always
;