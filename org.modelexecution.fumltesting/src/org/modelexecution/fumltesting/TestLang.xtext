grammar org.modelexecution.fumltesting.TestLang with org.eclipse.xtext.xbase.Xbase

import "http://www.eclipse.org/uml2/4.0.0/UML" as uml
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
generate testLang "http://www.modelexecution.org/fumltesting/TestLang"

TestSuite:
	(imports+=Import)* (scenarios+=Scenario)* (tests+=TestCase)*;

Import:
	'import' importedNamespace=QualifiedNameWithWildcard;

TestCase:
	'test' name=ID 'activity' activityUnderTest=[uml::Activity|QualifiedName] ('(' inputs+=ActivityInput (','
	inputs+=ActivityInput)* ')')? ('on' contextObject=[ObjectSpecification|QualifiedName])? '{' ('initialize' '['
	(initScenarios+=[Scenario]) (',' initScenarios+=[Scenario])* ']' ';')?
	(assertions+=Assertion)* '}';

ActivityInput:
	parameter=[uml::ActivityParameterNode|QualifiedName] '=' value=Value;

Value:
	SimpleValue | ObjectValue;

SimpleValue:
	value=XLiteral;

ObjectValue:
	value=[ObjectSpecification|QualifiedName];

Scenario:
	'scenario' name=ID '[' (objects+=ObjectSpecification)* (links+=Link)* ']';

ObjectSpecification:
	'object' name=ID ':' type=[uml::Class|QualifiedName] '{' (attributes+=Attribute)* '}';

Attribute:
	att=[uml::Property|QualifiedName] '=' value=Value ';';

Link:
	'link' assoc=[uml::Association|QualifiedName] '{' 'source' sourceProperty=[uml::Property|QualifiedName] '='
	sourceValue=[ObjectSpecification|QualifiedName] ';' 'target' targetProperty=[uml::Property|QualifiedName] '='
	targetValue=[ObjectSpecification|QualifiedName] ';' '}';

Assertion:
	OrderAssertion | StateAssertion | FinallyStateAssertion;

StateAssertion:
	'assertState' quantifier=TemporalQuantifier operator=TemporalOperator referencePoint=ReferencePoint ('until'
	untilPoint=ReferencePoint)? '{' (checks+=Check)* '}';

ReferencePoint:
	ActionReferencePoint | ConstraintReferencePoint;

ActionReferencePoint:
	'action' action=[uml::Action|QualifiedName];

ConstraintReferencePoint:
	'constraint' constraintName=XStringLiteral;

FinallyStateAssertion:
	'finally' '{' {FinallyStateAssertion} (checks+=Check)* '}';

Check:
	ConstraintCheck | StateExpression;

ConstraintCheck:
	'check' constraintNames+=XStringLiteral (',' constraintNames+=XStringLiteral)* ('on'
	object=[uml::ObjectNode|QualifiedName])? ';';

StateExpression:
	ObjectStateExpression | PropertyStateExpression;

ObjectStateExpression:
	pin=[uml::ObjectNode|QualifiedName] operator=ArithmeticOperator value=Value ';';

PropertyStateExpression:
	pin=[uml::ObjectNode|QualifiedName] '::' property=[uml::Property|QualifiedName] operator=ArithmeticOperator value=Value ';';

OrderAssertion:
	'assertOrder' order=NodeOrder ';';

NodeOrder:
	nodes+=NodeSpecification (',' nodes+=NodeSpecification)*;

NodeSpecification:
	node=[uml::ActivityNode|QualifiedName] (':' size=XNumberLiteral)? ('(' subOrder=NodeOrder ')')? | joker='*' |
	joker='_';

enum ArithmeticOperator:
	equal='=' | not_equal='!=' | greater='>' | smaller='<' | greater_equal='>=' | smaller_equal='<=' |
	includes='includes' | excludes='excludes';

enum TemporalOperator:
	after | until;

enum TemporalQuantifier:
	always | sometimes | eventually | immediately;