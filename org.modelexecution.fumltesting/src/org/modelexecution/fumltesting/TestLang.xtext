grammar org.modelexecution.fumltesting.TestLang with org.eclipse.xtext.xbase.Xbase
import "http://www.eclipse.org/uml2/4.0.0/UML" as uml
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
generate testLang "http://www.modelexecution.org/fumltesting/TestLang"

TestSuite:
	(imports+=Import)*
	(scenarios+=Scenario)*
	(tests+=TestCase)*
;

Import:	'import' importedNamespace=QualifiedNameWithWildCard;
QualifiedNameWithWildCard: QualifiedName '.*'?;

VarDeclaration:
	'var' name=ID '=' ref=[uml::ObjectNode|QualifiedName] ';'
;

TestCase:
	'test' name=ID 'activity' activityUnderTest=[uml::Activity|QualifiedName] ('(' inputs+=ActivityInput (',' inputs+=ActivityInput)* ')')? 
	('on' contextObject=[ObjectSpecification|QualifiedName])? '{'
		(variables+=VarDeclaration)*
		(assertions+=Assertion)*
	'}'
;

ActivityInput: parameter=[uml::ActivityParameterNode|QualifiedName] '=' value=Value;

Value: SimpleValue|ObjectValue;

SimpleValue: value=XLiteral;

ObjectValue: value=[ObjectSpecification|QualifiedName];

Scenario:
	'scenario' name=ID '['
		(objects+=ObjectSpecification)*
		(links+=Link)*
	']'
;

ObjectSpecification:
	'object' name=ID ':' type=[uml::Class|QualifiedName] '{'
		(attributes+=Attribute)*
	'}'
;

Attribute: att=[uml::Property|QualifiedName] '=' value=Value ';';

Link:
	'link' assoc=[uml::Association|QualifiedName] '{' 
		sourceProperty=[uml::Property|QualifiedName] '=' sourceValue=[ObjectSpecification|QualifiedName] ';'
		targetProperty=[uml::Property|QualifiedName] '=' targetValue=[ObjectSpecification|QualifiedName] ';'
	'}' 
;

Assertion: OrderAssertion|StateAssertion;

StateAssertion:
	('assertState' temporalQuantifier=TemporalQuantifier temporalOperator=TemporalOperator) 
		referenceAction=[uml::Action|QualifiedName] ('until' untilAction=[uml::Action|QualifiedName])? '{' expressions+=StateExpression+ '}'
;

StateExpression: ObjectStateExpression|PropertyStateExpression;

ObjectStateExpression:
	pin=[VarDeclaration] operator=ArithmeticOperator value=Value ';'
;

PropertyStateExpression:
	pin=[VarDeclaration] '::' property=[uml::Property|QualifiedName] operator=ArithmeticOperator value=Value ';'
;

OrderAssertion: 'assertOrder' order=NodeOrder ';';

NodeOrder: nodes+=NodeSpecification (',' nodes+=NodeSpecification)*;

NodeSpecification:
	node=[uml::ActivityNode|QualifiedName](':'size=XNumberLiteral)?('('subOrder=NodeOrder')')? | joker='*' | joker='_'
;

enum ArithmeticOperator: equal='='|not_equal='!='|greater='>'|smaller='<'|greater_equal='>='|smaller_equal='<=';
enum TemporalOperator: after|before;
enum TemporalQuantifier: exactly|always;