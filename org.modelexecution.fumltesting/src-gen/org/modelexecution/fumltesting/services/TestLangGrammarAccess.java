/*
* generated by Xtext
*/
package org.modelexecution.fumltesting.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.xbase.services.XbaseGrammarAccess;
import org.eclipse.xtext.xbase.services.XtypeGrammarAccess;

@Singleton
public class TestLangGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class TestSuiteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TestSuite");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cImportsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cImportsImportParserRuleCall_0_0 = (RuleCall)cImportsAssignment_0.eContents().get(0);
		private final Assignment cScenariosAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cScenariosScenarioParserRuleCall_1_0 = (RuleCall)cScenariosAssignment_1.eContents().get(0);
		private final Assignment cTestsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTestsTestCaseParserRuleCall_2_0 = (RuleCall)cTestsAssignment_2.eContents().get(0);
		
		//TestSuite:
		//	imports+=Import* scenarios+=Scenario* tests+=TestCase*;
		public ParserRule getRule() { return rule; }

		//imports+=Import* scenarios+=Scenario* tests+=TestCase*
		public Group getGroup() { return cGroup; }

		//imports+=Import*
		public Assignment getImportsAssignment_0() { return cImportsAssignment_0; }

		//Import
		public RuleCall getImportsImportParserRuleCall_0_0() { return cImportsImportParserRuleCall_0_0; }

		//scenarios+=Scenario*
		public Assignment getScenariosAssignment_1() { return cScenariosAssignment_1; }

		//Scenario
		public RuleCall getScenariosScenarioParserRuleCall_1_0() { return cScenariosScenarioParserRuleCall_1_0; }

		//tests+=TestCase*
		public Assignment getTestsAssignment_2() { return cTestsAssignment_2; }

		//TestCase
		public RuleCall getTestsTestCaseParserRuleCall_2_0() { return cTestsTestCaseParserRuleCall_2_0; }
	}

	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0 = (RuleCall)cImportedNamespaceAssignment_1.eContents().get(0);
		
		//Import:
		//	"import" importedNamespace=QualifiedNameWithWildcard;
		public ParserRule getRule() { return rule; }

		//"import" importedNamespace=QualifiedNameWithWildcard
		public Group getGroup() { return cGroup; }

		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//importedNamespace=QualifiedNameWithWildcard
		public Assignment getImportedNamespaceAssignment_1() { return cImportedNamespaceAssignment_1; }

		//QualifiedNameWithWildcard
		public RuleCall getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0() { return cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0; }
	}

	public class VarDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VarDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVarKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRefAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cRefObjectNodeCrossReference_3_0 = (CrossReference)cRefAssignment_3.eContents().get(0);
		private final RuleCall cRefObjectNodeQualifiedNameParserRuleCall_3_0_1 = (RuleCall)cRefObjectNodeCrossReference_3_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//VarDeclaration:
		//	"var" name=ID "=" ref=[uml::ObjectNode|QualifiedName] ";";
		public ParserRule getRule() { return rule; }

		//"var" name=ID "=" ref=[uml::ObjectNode|QualifiedName] ";"
		public Group getGroup() { return cGroup; }

		//"var"
		public Keyword getVarKeyword_0() { return cVarKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//ref=[uml::ObjectNode|QualifiedName]
		public Assignment getRefAssignment_3() { return cRefAssignment_3; }

		//[uml::ObjectNode|QualifiedName]
		public CrossReference getRefObjectNodeCrossReference_3_0() { return cRefObjectNodeCrossReference_3_0; }

		//QualifiedName
		public RuleCall getRefObjectNodeQualifiedNameParserRuleCall_3_0_1() { return cRefObjectNodeQualifiedNameParserRuleCall_3_0_1; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class TestCaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TestCase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTestKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cActivityKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cActivityUnderTestAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cActivityUnderTestActivityCrossReference_3_0 = (CrossReference)cActivityUnderTestAssignment_3.eContents().get(0);
		private final RuleCall cActivityUnderTestActivityQualifiedNameParserRuleCall_3_0_1 = (RuleCall)cActivityUnderTestActivityCrossReference_3_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cInputsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cInputsActivityInputParserRuleCall_4_1_0 = (RuleCall)cInputsAssignment_4_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cCommaKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cInputsAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cInputsActivityInputParserRuleCall_4_2_1_0 = (RuleCall)cInputsAssignment_4_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cOnKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cContextObjectAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final CrossReference cContextObjectObjectSpecificationCrossReference_5_1_0 = (CrossReference)cContextObjectAssignment_5_1.eContents().get(0);
		private final RuleCall cContextObjectObjectSpecificationQualifiedNameParserRuleCall_5_1_0_1 = (RuleCall)cContextObjectObjectSpecificationCrossReference_5_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cInitializeKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Assignment cInitScenariosAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final CrossReference cInitScenariosScenarioCrossReference_7_2_0 = (CrossReference)cInitScenariosAssignment_7_2.eContents().get(0);
		private final RuleCall cInitScenariosScenarioIDTerminalRuleCall_7_2_0_1 = (RuleCall)cInitScenariosScenarioCrossReference_7_2_0.eContents().get(1);
		private final Group cGroup_7_3 = (Group)cGroup_7.eContents().get(3);
		private final Keyword cCommaKeyword_7_3_0 = (Keyword)cGroup_7_3.eContents().get(0);
		private final Assignment cInitScenariosAssignment_7_3_1 = (Assignment)cGroup_7_3.eContents().get(1);
		private final CrossReference cInitScenariosScenarioCrossReference_7_3_1_0 = (CrossReference)cInitScenariosAssignment_7_3_1.eContents().get(0);
		private final RuleCall cInitScenariosScenarioIDTerminalRuleCall_7_3_1_0_1 = (RuleCall)cInitScenariosScenarioCrossReference_7_3_1_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_7_4 = (Keyword)cGroup_7.eContents().get(4);
		private final Keyword cSemicolonKeyword_7_5 = (Keyword)cGroup_7.eContents().get(5);
		private final Assignment cVariablesAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cVariablesVarDeclarationParserRuleCall_8_0 = (RuleCall)cVariablesAssignment_8.eContents().get(0);
		private final Assignment cAssertionsAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cAssertionsAssertionParserRuleCall_9_0 = (RuleCall)cAssertionsAssignment_9.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//TestCase:
		//	"test" name=ID "activity" activityUnderTest=[uml::Activity|QualifiedName] ("(" inputs+=ActivityInput (","
		//	inputs+=ActivityInput)* ")")? ("on" contextObject=[ObjectSpecification|QualifiedName])? "{" ("initialize" "["
		//	initScenarios+=[Scenario] ("," initScenarios+=[Scenario])* "]" ";")? variables+=VarDeclaration*
		//	assertions+=Assertion* "}";
		public ParserRule getRule() { return rule; }

		//"test" name=ID "activity" activityUnderTest=[uml::Activity|QualifiedName] ("(" inputs+=ActivityInput (","
		//inputs+=ActivityInput)* ")")? ("on" contextObject=[ObjectSpecification|QualifiedName])? "{" ("initialize" "["
		//initScenarios+=[Scenario] ("," initScenarios+=[Scenario])* "]" ";")? variables+=VarDeclaration* assertions+=Assertion*
		//"}"
		public Group getGroup() { return cGroup; }

		//"test"
		public Keyword getTestKeyword_0() { return cTestKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"activity"
		public Keyword getActivityKeyword_2() { return cActivityKeyword_2; }

		//activityUnderTest=[uml::Activity|QualifiedName]
		public Assignment getActivityUnderTestAssignment_3() { return cActivityUnderTestAssignment_3; }

		//[uml::Activity|QualifiedName]
		public CrossReference getActivityUnderTestActivityCrossReference_3_0() { return cActivityUnderTestActivityCrossReference_3_0; }

		//QualifiedName
		public RuleCall getActivityUnderTestActivityQualifiedNameParserRuleCall_3_0_1() { return cActivityUnderTestActivityQualifiedNameParserRuleCall_3_0_1; }

		//("(" inputs+=ActivityInput ("," inputs+=ActivityInput)* ")")?
		public Group getGroup_4() { return cGroup_4; }

		//"("
		public Keyword getLeftParenthesisKeyword_4_0() { return cLeftParenthesisKeyword_4_0; }

		//inputs+=ActivityInput
		public Assignment getInputsAssignment_4_1() { return cInputsAssignment_4_1; }

		//ActivityInput
		public RuleCall getInputsActivityInputParserRuleCall_4_1_0() { return cInputsActivityInputParserRuleCall_4_1_0; }

		//("," inputs+=ActivityInput)*
		public Group getGroup_4_2() { return cGroup_4_2; }

		//","
		public Keyword getCommaKeyword_4_2_0() { return cCommaKeyword_4_2_0; }

		//inputs+=ActivityInput
		public Assignment getInputsAssignment_4_2_1() { return cInputsAssignment_4_2_1; }

		//ActivityInput
		public RuleCall getInputsActivityInputParserRuleCall_4_2_1_0() { return cInputsActivityInputParserRuleCall_4_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4_3() { return cRightParenthesisKeyword_4_3; }

		//("on" contextObject=[ObjectSpecification|QualifiedName])?
		public Group getGroup_5() { return cGroup_5; }

		//"on"
		public Keyword getOnKeyword_5_0() { return cOnKeyword_5_0; }

		//contextObject=[ObjectSpecification|QualifiedName]
		public Assignment getContextObjectAssignment_5_1() { return cContextObjectAssignment_5_1; }

		//[ObjectSpecification|QualifiedName]
		public CrossReference getContextObjectObjectSpecificationCrossReference_5_1_0() { return cContextObjectObjectSpecificationCrossReference_5_1_0; }

		//QualifiedName
		public RuleCall getContextObjectObjectSpecificationQualifiedNameParserRuleCall_5_1_0_1() { return cContextObjectObjectSpecificationQualifiedNameParserRuleCall_5_1_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_6() { return cLeftCurlyBracketKeyword_6; }

		//("initialize" "[" initScenarios+=[Scenario] ("," initScenarios+=[Scenario])* "]" ";")?
		public Group getGroup_7() { return cGroup_7; }

		//"initialize"
		public Keyword getInitializeKeyword_7_0() { return cInitializeKeyword_7_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_7_1() { return cLeftSquareBracketKeyword_7_1; }

		//initScenarios+=[Scenario]
		public Assignment getInitScenariosAssignment_7_2() { return cInitScenariosAssignment_7_2; }

		//[Scenario]
		public CrossReference getInitScenariosScenarioCrossReference_7_2_0() { return cInitScenariosScenarioCrossReference_7_2_0; }

		//ID
		public RuleCall getInitScenariosScenarioIDTerminalRuleCall_7_2_0_1() { return cInitScenariosScenarioIDTerminalRuleCall_7_2_0_1; }

		//("," initScenarios+=[Scenario])*
		public Group getGroup_7_3() { return cGroup_7_3; }

		//","
		public Keyword getCommaKeyword_7_3_0() { return cCommaKeyword_7_3_0; }

		//initScenarios+=[Scenario]
		public Assignment getInitScenariosAssignment_7_3_1() { return cInitScenariosAssignment_7_3_1; }

		//[Scenario]
		public CrossReference getInitScenariosScenarioCrossReference_7_3_1_0() { return cInitScenariosScenarioCrossReference_7_3_1_0; }

		//ID
		public RuleCall getInitScenariosScenarioIDTerminalRuleCall_7_3_1_0_1() { return cInitScenariosScenarioIDTerminalRuleCall_7_3_1_0_1; }

		//"]"
		public Keyword getRightSquareBracketKeyword_7_4() { return cRightSquareBracketKeyword_7_4; }

		//";"
		public Keyword getSemicolonKeyword_7_5() { return cSemicolonKeyword_7_5; }

		//variables+=VarDeclaration*
		public Assignment getVariablesAssignment_8() { return cVariablesAssignment_8; }

		//VarDeclaration
		public RuleCall getVariablesVarDeclarationParserRuleCall_8_0() { return cVariablesVarDeclarationParserRuleCall_8_0; }

		//assertions+=Assertion*
		public Assignment getAssertionsAssignment_9() { return cAssertionsAssignment_9; }

		//Assertion
		public RuleCall getAssertionsAssertionParserRuleCall_9_0() { return cAssertionsAssertionParserRuleCall_9_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_10() { return cRightCurlyBracketKeyword_10; }
	}

	public class ActivityInputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ActivityInput");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParameterAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cParameterActivityParameterNodeCrossReference_0_0 = (CrossReference)cParameterAssignment_0.eContents().get(0);
		private final RuleCall cParameterActivityParameterNodeQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cParameterActivityParameterNodeCrossReference_0_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueValueParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//ActivityInput:
		//	parameter=[uml::ActivityParameterNode|QualifiedName] "=" value=Value;
		public ParserRule getRule() { return rule; }

		//parameter=[uml::ActivityParameterNode|QualifiedName] "=" value=Value
		public Group getGroup() { return cGroup; }

		//parameter=[uml::ActivityParameterNode|QualifiedName]
		public Assignment getParameterAssignment_0() { return cParameterAssignment_0; }

		//[uml::ActivityParameterNode|QualifiedName]
		public CrossReference getParameterActivityParameterNodeCrossReference_0_0() { return cParameterActivityParameterNodeCrossReference_0_0; }

		//QualifiedName
		public RuleCall getParameterActivityParameterNodeQualifiedNameParserRuleCall_0_0_1() { return cParameterActivityParameterNodeQualifiedNameParserRuleCall_0_0_1; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//value=Value
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//Value
		public RuleCall getValueValueParserRuleCall_2_0() { return cValueValueParserRuleCall_2_0; }
	}

	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSimpleValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cObjectValueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Value:
		//	SimpleValue | ObjectValue;
		public ParserRule getRule() { return rule; }

		//SimpleValue | ObjectValue
		public Alternatives getAlternatives() { return cAlternatives; }

		//SimpleValue
		public RuleCall getSimpleValueParserRuleCall_0() { return cSimpleValueParserRuleCall_0; }

		//ObjectValue
		public RuleCall getObjectValueParserRuleCall_1() { return cObjectValueParserRuleCall_1; }
	}

	public class SimpleValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SimpleValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueXLiteralParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//SimpleValue:
		//	value=XLiteral;
		public ParserRule getRule() { return rule; }

		//value=XLiteral
		public Assignment getValueAssignment() { return cValueAssignment; }

		//XLiteral
		public RuleCall getValueXLiteralParserRuleCall_0() { return cValueXLiteralParserRuleCall_0; }
	}

	public class ObjectValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ObjectValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cValueObjectSpecificationCrossReference_0 = (CrossReference)cValueAssignment.eContents().get(0);
		private final RuleCall cValueObjectSpecificationQualifiedNameParserRuleCall_0_1 = (RuleCall)cValueObjectSpecificationCrossReference_0.eContents().get(1);
		
		//ObjectValue:
		//	value=[ObjectSpecification|QualifiedName];
		public ParserRule getRule() { return rule; }

		//value=[ObjectSpecification|QualifiedName]
		public Assignment getValueAssignment() { return cValueAssignment; }

		//[ObjectSpecification|QualifiedName]
		public CrossReference getValueObjectSpecificationCrossReference_0() { return cValueObjectSpecificationCrossReference_0; }

		//QualifiedName
		public RuleCall getValueObjectSpecificationQualifiedNameParserRuleCall_0_1() { return cValueObjectSpecificationQualifiedNameParserRuleCall_0_1; }
	}

	public class ScenarioElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Scenario");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cScenarioKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cObjectsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cObjectsObjectSpecificationParserRuleCall_3_0 = (RuleCall)cObjectsAssignment_3.eContents().get(0);
		private final Assignment cLinksAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cLinksLinkParserRuleCall_4_0 = (RuleCall)cLinksAssignment_4.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Scenario:
		//	"scenario" name=ID "[" objects+=ObjectSpecification* links+=Link* "]";
		public ParserRule getRule() { return rule; }

		//"scenario" name=ID "[" objects+=ObjectSpecification* links+=Link* "]"
		public Group getGroup() { return cGroup; }

		//"scenario"
		public Keyword getScenarioKeyword_0() { return cScenarioKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }

		//objects+=ObjectSpecification*
		public Assignment getObjectsAssignment_3() { return cObjectsAssignment_3; }

		//ObjectSpecification
		public RuleCall getObjectsObjectSpecificationParserRuleCall_3_0() { return cObjectsObjectSpecificationParserRuleCall_3_0; }

		//links+=Link*
		public Assignment getLinksAssignment_4() { return cLinksAssignment_4; }

		//Link
		public RuleCall getLinksLinkParserRuleCall_4_0() { return cLinksLinkParserRuleCall_4_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_5() { return cRightSquareBracketKeyword_5; }
	}

	public class ObjectSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ObjectSpecification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cObjectKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cTypeClassCrossReference_3_0 = (CrossReference)cTypeAssignment_3.eContents().get(0);
		private final RuleCall cTypeClassQualifiedNameParserRuleCall_3_0_1 = (RuleCall)cTypeClassCrossReference_3_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cAttributesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cAttributesAttributeParserRuleCall_5_0 = (RuleCall)cAttributesAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//ObjectSpecification:
		//	"object" name=ID ":" type=[uml::Class|QualifiedName] "{" attributes+=Attribute* "}";
		public ParserRule getRule() { return rule; }

		//"object" name=ID ":" type=[uml::Class|QualifiedName] "{" attributes+=Attribute* "}"
		public Group getGroup() { return cGroup; }

		//"object"
		public Keyword getObjectKeyword_0() { return cObjectKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//type=[uml::Class|QualifiedName]
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//[uml::Class|QualifiedName]
		public CrossReference getTypeClassCrossReference_3_0() { return cTypeClassCrossReference_3_0; }

		//QualifiedName
		public RuleCall getTypeClassQualifiedNameParserRuleCall_3_0_1() { return cTypeClassQualifiedNameParserRuleCall_3_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//attributes+=Attribute*
		public Assignment getAttributesAssignment_5() { return cAttributesAssignment_5; }

		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_5_0() { return cAttributesAttributeParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Attribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAttAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cAttPropertyCrossReference_0_0 = (CrossReference)cAttAssignment_0.eContents().get(0);
		private final RuleCall cAttPropertyQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cAttPropertyCrossReference_0_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueValueParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Attribute:
		//	att=[uml::Property|QualifiedName] "=" value=Value ";";
		public ParserRule getRule() { return rule; }

		//att=[uml::Property|QualifiedName] "=" value=Value ";"
		public Group getGroup() { return cGroup; }

		//att=[uml::Property|QualifiedName]
		public Assignment getAttAssignment_0() { return cAttAssignment_0; }

		//[uml::Property|QualifiedName]
		public CrossReference getAttPropertyCrossReference_0_0() { return cAttPropertyCrossReference_0_0; }

		//QualifiedName
		public RuleCall getAttPropertyQualifiedNameParserRuleCall_0_0_1() { return cAttPropertyQualifiedNameParserRuleCall_0_0_1; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//value=Value
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//Value
		public RuleCall getValueValueParserRuleCall_2_0() { return cValueValueParserRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class LinkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Link");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLinkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAssocAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cAssocAssociationCrossReference_1_0 = (CrossReference)cAssocAssignment_1.eContents().get(0);
		private final RuleCall cAssocAssociationQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cAssocAssociationCrossReference_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cSourceKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cSourcePropertyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cSourcePropertyPropertyCrossReference_4_0 = (CrossReference)cSourcePropertyAssignment_4.eContents().get(0);
		private final RuleCall cSourcePropertyPropertyQualifiedNameParserRuleCall_4_0_1 = (RuleCall)cSourcePropertyPropertyCrossReference_4_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cSourceValueAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cSourceValueObjectSpecificationCrossReference_6_0 = (CrossReference)cSourceValueAssignment_6.eContents().get(0);
		private final RuleCall cSourceValueObjectSpecificationQualifiedNameParserRuleCall_6_0_1 = (RuleCall)cSourceValueObjectSpecificationCrossReference_6_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cTargetKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cTargetPropertyAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final CrossReference cTargetPropertyPropertyCrossReference_9_0 = (CrossReference)cTargetPropertyAssignment_9.eContents().get(0);
		private final RuleCall cTargetPropertyPropertyQualifiedNameParserRuleCall_9_0_1 = (RuleCall)cTargetPropertyPropertyCrossReference_9_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cTargetValueAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final CrossReference cTargetValueObjectSpecificationCrossReference_11_0 = (CrossReference)cTargetValueAssignment_11.eContents().get(0);
		private final RuleCall cTargetValueObjectSpecificationQualifiedNameParserRuleCall_11_0_1 = (RuleCall)cTargetValueObjectSpecificationCrossReference_11_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_12 = (Keyword)cGroup.eContents().get(12);
		private final Keyword cRightCurlyBracketKeyword_13 = (Keyword)cGroup.eContents().get(13);
		
		//Link:
		//	"link" assoc=[uml::Association|QualifiedName] "{" "source" sourceProperty=[uml::Property|QualifiedName] "="
		//	sourceValue=[ObjectSpecification|QualifiedName] ";" "target" targetProperty=[uml::Property|QualifiedName] "="
		//	targetValue=[ObjectSpecification|QualifiedName] ";" "}";
		public ParserRule getRule() { return rule; }

		//"link" assoc=[uml::Association|QualifiedName] "{" "source" sourceProperty=[uml::Property|QualifiedName] "="
		//sourceValue=[ObjectSpecification|QualifiedName] ";" "target" targetProperty=[uml::Property|QualifiedName] "="
		//targetValue=[ObjectSpecification|QualifiedName] ";" "}"
		public Group getGroup() { return cGroup; }

		//"link"
		public Keyword getLinkKeyword_0() { return cLinkKeyword_0; }

		//assoc=[uml::Association|QualifiedName]
		public Assignment getAssocAssignment_1() { return cAssocAssignment_1; }

		//[uml::Association|QualifiedName]
		public CrossReference getAssocAssociationCrossReference_1_0() { return cAssocAssociationCrossReference_1_0; }

		//QualifiedName
		public RuleCall getAssocAssociationQualifiedNameParserRuleCall_1_0_1() { return cAssocAssociationQualifiedNameParserRuleCall_1_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"source"
		public Keyword getSourceKeyword_3() { return cSourceKeyword_3; }

		//sourceProperty=[uml::Property|QualifiedName]
		public Assignment getSourcePropertyAssignment_4() { return cSourcePropertyAssignment_4; }

		//[uml::Property|QualifiedName]
		public CrossReference getSourcePropertyPropertyCrossReference_4_0() { return cSourcePropertyPropertyCrossReference_4_0; }

		//QualifiedName
		public RuleCall getSourcePropertyPropertyQualifiedNameParserRuleCall_4_0_1() { return cSourcePropertyPropertyQualifiedNameParserRuleCall_4_0_1; }

		//"="
		public Keyword getEqualsSignKeyword_5() { return cEqualsSignKeyword_5; }

		//sourceValue=[ObjectSpecification|QualifiedName]
		public Assignment getSourceValueAssignment_6() { return cSourceValueAssignment_6; }

		//[ObjectSpecification|QualifiedName]
		public CrossReference getSourceValueObjectSpecificationCrossReference_6_0() { return cSourceValueObjectSpecificationCrossReference_6_0; }

		//QualifiedName
		public RuleCall getSourceValueObjectSpecificationQualifiedNameParserRuleCall_6_0_1() { return cSourceValueObjectSpecificationQualifiedNameParserRuleCall_6_0_1; }

		//";"
		public Keyword getSemicolonKeyword_7() { return cSemicolonKeyword_7; }

		//"target"
		public Keyword getTargetKeyword_8() { return cTargetKeyword_8; }

		//targetProperty=[uml::Property|QualifiedName]
		public Assignment getTargetPropertyAssignment_9() { return cTargetPropertyAssignment_9; }

		//[uml::Property|QualifiedName]
		public CrossReference getTargetPropertyPropertyCrossReference_9_0() { return cTargetPropertyPropertyCrossReference_9_0; }

		//QualifiedName
		public RuleCall getTargetPropertyPropertyQualifiedNameParserRuleCall_9_0_1() { return cTargetPropertyPropertyQualifiedNameParserRuleCall_9_0_1; }

		//"="
		public Keyword getEqualsSignKeyword_10() { return cEqualsSignKeyword_10; }

		//targetValue=[ObjectSpecification|QualifiedName]
		public Assignment getTargetValueAssignment_11() { return cTargetValueAssignment_11; }

		//[ObjectSpecification|QualifiedName]
		public CrossReference getTargetValueObjectSpecificationCrossReference_11_0() { return cTargetValueObjectSpecificationCrossReference_11_0; }

		//QualifiedName
		public RuleCall getTargetValueObjectSpecificationQualifiedNameParserRuleCall_11_0_1() { return cTargetValueObjectSpecificationQualifiedNameParserRuleCall_11_0_1; }

		//";"
		public Keyword getSemicolonKeyword_12() { return cSemicolonKeyword_12; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_13() { return cRightCurlyBracketKeyword_13; }
	}

	public class AssertionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Assertion");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOrderAssertionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStateAssertionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFinallyStateAssertionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Assertion:
		//	OrderAssertion | StateAssertion | FinallyStateAssertion;
		public ParserRule getRule() { return rule; }

		//OrderAssertion | StateAssertion | FinallyStateAssertion
		public Alternatives getAlternatives() { return cAlternatives; }

		//OrderAssertion
		public RuleCall getOrderAssertionParserRuleCall_0() { return cOrderAssertionParserRuleCall_0; }

		//StateAssertion
		public RuleCall getStateAssertionParserRuleCall_1() { return cStateAssertionParserRuleCall_1; }

		//FinallyStateAssertion
		public RuleCall getFinallyStateAssertionParserRuleCall_2() { return cFinallyStateAssertionParserRuleCall_2; }
	}

	public class StateAssertionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StateAssertion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAssertStateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cQuantifierAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cQuantifierTemporalQuantifierEnumRuleCall_1_0 = (RuleCall)cQuantifierAssignment_1.eContents().get(0);
		private final Assignment cOperatorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOperatorTemporalOperatorEnumRuleCall_2_0 = (RuleCall)cOperatorAssignment_2.eContents().get(0);
		private final Assignment cReferencePointAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cReferencePointReferencePointParserRuleCall_3_0 = (RuleCall)cReferencePointAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cUntilKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cUntilPointAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cUntilPointReferencePointParserRuleCall_4_1_0 = (RuleCall)cUntilPointAssignment_4_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cChecksAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cChecksCheckParserRuleCall_6_0 = (RuleCall)cChecksAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//StateAssertion:
		//	"assertState" quantifier=TemporalQuantifier operator=TemporalOperator referencePoint=ReferencePoint ("until"
		//	untilPoint=ReferencePoint)? "{" checks+=Check* "}";
		public ParserRule getRule() { return rule; }

		//"assertState" quantifier=TemporalQuantifier operator=TemporalOperator referencePoint=ReferencePoint ("until"
		//untilPoint=ReferencePoint)? "{" checks+=Check* "}"
		public Group getGroup() { return cGroup; }

		//"assertState"
		public Keyword getAssertStateKeyword_0() { return cAssertStateKeyword_0; }

		//quantifier=TemporalQuantifier
		public Assignment getQuantifierAssignment_1() { return cQuantifierAssignment_1; }

		//TemporalQuantifier
		public RuleCall getQuantifierTemporalQuantifierEnumRuleCall_1_0() { return cQuantifierTemporalQuantifierEnumRuleCall_1_0; }

		//operator=TemporalOperator
		public Assignment getOperatorAssignment_2() { return cOperatorAssignment_2; }

		//TemporalOperator
		public RuleCall getOperatorTemporalOperatorEnumRuleCall_2_0() { return cOperatorTemporalOperatorEnumRuleCall_2_0; }

		//referencePoint=ReferencePoint
		public Assignment getReferencePointAssignment_3() { return cReferencePointAssignment_3; }

		//ReferencePoint
		public RuleCall getReferencePointReferencePointParserRuleCall_3_0() { return cReferencePointReferencePointParserRuleCall_3_0; }

		//("until" untilPoint=ReferencePoint)?
		public Group getGroup_4() { return cGroup_4; }

		//"until"
		public Keyword getUntilKeyword_4_0() { return cUntilKeyword_4_0; }

		//untilPoint=ReferencePoint
		public Assignment getUntilPointAssignment_4_1() { return cUntilPointAssignment_4_1; }

		//ReferencePoint
		public RuleCall getUntilPointReferencePointParserRuleCall_4_1_0() { return cUntilPointReferencePointParserRuleCall_4_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }

		//checks+=Check*
		public Assignment getChecksAssignment_6() { return cChecksAssignment_6; }

		//Check
		public RuleCall getChecksCheckParserRuleCall_6_0() { return cChecksCheckParserRuleCall_6_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class ReferencePointElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ReferencePoint");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cActionReferencePointParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cConstraintReferencePointParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ReferencePoint:
		//	ActionReferencePoint | ConstraintReferencePoint;
		public ParserRule getRule() { return rule; }

		//ActionReferencePoint | ConstraintReferencePoint
		public Alternatives getAlternatives() { return cAlternatives; }

		//ActionReferencePoint
		public RuleCall getActionReferencePointParserRuleCall_0() { return cActionReferencePointParserRuleCall_0; }

		//ConstraintReferencePoint
		public RuleCall getConstraintReferencePointParserRuleCall_1() { return cConstraintReferencePointParserRuleCall_1; }
	}

	public class ActionReferencePointElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ActionReferencePoint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cActionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cActionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cActionActionCrossReference_1_0 = (CrossReference)cActionAssignment_1.eContents().get(0);
		private final RuleCall cActionActionQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cActionActionCrossReference_1_0.eContents().get(1);
		
		//ActionReferencePoint:
		//	"action" action=[uml::Action|QualifiedName];
		public ParserRule getRule() { return rule; }

		//"action" action=[uml::Action|QualifiedName]
		public Group getGroup() { return cGroup; }

		//"action"
		public Keyword getActionKeyword_0() { return cActionKeyword_0; }

		//action=[uml::Action|QualifiedName]
		public Assignment getActionAssignment_1() { return cActionAssignment_1; }

		//[uml::Action|QualifiedName]
		public CrossReference getActionActionCrossReference_1_0() { return cActionActionCrossReference_1_0; }

		//QualifiedName
		public RuleCall getActionActionQualifiedNameParserRuleCall_1_0_1() { return cActionActionQualifiedNameParserRuleCall_1_0_1; }
	}

	public class ConstraintReferencePointElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConstraintReferencePoint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConstraintKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConstraintNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConstraintNameXStringLiteralParserRuleCall_1_0 = (RuleCall)cConstraintNameAssignment_1.eContents().get(0);
		
		//ConstraintReferencePoint:
		//	"constraint" constraintName=XStringLiteral;
		public ParserRule getRule() { return rule; }

		//"constraint" constraintName=XStringLiteral
		public Group getGroup() { return cGroup; }

		//"constraint"
		public Keyword getConstraintKeyword_0() { return cConstraintKeyword_0; }

		//constraintName=XStringLiteral
		public Assignment getConstraintNameAssignment_1() { return cConstraintNameAssignment_1; }

		//XStringLiteral
		public RuleCall getConstraintNameXStringLiteralParserRuleCall_1_0() { return cConstraintNameXStringLiteralParserRuleCall_1_0; }
	}

	public class FinallyStateAssertionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FinallyStateAssertion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFinallyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Action cFinallyStateAssertionAction_2 = (Action)cGroup.eContents().get(2);
		private final Assignment cChecksAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cChecksCheckParserRuleCall_3_0 = (RuleCall)cChecksAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//FinallyStateAssertion:
		//	"finally" "{" {FinallyStateAssertion} checks+=Check* "}";
		public ParserRule getRule() { return rule; }

		//"finally" "{" {FinallyStateAssertion} checks+=Check* "}"
		public Group getGroup() { return cGroup; }

		//"finally"
		public Keyword getFinallyKeyword_0() { return cFinallyKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//{FinallyStateAssertion}
		public Action getFinallyStateAssertionAction_2() { return cFinallyStateAssertionAction_2; }

		//checks+=Check*
		public Assignment getChecksAssignment_3() { return cChecksAssignment_3; }

		//Check
		public RuleCall getChecksCheckParserRuleCall_3_0() { return cChecksCheckParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class CheckElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Check");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConstraintCheckParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStateExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Check:
		//	ConstraintCheck | StateExpression;
		public ParserRule getRule() { return rule; }

		//ConstraintCheck | StateExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//ConstraintCheck
		public RuleCall getConstraintCheckParserRuleCall_0() { return cConstraintCheckParserRuleCall_0; }

		//StateExpression
		public RuleCall getStateExpressionParserRuleCall_1() { return cStateExpressionParserRuleCall_1; }
	}

	public class ConstraintCheckElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConstraintCheck");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCheckKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConstraintNamesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConstraintNamesXStringLiteralParserRuleCall_1_0 = (RuleCall)cConstraintNamesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cConstraintNamesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cConstraintNamesXStringLiteralParserRuleCall_2_1_0 = (RuleCall)cConstraintNamesAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cOnKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cObjectAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cObjectVarDeclarationCrossReference_3_1_0 = (CrossReference)cObjectAssignment_3_1.eContents().get(0);
		private final RuleCall cObjectVarDeclarationQualifiedNameParserRuleCall_3_1_0_1 = (RuleCall)cObjectVarDeclarationCrossReference_3_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ConstraintCheck:
		//	"check" constraintNames+=XStringLiteral ("," constraintNames+=XStringLiteral)* ("on"
		//	object=[VarDeclaration|QualifiedName])? ";";
		public ParserRule getRule() { return rule; }

		//"check" constraintNames+=XStringLiteral ("," constraintNames+=XStringLiteral)* ("on"
		//object=[VarDeclaration|QualifiedName])? ";"
		public Group getGroup() { return cGroup; }

		//"check"
		public Keyword getCheckKeyword_0() { return cCheckKeyword_0; }

		//constraintNames+=XStringLiteral
		public Assignment getConstraintNamesAssignment_1() { return cConstraintNamesAssignment_1; }

		//XStringLiteral
		public RuleCall getConstraintNamesXStringLiteralParserRuleCall_1_0() { return cConstraintNamesXStringLiteralParserRuleCall_1_0; }

		//("," constraintNames+=XStringLiteral)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//constraintNames+=XStringLiteral
		public Assignment getConstraintNamesAssignment_2_1() { return cConstraintNamesAssignment_2_1; }

		//XStringLiteral
		public RuleCall getConstraintNamesXStringLiteralParserRuleCall_2_1_0() { return cConstraintNamesXStringLiteralParserRuleCall_2_1_0; }

		//("on" object=[VarDeclaration|QualifiedName])?
		public Group getGroup_3() { return cGroup_3; }

		//"on"
		public Keyword getOnKeyword_3_0() { return cOnKeyword_3_0; }

		//object=[VarDeclaration|QualifiedName]
		public Assignment getObjectAssignment_3_1() { return cObjectAssignment_3_1; }

		//[VarDeclaration|QualifiedName]
		public CrossReference getObjectVarDeclarationCrossReference_3_1_0() { return cObjectVarDeclarationCrossReference_3_1_0; }

		//QualifiedName
		public RuleCall getObjectVarDeclarationQualifiedNameParserRuleCall_3_1_0_1() { return cObjectVarDeclarationQualifiedNameParserRuleCall_3_1_0_1; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class StateExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StateExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cObjectStateExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPropertyStateExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//StateExpression:
		//	ObjectStateExpression | PropertyStateExpression;
		public ParserRule getRule() { return rule; }

		//ObjectStateExpression | PropertyStateExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//ObjectStateExpression
		public RuleCall getObjectStateExpressionParserRuleCall_0() { return cObjectStateExpressionParserRuleCall_0; }

		//PropertyStateExpression
		public RuleCall getPropertyStateExpressionParserRuleCall_1() { return cPropertyStateExpressionParserRuleCall_1; }
	}

	public class ObjectStateExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ObjectStateExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPinAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cPinVarDeclarationCrossReference_0_0 = (CrossReference)cPinAssignment_0.eContents().get(0);
		private final RuleCall cPinVarDeclarationIDTerminalRuleCall_0_0_1 = (RuleCall)cPinVarDeclarationCrossReference_0_0.eContents().get(1);
		private final Assignment cOperatorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperatorArithmeticOperatorEnumRuleCall_1_0 = (RuleCall)cOperatorAssignment_1.eContents().get(0);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueValueParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ObjectStateExpression:
		//	pin=[VarDeclaration] operator=ArithmeticOperator value=Value ";";
		public ParserRule getRule() { return rule; }

		//pin=[VarDeclaration] operator=ArithmeticOperator value=Value ";"
		public Group getGroup() { return cGroup; }

		//pin=[VarDeclaration]
		public Assignment getPinAssignment_0() { return cPinAssignment_0; }

		//[VarDeclaration]
		public CrossReference getPinVarDeclarationCrossReference_0_0() { return cPinVarDeclarationCrossReference_0_0; }

		//ID
		public RuleCall getPinVarDeclarationIDTerminalRuleCall_0_0_1() { return cPinVarDeclarationIDTerminalRuleCall_0_0_1; }

		//operator=ArithmeticOperator
		public Assignment getOperatorAssignment_1() { return cOperatorAssignment_1; }

		//ArithmeticOperator
		public RuleCall getOperatorArithmeticOperatorEnumRuleCall_1_0() { return cOperatorArithmeticOperatorEnumRuleCall_1_0; }

		//value=Value
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//Value
		public RuleCall getValueValueParserRuleCall_2_0() { return cValueValueParserRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class PropertyStateExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PropertyStateExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPinAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cPinVarDeclarationCrossReference_0_0 = (CrossReference)cPinAssignment_0.eContents().get(0);
		private final RuleCall cPinVarDeclarationIDTerminalRuleCall_0_0_1 = (RuleCall)cPinVarDeclarationCrossReference_0_0.eContents().get(1);
		private final Keyword cColonColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPropertyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cPropertyPropertyCrossReference_2_0 = (CrossReference)cPropertyAssignment_2.eContents().get(0);
		private final RuleCall cPropertyPropertyQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cPropertyPropertyCrossReference_2_0.eContents().get(1);
		private final Assignment cOperatorAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOperatorArithmeticOperatorEnumRuleCall_3_0 = (RuleCall)cOperatorAssignment_3.eContents().get(0);
		private final Assignment cValueAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cValueValueParserRuleCall_4_0 = (RuleCall)cValueAssignment_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//PropertyStateExpression:
		//	pin=[VarDeclaration] "::" property=[uml::Property|QualifiedName] operator=ArithmeticOperator value=Value ";";
		public ParserRule getRule() { return rule; }

		//pin=[VarDeclaration] "::" property=[uml::Property|QualifiedName] operator=ArithmeticOperator value=Value ";"
		public Group getGroup() { return cGroup; }

		//pin=[VarDeclaration]
		public Assignment getPinAssignment_0() { return cPinAssignment_0; }

		//[VarDeclaration]
		public CrossReference getPinVarDeclarationCrossReference_0_0() { return cPinVarDeclarationCrossReference_0_0; }

		//ID
		public RuleCall getPinVarDeclarationIDTerminalRuleCall_0_0_1() { return cPinVarDeclarationIDTerminalRuleCall_0_0_1; }

		//"::"
		public Keyword getColonColonKeyword_1() { return cColonColonKeyword_1; }

		//property=[uml::Property|QualifiedName]
		public Assignment getPropertyAssignment_2() { return cPropertyAssignment_2; }

		//[uml::Property|QualifiedName]
		public CrossReference getPropertyPropertyCrossReference_2_0() { return cPropertyPropertyCrossReference_2_0; }

		//QualifiedName
		public RuleCall getPropertyPropertyQualifiedNameParserRuleCall_2_0_1() { return cPropertyPropertyQualifiedNameParserRuleCall_2_0_1; }

		//operator=ArithmeticOperator
		public Assignment getOperatorAssignment_3() { return cOperatorAssignment_3; }

		//ArithmeticOperator
		public RuleCall getOperatorArithmeticOperatorEnumRuleCall_3_0() { return cOperatorArithmeticOperatorEnumRuleCall_3_0; }

		//value=Value
		public Assignment getValueAssignment_4() { return cValueAssignment_4; }

		//Value
		public RuleCall getValueValueParserRuleCall_4_0() { return cValueValueParserRuleCall_4_0; }

		//";"
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}

	public class OrderAssertionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OrderAssertion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAssertOrderKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOrderAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOrderNodeOrderParserRuleCall_1_0 = (RuleCall)cOrderAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//OrderAssertion:
		//	"assertOrder" order=NodeOrder ";";
		public ParserRule getRule() { return rule; }

		//"assertOrder" order=NodeOrder ";"
		public Group getGroup() { return cGroup; }

		//"assertOrder"
		public Keyword getAssertOrderKeyword_0() { return cAssertOrderKeyword_0; }

		//order=NodeOrder
		public Assignment getOrderAssignment_1() { return cOrderAssignment_1; }

		//NodeOrder
		public RuleCall getOrderNodeOrderParserRuleCall_1_0() { return cOrderNodeOrderParserRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class NodeOrderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NodeOrder");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNodesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNodesNodeSpecificationParserRuleCall_0_0 = (RuleCall)cNodesAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNodesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNodesNodeSpecificationParserRuleCall_1_1_0 = (RuleCall)cNodesAssignment_1_1.eContents().get(0);
		
		//NodeOrder:
		//	nodes+=NodeSpecification ("," nodes+=NodeSpecification)*;
		public ParserRule getRule() { return rule; }

		//nodes+=NodeSpecification ("," nodes+=NodeSpecification)*
		public Group getGroup() { return cGroup; }

		//nodes+=NodeSpecification
		public Assignment getNodesAssignment_0() { return cNodesAssignment_0; }

		//NodeSpecification
		public RuleCall getNodesNodeSpecificationParserRuleCall_0_0() { return cNodesNodeSpecificationParserRuleCall_0_0; }

		//("," nodes+=NodeSpecification)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//nodes+=NodeSpecification
		public Assignment getNodesAssignment_1_1() { return cNodesAssignment_1_1; }

		//NodeSpecification
		public RuleCall getNodesNodeSpecificationParserRuleCall_1_1_0() { return cNodesNodeSpecificationParserRuleCall_1_1_0; }
	}

	public class NodeSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NodeSpecification");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cNodeAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final CrossReference cNodeActivityNodeCrossReference_0_0_0 = (CrossReference)cNodeAssignment_0_0.eContents().get(0);
		private final RuleCall cNodeActivityNodeQualifiedNameParserRuleCall_0_0_0_1 = (RuleCall)cNodeActivityNodeCrossReference_0_0_0.eContents().get(1);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cColonKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cSizeAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cSizeXNumberLiteralParserRuleCall_0_1_1_0 = (RuleCall)cSizeAssignment_0_1_1.eContents().get(0);
		private final Group cGroup_0_2 = (Group)cGroup_0.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_0_2_0 = (Keyword)cGroup_0_2.eContents().get(0);
		private final Assignment cSubOrderAssignment_0_2_1 = (Assignment)cGroup_0_2.eContents().get(1);
		private final RuleCall cSubOrderNodeOrderParserRuleCall_0_2_1_0 = (RuleCall)cSubOrderAssignment_0_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_2_2 = (Keyword)cGroup_0_2.eContents().get(2);
		private final Assignment cJokerAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cJokerAsteriskKeyword_1_0 = (Keyword)cJokerAssignment_1.eContents().get(0);
		private final Assignment cJokerAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Keyword cJoker_Keyword_2_0 = (Keyword)cJokerAssignment_2.eContents().get(0);
		
		//NodeSpecification:
		//	node=[uml::ActivityNode|QualifiedName] (":" size=XNumberLiteral)? ("(" subOrder=NodeOrder ")")? | joker="*" |
		//	joker="_";
		public ParserRule getRule() { return rule; }

		//node=[uml::ActivityNode|QualifiedName] (":" size=XNumberLiteral)? ("(" subOrder=NodeOrder ")")? | joker="*" | joker="_"
		public Alternatives getAlternatives() { return cAlternatives; }

		//node=[uml::ActivityNode|QualifiedName] (":" size=XNumberLiteral)? ("(" subOrder=NodeOrder ")")?
		public Group getGroup_0() { return cGroup_0; }

		//node=[uml::ActivityNode|QualifiedName]
		public Assignment getNodeAssignment_0_0() { return cNodeAssignment_0_0; }

		//[uml::ActivityNode|QualifiedName]
		public CrossReference getNodeActivityNodeCrossReference_0_0_0() { return cNodeActivityNodeCrossReference_0_0_0; }

		//QualifiedName
		public RuleCall getNodeActivityNodeQualifiedNameParserRuleCall_0_0_0_1() { return cNodeActivityNodeQualifiedNameParserRuleCall_0_0_0_1; }

		//(":" size=XNumberLiteral)?
		public Group getGroup_0_1() { return cGroup_0_1; }

		//":"
		public Keyword getColonKeyword_0_1_0() { return cColonKeyword_0_1_0; }

		//size=XNumberLiteral
		public Assignment getSizeAssignment_0_1_1() { return cSizeAssignment_0_1_1; }

		//XNumberLiteral
		public RuleCall getSizeXNumberLiteralParserRuleCall_0_1_1_0() { return cSizeXNumberLiteralParserRuleCall_0_1_1_0; }

		//("(" subOrder=NodeOrder ")")?
		public Group getGroup_0_2() { return cGroup_0_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_2_0() { return cLeftParenthesisKeyword_0_2_0; }

		//subOrder=NodeOrder
		public Assignment getSubOrderAssignment_0_2_1() { return cSubOrderAssignment_0_2_1; }

		//NodeOrder
		public RuleCall getSubOrderNodeOrderParserRuleCall_0_2_1_0() { return cSubOrderNodeOrderParserRuleCall_0_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_0_2_2() { return cRightParenthesisKeyword_0_2_2; }

		//joker="*"
		public Assignment getJokerAssignment_1() { return cJokerAssignment_1; }

		//"*"
		public Keyword getJokerAsteriskKeyword_1_0() { return cJokerAsteriskKeyword_1_0; }

		//joker="_"
		public Assignment getJokerAssignment_2() { return cJokerAssignment_2; }

		//"_"
		public Keyword getJoker_Keyword_2_0() { return cJoker_Keyword_2_0; }
	}
	
	
	public class ArithmeticOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ArithmeticOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cEqualEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cEqualEqualsSignKeyword_0_0 = (Keyword)cEqualEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cNot_equalEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cNot_equalExclamationMarkEqualsSignKeyword_1_0 = (Keyword)cNot_equalEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cGreaterEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cGreaterGreaterThanSignKeyword_2_0 = (Keyword)cGreaterEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cSmallerEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cSmallerLessThanSignKeyword_3_0 = (Keyword)cSmallerEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cGreater_equalEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cGreater_equalGreaterThanSignEqualsSignKeyword_4_0 = (Keyword)cGreater_equalEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cSmaller_equalEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cSmaller_equalLessThanSignEqualsSignKeyword_5_0 = (Keyword)cSmaller_equalEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cIncludesEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cIncludesIncludesKeyword_6_0 = (Keyword)cIncludesEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cExcludesEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cExcludesExcludesKeyword_7_0 = (Keyword)cExcludesEnumLiteralDeclaration_7.eContents().get(0);
		
		//enum ArithmeticOperator:
		//	equal="=" | not_equal="!=" | greater=">" | smaller="<" | greater_equal=">=" | smaller_equal="<=" | includes |
		//	excludes;
		public EnumRule getRule() { return rule; }

		//equal="=" | not_equal="!=" | greater=">" | smaller="<" | greater_equal=">=" | smaller_equal="<=" | includes | excludes
		public Alternatives getAlternatives() { return cAlternatives; }

		//equal="="
		public EnumLiteralDeclaration getEqualEnumLiteralDeclaration_0() { return cEqualEnumLiteralDeclaration_0; }

		//"="
		public Keyword getEqualEqualsSignKeyword_0_0() { return cEqualEqualsSignKeyword_0_0; }

		//not_equal="!="
		public EnumLiteralDeclaration getNot_equalEnumLiteralDeclaration_1() { return cNot_equalEnumLiteralDeclaration_1; }

		//"!="
		public Keyword getNot_equalExclamationMarkEqualsSignKeyword_1_0() { return cNot_equalExclamationMarkEqualsSignKeyword_1_0; }

		//greater=">"
		public EnumLiteralDeclaration getGreaterEnumLiteralDeclaration_2() { return cGreaterEnumLiteralDeclaration_2; }

		//">"
		public Keyword getGreaterGreaterThanSignKeyword_2_0() { return cGreaterGreaterThanSignKeyword_2_0; }

		//smaller="<"
		public EnumLiteralDeclaration getSmallerEnumLiteralDeclaration_3() { return cSmallerEnumLiteralDeclaration_3; }

		//"<"
		public Keyword getSmallerLessThanSignKeyword_3_0() { return cSmallerLessThanSignKeyword_3_0; }

		//greater_equal=">="
		public EnumLiteralDeclaration getGreater_equalEnumLiteralDeclaration_4() { return cGreater_equalEnumLiteralDeclaration_4; }

		//">="
		public Keyword getGreater_equalGreaterThanSignEqualsSignKeyword_4_0() { return cGreater_equalGreaterThanSignEqualsSignKeyword_4_0; }

		//smaller_equal="<="
		public EnumLiteralDeclaration getSmaller_equalEnumLiteralDeclaration_5() { return cSmaller_equalEnumLiteralDeclaration_5; }

		//"<="
		public Keyword getSmaller_equalLessThanSignEqualsSignKeyword_5_0() { return cSmaller_equalLessThanSignEqualsSignKeyword_5_0; }

		//includes
		public EnumLiteralDeclaration getIncludesEnumLiteralDeclaration_6() { return cIncludesEnumLiteralDeclaration_6; }

		//"includes"
		public Keyword getIncludesIncludesKeyword_6_0() { return cIncludesIncludesKeyword_6_0; }

		//excludes
		public EnumLiteralDeclaration getExcludesEnumLiteralDeclaration_7() { return cExcludesEnumLiteralDeclaration_7; }

		//"excludes"
		public Keyword getExcludesExcludesKeyword_7_0() { return cExcludesExcludesKeyword_7_0; }
	}

	public class TemporalOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "TemporalOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cAfterEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cAfterAfterKeyword_0_0 = (Keyword)cAfterEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cUntilEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cUntilUntilKeyword_1_0 = (Keyword)cUntilEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum TemporalOperator:
		//	after | until;
		public EnumRule getRule() { return rule; }

		//after | until
		public Alternatives getAlternatives() { return cAlternatives; }

		//after
		public EnumLiteralDeclaration getAfterEnumLiteralDeclaration_0() { return cAfterEnumLiteralDeclaration_0; }

		//"after"
		public Keyword getAfterAfterKeyword_0_0() { return cAfterAfterKeyword_0_0; }

		//until
		public EnumLiteralDeclaration getUntilEnumLiteralDeclaration_1() { return cUntilEnumLiteralDeclaration_1; }

		//"until"
		public Keyword getUntilUntilKeyword_1_0() { return cUntilUntilKeyword_1_0; }
	}

	public class TemporalQuantifierElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "TemporalQuantifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cAlwaysEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cAlwaysAlwaysKeyword_0_0 = (Keyword)cAlwaysEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSometimesEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSometimesSometimesKeyword_1_0 = (Keyword)cSometimesEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cEventuallyEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cEventuallyEventuallyKeyword_2_0 = (Keyword)cEventuallyEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cImmediatelyEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cImmediatelyImmediatelyKeyword_3_0 = (Keyword)cImmediatelyEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum TemporalQuantifier:
		//	always | sometimes | eventually | immediately;
		public EnumRule getRule() { return rule; }

		//always | sometimes | eventually | immediately
		public Alternatives getAlternatives() { return cAlternatives; }

		//always
		public EnumLiteralDeclaration getAlwaysEnumLiteralDeclaration_0() { return cAlwaysEnumLiteralDeclaration_0; }

		//"always"
		public Keyword getAlwaysAlwaysKeyword_0_0() { return cAlwaysAlwaysKeyword_0_0; }

		//sometimes
		public EnumLiteralDeclaration getSometimesEnumLiteralDeclaration_1() { return cSometimesEnumLiteralDeclaration_1; }

		//"sometimes"
		public Keyword getSometimesSometimesKeyword_1_0() { return cSometimesSometimesKeyword_1_0; }

		//eventually
		public EnumLiteralDeclaration getEventuallyEnumLiteralDeclaration_2() { return cEventuallyEnumLiteralDeclaration_2; }

		//"eventually"
		public Keyword getEventuallyEventuallyKeyword_2_0() { return cEventuallyEventuallyKeyword_2_0; }

		//immediately
		public EnumLiteralDeclaration getImmediatelyEnumLiteralDeclaration_3() { return cImmediatelyEnumLiteralDeclaration_3; }

		//"immediately"
		public Keyword getImmediatelyImmediatelyKeyword_3_0() { return cImmediatelyImmediatelyKeyword_3_0; }
	}
	
	private TestSuiteElements pTestSuite;
	private ImportElements pImport;
	private VarDeclarationElements pVarDeclaration;
	private TestCaseElements pTestCase;
	private ActivityInputElements pActivityInput;
	private ValueElements pValue;
	private SimpleValueElements pSimpleValue;
	private ObjectValueElements pObjectValue;
	private ScenarioElements pScenario;
	private ObjectSpecificationElements pObjectSpecification;
	private AttributeElements pAttribute;
	private LinkElements pLink;
	private AssertionElements pAssertion;
	private StateAssertionElements pStateAssertion;
	private ReferencePointElements pReferencePoint;
	private ActionReferencePointElements pActionReferencePoint;
	private ConstraintReferencePointElements pConstraintReferencePoint;
	private FinallyStateAssertionElements pFinallyStateAssertion;
	private CheckElements pCheck;
	private ConstraintCheckElements pConstraintCheck;
	private StateExpressionElements pStateExpression;
	private ObjectStateExpressionElements pObjectStateExpression;
	private PropertyStateExpressionElements pPropertyStateExpression;
	private OrderAssertionElements pOrderAssertion;
	private NodeOrderElements pNodeOrder;
	private NodeSpecificationElements pNodeSpecification;
	private ArithmeticOperatorElements unknownRuleArithmeticOperator;
	private TemporalOperatorElements unknownRuleTemporalOperator;
	private TemporalQuantifierElements unknownRuleTemporalQuantifier;
	
	private final Grammar grammar;

	private XbaseGrammarAccess gaXbase;

	@Inject
	public TestLangGrammarAccess(GrammarProvider grammarProvider,
		XbaseGrammarAccess gaXbase) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaXbase = gaXbase;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.modelexecution.fumltesting.TestLang".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public XbaseGrammarAccess getXbaseGrammarAccess() {
		return gaXbase;
	}

	
	//TestSuite:
	//	imports+=Import* scenarios+=Scenario* tests+=TestCase*;
	public TestSuiteElements getTestSuiteAccess() {
		return (pTestSuite != null) ? pTestSuite : (pTestSuite = new TestSuiteElements());
	}
	
	public ParserRule getTestSuiteRule() {
		return getTestSuiteAccess().getRule();
	}

	//Import:
	//	"import" importedNamespace=QualifiedNameWithWildcard;
	public ImportElements getImportAccess() {
		return (pImport != null) ? pImport : (pImport = new ImportElements());
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}

	//VarDeclaration:
	//	"var" name=ID "=" ref=[uml::ObjectNode|QualifiedName] ";";
	public VarDeclarationElements getVarDeclarationAccess() {
		return (pVarDeclaration != null) ? pVarDeclaration : (pVarDeclaration = new VarDeclarationElements());
	}
	
	public ParserRule getVarDeclarationRule() {
		return getVarDeclarationAccess().getRule();
	}

	//TestCase:
	//	"test" name=ID "activity" activityUnderTest=[uml::Activity|QualifiedName] ("(" inputs+=ActivityInput (","
	//	inputs+=ActivityInput)* ")")? ("on" contextObject=[ObjectSpecification|QualifiedName])? "{" ("initialize" "["
	//	initScenarios+=[Scenario] ("," initScenarios+=[Scenario])* "]" ";")? variables+=VarDeclaration*
	//	assertions+=Assertion* "}";
	public TestCaseElements getTestCaseAccess() {
		return (pTestCase != null) ? pTestCase : (pTestCase = new TestCaseElements());
	}
	
	public ParserRule getTestCaseRule() {
		return getTestCaseAccess().getRule();
	}

	//ActivityInput:
	//	parameter=[uml::ActivityParameterNode|QualifiedName] "=" value=Value;
	public ActivityInputElements getActivityInputAccess() {
		return (pActivityInput != null) ? pActivityInput : (pActivityInput = new ActivityInputElements());
	}
	
	public ParserRule getActivityInputRule() {
		return getActivityInputAccess().getRule();
	}

	//Value:
	//	SimpleValue | ObjectValue;
	public ValueElements getValueAccess() {
		return (pValue != null) ? pValue : (pValue = new ValueElements());
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}

	//SimpleValue:
	//	value=XLiteral;
	public SimpleValueElements getSimpleValueAccess() {
		return (pSimpleValue != null) ? pSimpleValue : (pSimpleValue = new SimpleValueElements());
	}
	
	public ParserRule getSimpleValueRule() {
		return getSimpleValueAccess().getRule();
	}

	//ObjectValue:
	//	value=[ObjectSpecification|QualifiedName];
	public ObjectValueElements getObjectValueAccess() {
		return (pObjectValue != null) ? pObjectValue : (pObjectValue = new ObjectValueElements());
	}
	
	public ParserRule getObjectValueRule() {
		return getObjectValueAccess().getRule();
	}

	//Scenario:
	//	"scenario" name=ID "[" objects+=ObjectSpecification* links+=Link* "]";
	public ScenarioElements getScenarioAccess() {
		return (pScenario != null) ? pScenario : (pScenario = new ScenarioElements());
	}
	
	public ParserRule getScenarioRule() {
		return getScenarioAccess().getRule();
	}

	//ObjectSpecification:
	//	"object" name=ID ":" type=[uml::Class|QualifiedName] "{" attributes+=Attribute* "}";
	public ObjectSpecificationElements getObjectSpecificationAccess() {
		return (pObjectSpecification != null) ? pObjectSpecification : (pObjectSpecification = new ObjectSpecificationElements());
	}
	
	public ParserRule getObjectSpecificationRule() {
		return getObjectSpecificationAccess().getRule();
	}

	//Attribute:
	//	att=[uml::Property|QualifiedName] "=" value=Value ";";
	public AttributeElements getAttributeAccess() {
		return (pAttribute != null) ? pAttribute : (pAttribute = new AttributeElements());
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}

	//Link:
	//	"link" assoc=[uml::Association|QualifiedName] "{" "source" sourceProperty=[uml::Property|QualifiedName] "="
	//	sourceValue=[ObjectSpecification|QualifiedName] ";" "target" targetProperty=[uml::Property|QualifiedName] "="
	//	targetValue=[ObjectSpecification|QualifiedName] ";" "}";
	public LinkElements getLinkAccess() {
		return (pLink != null) ? pLink : (pLink = new LinkElements());
	}
	
	public ParserRule getLinkRule() {
		return getLinkAccess().getRule();
	}

	//Assertion:
	//	OrderAssertion | StateAssertion | FinallyStateAssertion;
	public AssertionElements getAssertionAccess() {
		return (pAssertion != null) ? pAssertion : (pAssertion = new AssertionElements());
	}
	
	public ParserRule getAssertionRule() {
		return getAssertionAccess().getRule();
	}

	//StateAssertion:
	//	"assertState" quantifier=TemporalQuantifier operator=TemporalOperator referencePoint=ReferencePoint ("until"
	//	untilPoint=ReferencePoint)? "{" checks+=Check* "}";
	public StateAssertionElements getStateAssertionAccess() {
		return (pStateAssertion != null) ? pStateAssertion : (pStateAssertion = new StateAssertionElements());
	}
	
	public ParserRule getStateAssertionRule() {
		return getStateAssertionAccess().getRule();
	}

	//ReferencePoint:
	//	ActionReferencePoint | ConstraintReferencePoint;
	public ReferencePointElements getReferencePointAccess() {
		return (pReferencePoint != null) ? pReferencePoint : (pReferencePoint = new ReferencePointElements());
	}
	
	public ParserRule getReferencePointRule() {
		return getReferencePointAccess().getRule();
	}

	//ActionReferencePoint:
	//	"action" action=[uml::Action|QualifiedName];
	public ActionReferencePointElements getActionReferencePointAccess() {
		return (pActionReferencePoint != null) ? pActionReferencePoint : (pActionReferencePoint = new ActionReferencePointElements());
	}
	
	public ParserRule getActionReferencePointRule() {
		return getActionReferencePointAccess().getRule();
	}

	//ConstraintReferencePoint:
	//	"constraint" constraintName=XStringLiteral;
	public ConstraintReferencePointElements getConstraintReferencePointAccess() {
		return (pConstraintReferencePoint != null) ? pConstraintReferencePoint : (pConstraintReferencePoint = new ConstraintReferencePointElements());
	}
	
	public ParserRule getConstraintReferencePointRule() {
		return getConstraintReferencePointAccess().getRule();
	}

	//FinallyStateAssertion:
	//	"finally" "{" {FinallyStateAssertion} checks+=Check* "}";
	public FinallyStateAssertionElements getFinallyStateAssertionAccess() {
		return (pFinallyStateAssertion != null) ? pFinallyStateAssertion : (pFinallyStateAssertion = new FinallyStateAssertionElements());
	}
	
	public ParserRule getFinallyStateAssertionRule() {
		return getFinallyStateAssertionAccess().getRule();
	}

	//Check:
	//	ConstraintCheck | StateExpression;
	public CheckElements getCheckAccess() {
		return (pCheck != null) ? pCheck : (pCheck = new CheckElements());
	}
	
	public ParserRule getCheckRule() {
		return getCheckAccess().getRule();
	}

	//ConstraintCheck:
	//	"check" constraintNames+=XStringLiteral ("," constraintNames+=XStringLiteral)* ("on"
	//	object=[VarDeclaration|QualifiedName])? ";";
	public ConstraintCheckElements getConstraintCheckAccess() {
		return (pConstraintCheck != null) ? pConstraintCheck : (pConstraintCheck = new ConstraintCheckElements());
	}
	
	public ParserRule getConstraintCheckRule() {
		return getConstraintCheckAccess().getRule();
	}

	//StateExpression:
	//	ObjectStateExpression | PropertyStateExpression;
	public StateExpressionElements getStateExpressionAccess() {
		return (pStateExpression != null) ? pStateExpression : (pStateExpression = new StateExpressionElements());
	}
	
	public ParserRule getStateExpressionRule() {
		return getStateExpressionAccess().getRule();
	}

	//ObjectStateExpression:
	//	pin=[VarDeclaration] operator=ArithmeticOperator value=Value ";";
	public ObjectStateExpressionElements getObjectStateExpressionAccess() {
		return (pObjectStateExpression != null) ? pObjectStateExpression : (pObjectStateExpression = new ObjectStateExpressionElements());
	}
	
	public ParserRule getObjectStateExpressionRule() {
		return getObjectStateExpressionAccess().getRule();
	}

	//PropertyStateExpression:
	//	pin=[VarDeclaration] "::" property=[uml::Property|QualifiedName] operator=ArithmeticOperator value=Value ";";
	public PropertyStateExpressionElements getPropertyStateExpressionAccess() {
		return (pPropertyStateExpression != null) ? pPropertyStateExpression : (pPropertyStateExpression = new PropertyStateExpressionElements());
	}
	
	public ParserRule getPropertyStateExpressionRule() {
		return getPropertyStateExpressionAccess().getRule();
	}

	//OrderAssertion:
	//	"assertOrder" order=NodeOrder ";";
	public OrderAssertionElements getOrderAssertionAccess() {
		return (pOrderAssertion != null) ? pOrderAssertion : (pOrderAssertion = new OrderAssertionElements());
	}
	
	public ParserRule getOrderAssertionRule() {
		return getOrderAssertionAccess().getRule();
	}

	//NodeOrder:
	//	nodes+=NodeSpecification ("," nodes+=NodeSpecification)*;
	public NodeOrderElements getNodeOrderAccess() {
		return (pNodeOrder != null) ? pNodeOrder : (pNodeOrder = new NodeOrderElements());
	}
	
	public ParserRule getNodeOrderRule() {
		return getNodeOrderAccess().getRule();
	}

	//NodeSpecification:
	//	node=[uml::ActivityNode|QualifiedName] (":" size=XNumberLiteral)? ("(" subOrder=NodeOrder ")")? | joker="*" |
	//	joker="_";
	public NodeSpecificationElements getNodeSpecificationAccess() {
		return (pNodeSpecification != null) ? pNodeSpecification : (pNodeSpecification = new NodeSpecificationElements());
	}
	
	public ParserRule getNodeSpecificationRule() {
		return getNodeSpecificationAccess().getRule();
	}

	//enum ArithmeticOperator:
	//	equal="=" | not_equal="!=" | greater=">" | smaller="<" | greater_equal=">=" | smaller_equal="<=" | includes |
	//	excludes;
	public ArithmeticOperatorElements getArithmeticOperatorAccess() {
		return (unknownRuleArithmeticOperator != null) ? unknownRuleArithmeticOperator : (unknownRuleArithmeticOperator = new ArithmeticOperatorElements());
	}
	
	public EnumRule getArithmeticOperatorRule() {
		return getArithmeticOperatorAccess().getRule();
	}

	//enum TemporalOperator:
	//	after | until;
	public TemporalOperatorElements getTemporalOperatorAccess() {
		return (unknownRuleTemporalOperator != null) ? unknownRuleTemporalOperator : (unknownRuleTemporalOperator = new TemporalOperatorElements());
	}
	
	public EnumRule getTemporalOperatorRule() {
		return getTemporalOperatorAccess().getRule();
	}

	//enum TemporalQuantifier:
	//	always | sometimes | eventually | immediately;
	public TemporalQuantifierElements getTemporalQuantifierAccess() {
		return (unknownRuleTemporalQuantifier != null) ? unknownRuleTemporalQuantifier : (unknownRuleTemporalQuantifier = new TemporalQuantifierElements());
	}
	
	public EnumRule getTemporalQuantifierRule() {
		return getTemporalQuantifierAccess().getRule();
	}

	//XExpression:
	//	XAssignment;
	public XbaseGrammarAccess.XExpressionElements getXExpressionAccess() {
		return gaXbase.getXExpressionAccess();
	}
	
	public ParserRule getXExpressionRule() {
		return getXExpressionAccess().getRule();
	}

	//XAssignment returns XExpression:
	//	{XAssignment} feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign value=XAssignment | XOrExpression
	//	(=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMultiAssign])
	//	rightOperand=XAssignment)?;
	public XbaseGrammarAccess.XAssignmentElements getXAssignmentAccess() {
		return gaXbase.getXAssignmentAccess();
	}
	
	public ParserRule getXAssignmentRule() {
		return getXAssignmentAccess().getRule();
	}

	//OpSingleAssign:
	//	"=";
	public XbaseGrammarAccess.OpSingleAssignElements getOpSingleAssignAccess() {
		return gaXbase.getOpSingleAssignAccess();
	}
	
	public ParserRule getOpSingleAssignRule() {
		return getOpSingleAssignAccess().getRule();
	}

	//OpMultiAssign:
	//	"+=" | "-=";
	public XbaseGrammarAccess.OpMultiAssignElements getOpMultiAssignAccess() {
		return gaXbase.getOpMultiAssignAccess();
	}
	
	public ParserRule getOpMultiAssignRule() {
		return getOpMultiAssignAccess().getRule();
	}

	//XOrExpression returns XExpression:
	//	XAndExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr])
	//	rightOperand=XAndExpression)*;
	public XbaseGrammarAccess.XOrExpressionElements getXOrExpressionAccess() {
		return gaXbase.getXOrExpressionAccess();
	}
	
	public ParserRule getXOrExpressionRule() {
		return getXOrExpressionAccess().getRule();
	}

	//OpOr:
	//	"||";
	public XbaseGrammarAccess.OpOrElements getOpOrAccess() {
		return gaXbase.getOpOrAccess();
	}
	
	public ParserRule getOpOrRule() {
		return getOpOrAccess().getRule();
	}

	//XAndExpression returns XExpression:
	//	XEqualityExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd])
	//	rightOperand=XEqualityExpression)*;
	public XbaseGrammarAccess.XAndExpressionElements getXAndExpressionAccess() {
		return gaXbase.getXAndExpressionAccess();
	}
	
	public ParserRule getXAndExpressionRule() {
		return getXAndExpressionAccess().getRule();
	}

	//OpAnd:
	//	"&&";
	public XbaseGrammarAccess.OpAndElements getOpAndAccess() {
		return gaXbase.getOpAndAccess();
	}
	
	public ParserRule getOpAndRule() {
		return getOpAndAccess().getRule();
	}

	//XEqualityExpression returns XExpression:
	//	XRelationalExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpEquality])
	//	rightOperand=XRelationalExpression)*;
	public XbaseGrammarAccess.XEqualityExpressionElements getXEqualityExpressionAccess() {
		return gaXbase.getXEqualityExpressionAccess();
	}
	
	public ParserRule getXEqualityExpressionRule() {
		return getXEqualityExpressionAccess().getRule();
	}

	//OpEquality:
	//	"==" | "!=" | "===" | "!==";
	public XbaseGrammarAccess.OpEqualityElements getOpEqualityAccess() {
		return gaXbase.getOpEqualityAccess();
	}
	
	public ParserRule getOpEqualityRule() {
		return getOpEqualityAccess().getRule();
	}

	//XRelationalExpression returns XExpression:
	//	XOtherOperatorExpression (=> ({XInstanceOfExpression.expression=current} "instanceof") type=JvmTypeReference | =>
	//	({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare])
	//	rightOperand=XOtherOperatorExpression)*;
	public XbaseGrammarAccess.XRelationalExpressionElements getXRelationalExpressionAccess() {
		return gaXbase.getXRelationalExpressionAccess();
	}
	
	public ParserRule getXRelationalExpressionRule() {
		return getXRelationalExpressionAccess().getRule();
	}

	//OpCompare:
	//	">=" | "<=" | ">" | "<";
	public XbaseGrammarAccess.OpCompareElements getOpCompareAccess() {
		return gaXbase.getOpCompareAccess();
	}
	
	public ParserRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}

	//XOtherOperatorExpression returns XExpression:
	//	XAdditiveExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOther])
	//	rightOperand=XAdditiveExpression)*;
	public XbaseGrammarAccess.XOtherOperatorExpressionElements getXOtherOperatorExpressionAccess() {
		return gaXbase.getXOtherOperatorExpressionAccess();
	}
	
	public ParserRule getXOtherOperatorExpressionRule() {
		return getXOtherOperatorExpressionAccess().getRule();
	}

	//OpOther:
	//	"->" | "..<" | ">" ".." | ".." | "=>" | ">" (=> (">" ">") | ">") | "<" (=> ("<" "<") | "<") | "<>" | "?:" | "<=>";
	public XbaseGrammarAccess.OpOtherElements getOpOtherAccess() {
		return gaXbase.getOpOtherAccess();
	}
	
	public ParserRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}

	//XAdditiveExpression returns XExpression:
	//	XMultiplicativeExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAdd])
	//	rightOperand=XMultiplicativeExpression)*;
	public XbaseGrammarAccess.XAdditiveExpressionElements getXAdditiveExpressionAccess() {
		return gaXbase.getXAdditiveExpressionAccess();
	}
	
	public ParserRule getXAdditiveExpressionRule() {
		return getXAdditiveExpressionAccess().getRule();
	}

	//OpAdd:
	//	"+" | "-";
	public XbaseGrammarAccess.OpAddElements getOpAddAccess() {
		return gaXbase.getOpAddAccess();
	}
	
	public ParserRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}

	//XMultiplicativeExpression returns XExpression:
	//	XUnaryOperation (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMulti])
	//	rightOperand=XUnaryOperation)*;
	public XbaseGrammarAccess.XMultiplicativeExpressionElements getXMultiplicativeExpressionAccess() {
		return gaXbase.getXMultiplicativeExpressionAccess();
	}
	
	public ParserRule getXMultiplicativeExpressionRule() {
		return getXMultiplicativeExpressionAccess().getRule();
	}

	//OpMulti:
	//	"*" | "**" | "/" | "%";
	public XbaseGrammarAccess.OpMultiElements getOpMultiAccess() {
		return gaXbase.getOpMultiAccess();
	}
	
	public ParserRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}

	//XUnaryOperation returns XExpression:
	//	{XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XUnaryOperation | XCastedExpression;
	public XbaseGrammarAccess.XUnaryOperationElements getXUnaryOperationAccess() {
		return gaXbase.getXUnaryOperationAccess();
	}
	
	public ParserRule getXUnaryOperationRule() {
		return getXUnaryOperationAccess().getRule();
	}

	//OpUnary:
	//	"!" | "-" | "+";
	public XbaseGrammarAccess.OpUnaryElements getOpUnaryAccess() {
		return gaXbase.getOpUnaryAccess();
	}
	
	public ParserRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}

	//XCastedExpression returns XExpression:
	//	XMemberFeatureCall (=> ({XCastedExpression.target=current} "as") type=JvmTypeReference)*;
	public XbaseGrammarAccess.XCastedExpressionElements getXCastedExpressionAccess() {
		return gaXbase.getXCastedExpressionAccess();
	}
	
	public ParserRule getXCastedExpressionRule() {
		return getXCastedExpressionAccess().getRule();
	}

	//XMemberFeatureCall returns XExpression:
	//	XPrimaryExpression (=> ({XAssignment.assignable=current} ("." | explicitStatic?="::")
	//	feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign) value=XAssignment | =>
	//	({XMemberFeatureCall.memberCallTarget=current} ("." | nullSafe?="?." | explicitStatic?="::")) ("<"
	//	typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
	//	feature=[types::JvmIdentifiableElement|FeatureCallID] (=> explicitOperationCall?="("
	//	(memberCallArguments+=XShortClosure | memberCallArguments+=XExpression ("," memberCallArguments+=XExpression)*)?
	//	")")? memberCallArguments+=XClosure?)*;
	public XbaseGrammarAccess.XMemberFeatureCallElements getXMemberFeatureCallAccess() {
		return gaXbase.getXMemberFeatureCallAccess();
	}
	
	public ParserRule getXMemberFeatureCallRule() {
		return getXMemberFeatureCallAccess().getRule();
	}

	//XPrimaryExpression returns XExpression:
	//	XConstructorCall | XBlockExpression | XSwitchExpression | XFeatureCall | XLiteral | XIfExpression |
	//	XForLoopExpression | XWhileExpression | XDoWhileExpression | XThrowExpression | XReturnExpression |
	//	XTryCatchFinallyExpression | XParenthesizedExpression;
	public XbaseGrammarAccess.XPrimaryExpressionElements getXPrimaryExpressionAccess() {
		return gaXbase.getXPrimaryExpressionAccess();
	}
	
	public ParserRule getXPrimaryExpressionRule() {
		return getXPrimaryExpressionAccess().getRule();
	}

	//XLiteral returns XExpression:
	//	XCollectionLiteral | XClosure | XBooleanLiteral | XNumberLiteral | XNullLiteral | XStringLiteral | XTypeLiteral;
	public XbaseGrammarAccess.XLiteralElements getXLiteralAccess() {
		return gaXbase.getXLiteralAccess();
	}
	
	public ParserRule getXLiteralRule() {
		return getXLiteralAccess().getRule();
	}

	//XCollectionLiteral:
	//	XSetLiteral | XListLiteral;
	public XbaseGrammarAccess.XCollectionLiteralElements getXCollectionLiteralAccess() {
		return gaXbase.getXCollectionLiteralAccess();
	}
	
	public ParserRule getXCollectionLiteralRule() {
		return getXCollectionLiteralAccess().getRule();
	}

	//XSetLiteral:
	//	{XSetLiteral} "#" "{" (elements+=XExpression ("," elements+=XExpression)*)? "}";
	public XbaseGrammarAccess.XSetLiteralElements getXSetLiteralAccess() {
		return gaXbase.getXSetLiteralAccess();
	}
	
	public ParserRule getXSetLiteralRule() {
		return getXSetLiteralAccess().getRule();
	}

	//XListLiteral:
	//	{XListLiteral} "#" "[" (elements+=XExpression ("," elements+=XExpression)*)? "]";
	public XbaseGrammarAccess.XListLiteralElements getXListLiteralAccess() {
		return gaXbase.getXListLiteralAccess();
	}
	
	public ParserRule getXListLiteralRule() {
		return getXListLiteralAccess().getRule();
	}

	//XClosure returns XExpression:
	//	=> ({XClosure} "[") => ((declaredFormalParameters+=JvmFormalParameter (","
	//	declaredFormalParameters+=JvmFormalParameter)*)? explicitSyntax?="|")? expression=XExpressionInClosure "]";
	public XbaseGrammarAccess.XClosureElements getXClosureAccess() {
		return gaXbase.getXClosureAccess();
	}
	
	public ParserRule getXClosureRule() {
		return getXClosureAccess().getRule();
	}

	//XExpressionInClosure returns XExpression:
	//	{XBlockExpression} (expressions+=XExpressionInsideBlock ";"?)*;
	public XbaseGrammarAccess.XExpressionInClosureElements getXExpressionInClosureAccess() {
		return gaXbase.getXExpressionInClosureAccess();
	}
	
	public ParserRule getXExpressionInClosureRule() {
		return getXExpressionInClosureAccess().getRule();
	}

	//XShortClosure returns XExpression:
	//	=> ({XClosure} (declaredFormalParameters+=JvmFormalParameter ("," declaredFormalParameters+=JvmFormalParameter)*)?
	//	explicitSyntax?="|") expression=XExpression;
	public XbaseGrammarAccess.XShortClosureElements getXShortClosureAccess() {
		return gaXbase.getXShortClosureAccess();
	}
	
	public ParserRule getXShortClosureRule() {
		return getXShortClosureAccess().getRule();
	}

	//XParenthesizedExpression returns XExpression:
	//	"(" XExpression ")";
	public XbaseGrammarAccess.XParenthesizedExpressionElements getXParenthesizedExpressionAccess() {
		return gaXbase.getXParenthesizedExpressionAccess();
	}
	
	public ParserRule getXParenthesizedExpressionRule() {
		return getXParenthesizedExpressionAccess().getRule();
	}

	//XIfExpression returns XExpression:
	//	{XIfExpression} "if" "(" if=XExpression ")" then=XExpression ("else" else=XExpression)?;
	public XbaseGrammarAccess.XIfExpressionElements getXIfExpressionAccess() {
		return gaXbase.getXIfExpressionAccess();
	}
	
	public ParserRule getXIfExpressionRule() {
		return getXIfExpressionAccess().getRule();
	}

	//XSwitchExpression returns XExpression:
	//	{XSwitchExpression} "switch" (=> (localVarName=ValidID ":")? switch=XExpression | => ("(" localVarName=ValidID ":")
	//	switch=XExpression ")") "{" cases+=XCasePart+ ("default" ":" default=XExpression)? "}";
	public XbaseGrammarAccess.XSwitchExpressionElements getXSwitchExpressionAccess() {
		return gaXbase.getXSwitchExpressionAccess();
	}
	
	public ParserRule getXSwitchExpressionRule() {
		return getXSwitchExpressionAccess().getRule();
	}

	//XCasePart:
	//	typeGuard=JvmTypeReference? ("case" case=XExpression)? ":" then=XExpression;
	public XbaseGrammarAccess.XCasePartElements getXCasePartAccess() {
		return gaXbase.getXCasePartAccess();
	}
	
	public ParserRule getXCasePartRule() {
		return getXCasePartAccess().getRule();
	}

	//XForLoopExpression returns XExpression:
	//	{XForLoopExpression} "for" "(" declaredParam=JvmFormalParameter ":" forExpression=XExpression ")"
	//	eachExpression=XExpression;
	public XbaseGrammarAccess.XForLoopExpressionElements getXForLoopExpressionAccess() {
		return gaXbase.getXForLoopExpressionAccess();
	}
	
	public ParserRule getXForLoopExpressionRule() {
		return getXForLoopExpressionAccess().getRule();
	}

	//XWhileExpression returns XExpression:
	//	{XWhileExpression} "while" "(" predicate=XExpression ")" body=XExpression;
	public XbaseGrammarAccess.XWhileExpressionElements getXWhileExpressionAccess() {
		return gaXbase.getXWhileExpressionAccess();
	}
	
	public ParserRule getXWhileExpressionRule() {
		return getXWhileExpressionAccess().getRule();
	}

	//XDoWhileExpression returns XExpression:
	//	{XDoWhileExpression} "do" body=XExpression "while" "(" predicate=XExpression ")";
	public XbaseGrammarAccess.XDoWhileExpressionElements getXDoWhileExpressionAccess() {
		return gaXbase.getXDoWhileExpressionAccess();
	}
	
	public ParserRule getXDoWhileExpressionRule() {
		return getXDoWhileExpressionAccess().getRule();
	}

	//XBlockExpression returns XExpression:
	//	{XBlockExpression} "{" (expressions+=XExpressionInsideBlock ";"?)* "}";
	public XbaseGrammarAccess.XBlockExpressionElements getXBlockExpressionAccess() {
		return gaXbase.getXBlockExpressionAccess();
	}
	
	public ParserRule getXBlockExpressionRule() {
		return getXBlockExpressionAccess().getRule();
	}

	//XExpressionInsideBlock returns XExpression:
	//	XVariableDeclaration | XExpression;
	public XbaseGrammarAccess.XExpressionInsideBlockElements getXExpressionInsideBlockAccess() {
		return gaXbase.getXExpressionInsideBlockAccess();
	}
	
	public ParserRule getXExpressionInsideBlockRule() {
		return getXExpressionInsideBlockAccess().getRule();
	}

	//XVariableDeclaration returns XExpression:
	//	{XVariableDeclaration} (writeable?="var" | "val") (=> (type=JvmTypeReference name=ValidID) | name=ValidID) ("="
	//	right=XExpression)?;
	public XbaseGrammarAccess.XVariableDeclarationElements getXVariableDeclarationAccess() {
		return gaXbase.getXVariableDeclarationAccess();
	}
	
	public ParserRule getXVariableDeclarationRule() {
		return getXVariableDeclarationAccess().getRule();
	}

	//JvmFormalParameter returns types::JvmFormalParameter:
	//	parameterType=JvmTypeReference? name=ValidID;
	public XbaseGrammarAccess.JvmFormalParameterElements getJvmFormalParameterAccess() {
		return gaXbase.getJvmFormalParameterAccess();
	}
	
	public ParserRule getJvmFormalParameterRule() {
		return getJvmFormalParameterAccess().getRule();
	}

	//FullJvmFormalParameter returns types::JvmFormalParameter:
	//	parameterType=JvmTypeReference name=ValidID;
	public XbaseGrammarAccess.FullJvmFormalParameterElements getFullJvmFormalParameterAccess() {
		return gaXbase.getFullJvmFormalParameterAccess();
	}
	
	public ParserRule getFullJvmFormalParameterRule() {
		return getFullJvmFormalParameterAccess().getRule();
	}

	//XFeatureCall returns XExpression:
	//	{XFeatureCall} ("<" typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?="(" (featureCallArguments+=XShortClosure
	//	| featureCallArguments+=XExpression ("," featureCallArguments+=XExpression)*)? ")")? featureCallArguments+=XClosure?;
	public XbaseGrammarAccess.XFeatureCallElements getXFeatureCallAccess() {
		return gaXbase.getXFeatureCallAccess();
	}
	
	public ParserRule getXFeatureCallRule() {
		return getXFeatureCallAccess().getRule();
	}

	//FeatureCallID:
	//	ValidID | "extends" | "static" | "import" | "extension";
	public XbaseGrammarAccess.FeatureCallIDElements getFeatureCallIDAccess() {
		return gaXbase.getFeatureCallIDAccess();
	}
	
	public ParserRule getFeatureCallIDRule() {
		return getFeatureCallIDAccess().getRule();
	}

	//IdOrSuper:
	//	FeatureCallID | "super";
	public XbaseGrammarAccess.IdOrSuperElements getIdOrSuperAccess() {
		return gaXbase.getIdOrSuperAccess();
	}
	
	public ParserRule getIdOrSuperRule() {
		return getIdOrSuperAccess().getRule();
	}

	//XConstructorCall returns XExpression:
	//	{XConstructorCall} "new" constructor=[types::JvmConstructor|QualifiedName] ("<"
	//	typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")? ("("
	//	(arguments+=XShortClosure | arguments+=XExpression ("," arguments+=XExpression)*)? ")")? arguments+=XClosure?;
	public XbaseGrammarAccess.XConstructorCallElements getXConstructorCallAccess() {
		return gaXbase.getXConstructorCallAccess();
	}
	
	public ParserRule getXConstructorCallRule() {
		return getXConstructorCallAccess().getRule();
	}

	//XBooleanLiteral returns XExpression:
	//	{XBooleanLiteral} ("false" | isTrue?="true");
	public XbaseGrammarAccess.XBooleanLiteralElements getXBooleanLiteralAccess() {
		return gaXbase.getXBooleanLiteralAccess();
	}
	
	public ParserRule getXBooleanLiteralRule() {
		return getXBooleanLiteralAccess().getRule();
	}

	//XNullLiteral returns XExpression:
	//	{XNullLiteral} "null";
	public XbaseGrammarAccess.XNullLiteralElements getXNullLiteralAccess() {
		return gaXbase.getXNullLiteralAccess();
	}
	
	public ParserRule getXNullLiteralRule() {
		return getXNullLiteralAccess().getRule();
	}

	//XNumberLiteral returns XExpression:
	//	{XNumberLiteral} value=Number;
	public XbaseGrammarAccess.XNumberLiteralElements getXNumberLiteralAccess() {
		return gaXbase.getXNumberLiteralAccess();
	}
	
	public ParserRule getXNumberLiteralRule() {
		return getXNumberLiteralAccess().getRule();
	}

	//XStringLiteral returns XExpression:
	//	{XStringLiteral} value=STRING;
	public XbaseGrammarAccess.XStringLiteralElements getXStringLiteralAccess() {
		return gaXbase.getXStringLiteralAccess();
	}
	
	public ParserRule getXStringLiteralRule() {
		return getXStringLiteralAccess().getRule();
	}

	//XTypeLiteral returns XExpression:
	//	{XTypeLiteral} "typeof" "(" type=[types::JvmType|QualifiedName] arrayDimensions+=ArrayBrackets* ")";
	public XbaseGrammarAccess.XTypeLiteralElements getXTypeLiteralAccess() {
		return gaXbase.getXTypeLiteralAccess();
	}
	
	public ParserRule getXTypeLiteralRule() {
		return getXTypeLiteralAccess().getRule();
	}

	//XThrowExpression returns XExpression:
	//	{XThrowExpression} "throw" expression=XExpression;
	public XbaseGrammarAccess.XThrowExpressionElements getXThrowExpressionAccess() {
		return gaXbase.getXThrowExpressionAccess();
	}
	
	public ParserRule getXThrowExpressionRule() {
		return getXThrowExpressionAccess().getRule();
	}

	//XReturnExpression returns XExpression:
	//	{XReturnExpression} "return" => expression=XExpression?;
	public XbaseGrammarAccess.XReturnExpressionElements getXReturnExpressionAccess() {
		return gaXbase.getXReturnExpressionAccess();
	}
	
	public ParserRule getXReturnExpressionRule() {
		return getXReturnExpressionAccess().getRule();
	}

	//XTryCatchFinallyExpression returns XExpression:
	//	{XTryCatchFinallyExpression} "try" expression=XExpression (catchClauses+=XCatchClause+ ("finally"
	//	finallyExpression=XExpression)? | "finally" finallyExpression=XExpression);
	public XbaseGrammarAccess.XTryCatchFinallyExpressionElements getXTryCatchFinallyExpressionAccess() {
		return gaXbase.getXTryCatchFinallyExpressionAccess();
	}
	
	public ParserRule getXTryCatchFinallyExpressionRule() {
		return getXTryCatchFinallyExpressionAccess().getRule();
	}

	//XCatchClause:
	//	"catch" "(" declaredParam=FullJvmFormalParameter ")" expression=XExpression;
	public XbaseGrammarAccess.XCatchClauseElements getXCatchClauseAccess() {
		return gaXbase.getXCatchClauseAccess();
	}
	
	public ParserRule getXCatchClauseRule() {
		return getXCatchClauseAccess().getRule();
	}

	//QualifiedName:
	//	ValidID ("." ValidID)*;
	public XbaseGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaXbase.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//Number hidden():
	//	HEX | (INT | DECIMAL) ("." (INT | DECIMAL))?;
	public XbaseGrammarAccess.NumberElements getNumberAccess() {
		return gaXbase.getNumberAccess();
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}

	/// **
	// * Dummy rule, for "better" downwards compatibility, since GrammarAccess generates non-static inner classes, 
	// * which makes downstream grammars break on classloading, when a rule is removed.
	// * /
	//StaticQualifier:
	//	(ValidID "::")+;
	public XbaseGrammarAccess.StaticQualifierElements getStaticQualifierAccess() {
		return gaXbase.getStaticQualifierAccess();
	}
	
	public ParserRule getStaticQualifierRule() {
		return getStaticQualifierAccess().getRule();
	}

	//terminal HEX:
	//	("0x" | "0X") ("0".."9" | "a".."f" | "A".."F" | "_")+ ("#" (("b" | "B") ("i" | "I") | ("l" | "L")))?;
	public TerminalRule getHEXRule() {
		return gaXbase.getHEXRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9" ("0".."9" | "_")*;
	public TerminalRule getINTRule() {
		return gaXbase.getINTRule();
	} 

	//terminal DECIMAL:
	//	INT (("e" | "E") ("+" | "-")? INT)? (("b" | "B") ("i" | "I" | "d" | "D") | ("l" | "L" | "d" | "D" | "f" | "F"))?;
	public TerminalRule getDECIMALRule() {
		return gaXbase.getDECIMALRule();
	} 

	//JvmTypeReference:
	//	JvmParameterizedTypeReference => ({JvmGenericArrayTypeReference.componentType=current} ArrayBrackets)* |
	//	XFunctionTypeRef;
	public XtypeGrammarAccess.JvmTypeReferenceElements getJvmTypeReferenceAccess() {
		return gaXbase.getJvmTypeReferenceAccess();
	}
	
	public ParserRule getJvmTypeReferenceRule() {
		return getJvmTypeReferenceAccess().getRule();
	}

	//ArrayBrackets:
	//	"[" "]";
	public XtypeGrammarAccess.ArrayBracketsElements getArrayBracketsAccess() {
		return gaXbase.getArrayBracketsAccess();
	}
	
	public ParserRule getArrayBracketsRule() {
		return getArrayBracketsAccess().getRule();
	}

	//XFunctionTypeRef:
	//	("(" (paramTypes+=JvmTypeReference ("," paramTypes+=JvmTypeReference)*)? ")")? "=>" returnType=JvmTypeReference;
	public XtypeGrammarAccess.XFunctionTypeRefElements getXFunctionTypeRefAccess() {
		return gaXbase.getXFunctionTypeRefAccess();
	}
	
	public ParserRule getXFunctionTypeRefRule() {
		return getXFunctionTypeRefAccess().getRule();
	}

	//JvmParameterizedTypeReference:
	//	type=[JvmType|QualifiedName] ("<" arguments+=JvmArgumentTypeReference ("," arguments+=JvmArgumentTypeReference)*
	//	">")?;
	public XtypeGrammarAccess.JvmParameterizedTypeReferenceElements getJvmParameterizedTypeReferenceAccess() {
		return gaXbase.getJvmParameterizedTypeReferenceAccess();
	}
	
	public ParserRule getJvmParameterizedTypeReferenceRule() {
		return getJvmParameterizedTypeReferenceAccess().getRule();
	}

	//JvmArgumentTypeReference returns JvmTypeReference:
	//	JvmTypeReference | JvmWildcardTypeReference;
	public XtypeGrammarAccess.JvmArgumentTypeReferenceElements getJvmArgumentTypeReferenceAccess() {
		return gaXbase.getJvmArgumentTypeReferenceAccess();
	}
	
	public ParserRule getJvmArgumentTypeReferenceRule() {
		return getJvmArgumentTypeReferenceAccess().getRule();
	}

	//JvmWildcardTypeReference:
	//	{JvmWildcardTypeReference} "?" (constraints+=JvmUpperBound | constraints+=JvmLowerBound)?;
	public XtypeGrammarAccess.JvmWildcardTypeReferenceElements getJvmWildcardTypeReferenceAccess() {
		return gaXbase.getJvmWildcardTypeReferenceAccess();
	}
	
	public ParserRule getJvmWildcardTypeReferenceRule() {
		return getJvmWildcardTypeReferenceAccess().getRule();
	}

	//JvmUpperBound:
	//	"extends" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundElements getJvmUpperBoundAccess() {
		return gaXbase.getJvmUpperBoundAccess();
	}
	
	public ParserRule getJvmUpperBoundRule() {
		return getJvmUpperBoundAccess().getRule();
	}

	//JvmUpperBoundAnded returns JvmUpperBound:
	//	"&" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundAndedElements getJvmUpperBoundAndedAccess() {
		return gaXbase.getJvmUpperBoundAndedAccess();
	}
	
	public ParserRule getJvmUpperBoundAndedRule() {
		return getJvmUpperBoundAndedAccess().getRule();
	}

	//JvmLowerBound:
	//	"super" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundElements getJvmLowerBoundAccess() {
		return gaXbase.getJvmLowerBoundAccess();
	}
	
	public ParserRule getJvmLowerBoundRule() {
		return getJvmLowerBoundAccess().getRule();
	}

	//JvmTypeParameter:
	//	name=ValidID (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded* | constraints+=JvmLowerBound)?;
	public XtypeGrammarAccess.JvmTypeParameterElements getJvmTypeParameterAccess() {
		return gaXbase.getJvmTypeParameterAccess();
	}
	
	public ParserRule getJvmTypeParameterRule() {
		return getJvmTypeParameterAccess().getRule();
	}

	//QualifiedNameWithWildcard:
	//	QualifiedName "." "*";
	public XtypeGrammarAccess.QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return gaXbase.getQualifiedNameWithWildcardAccess();
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}

	//ValidID:
	//	ID;
	public XtypeGrammarAccess.ValidIDElements getValidIDAccess() {
		return gaXbase.getValidIDAccess();
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}

	//XImportSection:
	//	importDeclarations+=XImportDeclaration+;
	public XtypeGrammarAccess.XImportSectionElements getXImportSectionAccess() {
		return gaXbase.getXImportSectionAccess();
	}
	
	public ParserRule getXImportSectionRule() {
		return getXImportSectionAccess().getRule();
	}

	//XImportDeclaration:
	//	"import" (static?="static" extension?="extension"? importedType=[JvmDeclaredType|QualifiedName] "." "*" |
	//	importedType=[JvmDeclaredType|QualifiedName] | importedNamespace=QualifiedNameWithWildcard) ";"?;
	public XtypeGrammarAccess.XImportDeclarationElements getXImportDeclarationAccess() {
		return gaXbase.getXImportDeclarationAccess();
	}
	
	public ParserRule getXImportDeclarationRule() {
		return getXImportDeclarationAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "$" | "_") ("a".."z" | "A".."Z" | "$" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaXbase.getIDRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaXbase.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaXbase.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaXbase.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaXbase.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaXbase.getANY_OTHERRule();
	} 
}
